
SCOPE_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042c8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a2d0  080043d8  080043d8  000143d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800e6a8  0800e6a8  0001e6a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800e6ac  0800e6ac  0001e6ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  0800e6b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001d8  20000070  0800e720  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20000248  0800e720  00020248  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   00004075  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001238  00000000  00000000  0002410e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000528  00000000  00000000  00025348  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000418  00000000  00000000  00025870  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000018f6  00000000  00000000  00025c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000014c8  00000000  00000000  0002757e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00028a46  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001690  00000000  00000000  00028ac4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0002a154  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	080043c0 	.word	0x080043c0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	080043c0 	.word	0x080043c0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f092 0f00 	teq	r2, #0
 800043a:	bf14      	ite	ne
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000450:	e720      	b.n	8000294 <__adddf3+0x138>
 8000452:	bf00      	nop

08000454 <__aeabi_ul2d>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	b530      	push	{r4, r5, lr}
 800045e:	f04f 0500 	mov.w	r5, #0
 8000462:	e00a      	b.n	800047a <__aeabi_l2d+0x16>

08000464 <__aeabi_l2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000472:	d502      	bpl.n	800047a <__aeabi_l2d+0x16>
 8000474:	4240      	negs	r0, r0
 8000476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000482:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000486:	f43f aedc 	beq.w	8000242 <__adddf3+0xe6>
 800048a:	f04f 0203 	mov.w	r2, #3
 800048e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000492:	bf18      	it	ne
 8000494:	3203      	addne	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a2:	f1c2 0320 	rsb	r3, r2, #32
 80004a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b2:	ea40 000e 	orr.w	r0, r0, lr
 80004b6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ba:	4414      	add	r4, r2
 80004bc:	e6c1      	b.n	8000242 <__adddf3+0xe6>
 80004be:	bf00      	nop

080004c0 <__aeabi_dmul>:
 80004c0:	b570      	push	{r4, r5, r6, lr}
 80004c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ce:	bf1d      	ittte	ne
 80004d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d4:	ea94 0f0c 	teqne	r4, ip
 80004d8:	ea95 0f0c 	teqne	r5, ip
 80004dc:	f000 f8de 	bleq	800069c <__aeabi_dmul+0x1dc>
 80004e0:	442c      	add	r4, r5
 80004e2:	ea81 0603 	eor.w	r6, r1, r3
 80004e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f2:	bf18      	it	ne
 80004f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000500:	d038      	beq.n	8000574 <__aeabi_dmul+0xb4>
 8000502:	fba0 ce02 	umull	ip, lr, r0, r2
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800050e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000512:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000516:	f04f 0600 	mov.w	r6, #0
 800051a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800051e:	f09c 0f00 	teq	ip, #0
 8000522:	bf18      	it	ne
 8000524:	f04e 0e01 	orrne.w	lr, lr, #1
 8000528:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800052c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000530:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000534:	d204      	bcs.n	8000540 <__aeabi_dmul+0x80>
 8000536:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053a:	416d      	adcs	r5, r5
 800053c:	eb46 0606 	adc.w	r6, r6, r6
 8000540:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000544:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000548:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800054c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000550:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000554:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000558:	bf88      	it	hi
 800055a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800055e:	d81e      	bhi.n	800059e <__aeabi_dmul+0xde>
 8000560:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000564:	bf08      	it	eq
 8000566:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056a:	f150 0000 	adcs.w	r0, r0, #0
 800056e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000578:	ea46 0101 	orr.w	r1, r6, r1
 800057c:	ea40 0002 	orr.w	r0, r0, r2
 8000580:	ea81 0103 	eor.w	r1, r1, r3
 8000584:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000588:	bfc2      	ittt	gt
 800058a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800058e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000592:	bd70      	popgt	{r4, r5, r6, pc}
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f04f 0e00 	mov.w	lr, #0
 800059c:	3c01      	subs	r4, #1
 800059e:	f300 80ab 	bgt.w	80006f8 <__aeabi_dmul+0x238>
 80005a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005a6:	bfde      	ittt	le
 80005a8:	2000      	movle	r0, #0
 80005aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ae:	bd70      	pople	{r4, r5, r6, pc}
 80005b0:	f1c4 0400 	rsb	r4, r4, #0
 80005b4:	3c20      	subs	r4, #32
 80005b6:	da35      	bge.n	8000624 <__aeabi_dmul+0x164>
 80005b8:	340c      	adds	r4, #12
 80005ba:	dc1b      	bgt.n	80005f4 <__aeabi_dmul+0x134>
 80005bc:	f104 0414 	add.w	r4, r4, #20
 80005c0:	f1c4 0520 	rsb	r5, r4, #32
 80005c4:	fa00 f305 	lsl.w	r3, r0, r5
 80005c8:	fa20 f004 	lsr.w	r0, r0, r4
 80005cc:	fa01 f205 	lsl.w	r2, r1, r5
 80005d0:	ea40 0002 	orr.w	r0, r0, r2
 80005d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e0:	fa21 f604 	lsr.w	r6, r1, r4
 80005e4:	eb42 0106 	adc.w	r1, r2, r6
 80005e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005ec:	bf08      	it	eq
 80005ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f1c4 040c 	rsb	r4, r4, #12
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000600:	fa20 f005 	lsr.w	r0, r0, r5
 8000604:	fa01 f204 	lsl.w	r2, r1, r4
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000614:	f141 0100 	adc.w	r1, r1, #0
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f205 	lsl.w	r2, r0, r5
 800062c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000630:	fa20 f304 	lsr.w	r3, r0, r4
 8000634:	fa01 f205 	lsl.w	r2, r1, r5
 8000638:	ea43 0302 	orr.w	r3, r3, r2
 800063c:	fa21 f004 	lsr.w	r0, r1, r4
 8000640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000644:	fa21 f204 	lsr.w	r2, r1, r4
 8000648:	ea20 0002 	bic.w	r0, r0, r2
 800064c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f094 0f00 	teq	r4, #0
 8000660:	d10f      	bne.n	8000682 <__aeabi_dmul+0x1c2>
 8000662:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000666:	0040      	lsls	r0, r0, #1
 8000668:	eb41 0101 	adc.w	r1, r1, r1
 800066c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000670:	bf08      	it	eq
 8000672:	3c01      	subeq	r4, #1
 8000674:	d0f7      	beq.n	8000666 <__aeabi_dmul+0x1a6>
 8000676:	ea41 0106 	orr.w	r1, r1, r6
 800067a:	f095 0f00 	teq	r5, #0
 800067e:	bf18      	it	ne
 8000680:	4770      	bxne	lr
 8000682:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	eb43 0303 	adc.w	r3, r3, r3
 800068c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000690:	bf08      	it	eq
 8000692:	3d01      	subeq	r5, #1
 8000694:	d0f7      	beq.n	8000686 <__aeabi_dmul+0x1c6>
 8000696:	ea43 0306 	orr.w	r3, r3, r6
 800069a:	4770      	bx	lr
 800069c:	ea94 0f0c 	teq	r4, ip
 80006a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a4:	bf18      	it	ne
 80006a6:	ea95 0f0c 	teqne	r5, ip
 80006aa:	d00c      	beq.n	80006c6 <__aeabi_dmul+0x206>
 80006ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b0:	bf18      	it	ne
 80006b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b6:	d1d1      	bne.n	800065c <__aeabi_dmul+0x19c>
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd70      	pop	{r4, r5, r6, pc}
 80006c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ca:	bf06      	itte	eq
 80006cc:	4610      	moveq	r0, r2
 80006ce:	4619      	moveq	r1, r3
 80006d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d4:	d019      	beq.n	800070a <__aeabi_dmul+0x24a>
 80006d6:	ea94 0f0c 	teq	r4, ip
 80006da:	d102      	bne.n	80006e2 <__aeabi_dmul+0x222>
 80006dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e0:	d113      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006e2:	ea95 0f0c 	teq	r5, ip
 80006e6:	d105      	bne.n	80006f4 <__aeabi_dmul+0x234>
 80006e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006ec:	bf1c      	itt	ne
 80006ee:	4610      	movne	r0, r2
 80006f0:	4619      	movne	r1, r3
 80006f2:	d10a      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006f4:	ea81 0103 	eor.w	r1, r1, r3
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000704:	f04f 0000 	mov.w	r0, #0
 8000708:	bd70      	pop	{r4, r5, r6, pc}
 800070a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000712:	bd70      	pop	{r4, r5, r6, pc}

08000714 <__aeabi_ddiv>:
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000722:	bf1d      	ittte	ne
 8000724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000728:	ea94 0f0c 	teqne	r4, ip
 800072c:	ea95 0f0c 	teqne	r5, ip
 8000730:	f000 f8a7 	bleq	8000882 <__aeabi_ddiv+0x16e>
 8000734:	eba4 0405 	sub.w	r4, r4, r5
 8000738:	ea81 0e03 	eor.w	lr, r1, r3
 800073c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000740:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000744:	f000 8088 	beq.w	8000858 <__aeabi_ddiv+0x144>
 8000748:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800074c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000750:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000754:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000758:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800075c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000760:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000764:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000768:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800076c:	429d      	cmp	r5, r3
 800076e:	bf08      	it	eq
 8000770:	4296      	cmpeq	r6, r2
 8000772:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000776:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077a:	d202      	bcs.n	8000782 <__aeabi_ddiv+0x6e>
 800077c:	085b      	lsrs	r3, r3, #1
 800077e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000782:	1ab6      	subs	r6, r6, r2
 8000784:	eb65 0503 	sbc.w	r5, r5, r3
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	ea4f 0232 	mov.w	r2, r2, rrx
 800078e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000792:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000796:	ebb6 0e02 	subs.w	lr, r6, r2
 800079a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800079e:	bf22      	ittt	cs
 80007a0:	1ab6      	subcs	r6, r6, r2
 80007a2:	4675      	movcs	r5, lr
 80007a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f4:	d018      	beq.n	8000828 <__aeabi_ddiv+0x114>
 80007f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000802:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000806:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800080e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000812:	d1c0      	bne.n	8000796 <__aeabi_ddiv+0x82>
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	d10b      	bne.n	8000832 <__aeabi_ddiv+0x11e>
 800081a:	ea41 0100 	orr.w	r1, r1, r0
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000826:	e7b6      	b.n	8000796 <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	bf04      	itt	eq
 800082e:	4301      	orreq	r1, r0
 8000830:	2000      	moveq	r0, #0
 8000832:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000836:	bf88      	it	hi
 8000838:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800083c:	f63f aeaf 	bhi.w	800059e <__aeabi_dmul+0xde>
 8000840:	ebb5 0c03 	subs.w	ip, r5, r3
 8000844:	bf04      	itt	eq
 8000846:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800084e:	f150 0000 	adcs.w	r0, r0, #0
 8000852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800085c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000860:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000864:	bfc2      	ittt	gt
 8000866:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800086e:	bd70      	popgt	{r4, r5, r6, pc}
 8000870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000874:	f04f 0e00 	mov.w	lr, #0
 8000878:	3c01      	subs	r4, #1
 800087a:	e690      	b.n	800059e <__aeabi_dmul+0xde>
 800087c:	ea45 0e06 	orr.w	lr, r5, r6
 8000880:	e68d      	b.n	800059e <__aeabi_dmul+0xde>
 8000882:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000886:	ea94 0f0c 	teq	r4, ip
 800088a:	bf08      	it	eq
 800088c:	ea95 0f0c 	teqeq	r5, ip
 8000890:	f43f af3b 	beq.w	800070a <__aeabi_dmul+0x24a>
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	d10a      	bne.n	80008b0 <__aeabi_ddiv+0x19c>
 800089a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800089e:	f47f af34 	bne.w	800070a <__aeabi_dmul+0x24a>
 80008a2:	ea95 0f0c 	teq	r5, ip
 80008a6:	f47f af25 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008aa:	4610      	mov	r0, r2
 80008ac:	4619      	mov	r1, r3
 80008ae:	e72c      	b.n	800070a <__aeabi_dmul+0x24a>
 80008b0:	ea95 0f0c 	teq	r5, ip
 80008b4:	d106      	bne.n	80008c4 <__aeabi_ddiv+0x1b0>
 80008b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ba:	f43f aefd 	beq.w	80006b8 <__aeabi_dmul+0x1f8>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e722      	b.n	800070a <__aeabi_dmul+0x24a>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	f47f aec5 	bne.w	800065c <__aeabi_dmul+0x19c>
 80008d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008d6:	f47f af0d 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008de:	f47f aeeb 	bne.w	80006b8 <__aeabi_dmul+0x1f8>
 80008e2:	e712      	b.n	800070a <__aeabi_dmul+0x24a>

080008e4 <__gedf2>:
 80008e4:	f04f 3cff 	mov.w	ip, #4294967295
 80008e8:	e006      	b.n	80008f8 <__cmpdf2+0x4>
 80008ea:	bf00      	nop

080008ec <__ledf2>:
 80008ec:	f04f 0c01 	mov.w	ip, #1
 80008f0:	e002      	b.n	80008f8 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__cmpdf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80008fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000900:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000904:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800090e:	d01b      	beq.n	8000948 <__cmpdf2+0x54>
 8000910:	b001      	add	sp, #4
 8000912:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000916:	bf0c      	ite	eq
 8000918:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800091c:	ea91 0f03 	teqne	r1, r3
 8000920:	bf02      	ittt	eq
 8000922:	ea90 0f02 	teqeq	r0, r2
 8000926:	2000      	moveq	r0, #0
 8000928:	4770      	bxeq	lr
 800092a:	f110 0f00 	cmn.w	r0, #0
 800092e:	ea91 0f03 	teq	r1, r3
 8000932:	bf58      	it	pl
 8000934:	4299      	cmppl	r1, r3
 8000936:	bf08      	it	eq
 8000938:	4290      	cmpeq	r0, r2
 800093a:	bf2c      	ite	cs
 800093c:	17d8      	asrcs	r0, r3, #31
 800093e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000942:	f040 0001 	orr.w	r0, r0, #1
 8000946:	4770      	bx	lr
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	d102      	bne.n	8000958 <__cmpdf2+0x64>
 8000952:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000956:	d107      	bne.n	8000968 <__cmpdf2+0x74>
 8000958:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d1d6      	bne.n	8000910 <__cmpdf2+0x1c>
 8000962:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000966:	d0d3      	beq.n	8000910 <__cmpdf2+0x1c>
 8000968:	f85d 0b04 	ldr.w	r0, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop

08000970 <__aeabi_cdrcmple>:
 8000970:	4684      	mov	ip, r0
 8000972:	4610      	mov	r0, r2
 8000974:	4662      	mov	r2, ip
 8000976:	468c      	mov	ip, r1
 8000978:	4619      	mov	r1, r3
 800097a:	4663      	mov	r3, ip
 800097c:	e000      	b.n	8000980 <__aeabi_cdcmpeq>
 800097e:	bf00      	nop

08000980 <__aeabi_cdcmpeq>:
 8000980:	b501      	push	{r0, lr}
 8000982:	f7ff ffb7 	bl	80008f4 <__cmpdf2>
 8000986:	2800      	cmp	r0, #0
 8000988:	bf48      	it	mi
 800098a:	f110 0f00 	cmnmi.w	r0, #0
 800098e:	bd01      	pop	{r0, pc}

08000990 <__aeabi_dcmpeq>:
 8000990:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000994:	f7ff fff4 	bl	8000980 <__aeabi_cdcmpeq>
 8000998:	bf0c      	ite	eq
 800099a:	2001      	moveq	r0, #1
 800099c:	2000      	movne	r0, #0
 800099e:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a2:	bf00      	nop

080009a4 <__aeabi_dcmplt>:
 80009a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a8:	f7ff ffea 	bl	8000980 <__aeabi_cdcmpeq>
 80009ac:	bf34      	ite	cc
 80009ae:	2001      	movcc	r0, #1
 80009b0:	2000      	movcs	r0, #0
 80009b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b6:	bf00      	nop

080009b8 <__aeabi_dcmple>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff ffe0 	bl	8000980 <__aeabi_cdcmpeq>
 80009c0:	bf94      	ite	ls
 80009c2:	2001      	movls	r0, #1
 80009c4:	2000      	movhi	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmpge>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffce 	bl	8000970 <__aeabi_cdrcmple>
 80009d4:	bf94      	ite	ls
 80009d6:	2001      	movls	r0, #1
 80009d8:	2000      	movhi	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmpgt>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffc4 	bl	8000970 <__aeabi_cdrcmple>
 80009e8:	bf34      	ite	cc
 80009ea:	2001      	movcc	r0, #1
 80009ec:	2000      	movcs	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmpun>:
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	d102      	bne.n	8000a04 <__aeabi_dcmpun+0x10>
 80009fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a02:	d10a      	bne.n	8000a1a <__aeabi_dcmpun+0x26>
 8000a04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__aeabi_dcmpun+0x20>
 8000a0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a12:	d102      	bne.n	8000a1a <__aeabi_dcmpun+0x26>
 8000a14:	f04f 0000 	mov.w	r0, #0
 8000a18:	4770      	bx	lr
 8000a1a:	f04f 0001 	mov.w	r0, #1
 8000a1e:	4770      	bx	lr

08000a20 <__aeabi_d2iz>:
 8000a20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a24:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a28:	d215      	bcs.n	8000a56 <__aeabi_d2iz+0x36>
 8000a2a:	d511      	bpl.n	8000a50 <__aeabi_d2iz+0x30>
 8000a2c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a34:	d912      	bls.n	8000a5c <__aeabi_d2iz+0x3c>
 8000a36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a46:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4a:	bf18      	it	ne
 8000a4c:	4240      	negne	r0, r0
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d105      	bne.n	8000a68 <__aeabi_d2iz+0x48>
 8000a5c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a60:	bf08      	it	eq
 8000a62:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <__aeabi_d2f>:
 8000a70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a74:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a78:	bf24      	itt	cs
 8000a7a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a82:	d90d      	bls.n	8000aa0 <__aeabi_d2f+0x30>
 8000a84:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a88:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a8c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a90:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a94:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a98:	bf08      	it	eq
 8000a9a:	f020 0001 	biceq.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa4:	d121      	bne.n	8000aea <__aeabi_d2f+0x7a>
 8000aa6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aaa:	bfbc      	itt	lt
 8000aac:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	4770      	bxlt	lr
 8000ab2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aba:	f1c2 0218 	rsb	r2, r2, #24
 8000abe:	f1c2 0c20 	rsb	ip, r2, #32
 8000ac2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac6:	fa20 f002 	lsr.w	r0, r0, r2
 8000aca:	bf18      	it	ne
 8000acc:	f040 0001 	orrne.w	r0, r0, #1
 8000ad0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000adc:	ea40 000c 	orr.w	r0, r0, ip
 8000ae0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae8:	e7cc      	b.n	8000a84 <__aeabi_d2f+0x14>
 8000aea:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aee:	d107      	bne.n	8000b00 <__aeabi_d2f+0x90>
 8000af0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af4:	bf1e      	ittt	ne
 8000af6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000afa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afe:	4770      	bxne	lr
 8000b00:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop

08000b10 <__aeabi_frsub>:
 8000b10:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b14:	e002      	b.n	8000b1c <__addsf3>
 8000b16:	bf00      	nop

08000b18 <__aeabi_fsub>:
 8000b18:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b1c <__addsf3>:
 8000b1c:	0042      	lsls	r2, r0, #1
 8000b1e:	bf1f      	itttt	ne
 8000b20:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b24:	ea92 0f03 	teqne	r2, r3
 8000b28:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b2c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b30:	d06a      	beq.n	8000c08 <__addsf3+0xec>
 8000b32:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b36:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b3a:	bfc1      	itttt	gt
 8000b3c:	18d2      	addgt	r2, r2, r3
 8000b3e:	4041      	eorgt	r1, r0
 8000b40:	4048      	eorgt	r0, r1
 8000b42:	4041      	eorgt	r1, r0
 8000b44:	bfb8      	it	lt
 8000b46:	425b      	neglt	r3, r3
 8000b48:	2b19      	cmp	r3, #25
 8000b4a:	bf88      	it	hi
 8000b4c:	4770      	bxhi	lr
 8000b4e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b52:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b56:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b5a:	bf18      	it	ne
 8000b5c:	4240      	negne	r0, r0
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b66:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b6a:	bf18      	it	ne
 8000b6c:	4249      	negne	r1, r1
 8000b6e:	ea92 0f03 	teq	r2, r3
 8000b72:	d03f      	beq.n	8000bf4 <__addsf3+0xd8>
 8000b74:	f1a2 0201 	sub.w	r2, r2, #1
 8000b78:	fa41 fc03 	asr.w	ip, r1, r3
 8000b7c:	eb10 000c 	adds.w	r0, r0, ip
 8000b80:	f1c3 0320 	rsb	r3, r3, #32
 8000b84:	fa01 f103 	lsl.w	r1, r1, r3
 8000b88:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b8c:	d502      	bpl.n	8000b94 <__addsf3+0x78>
 8000b8e:	4249      	negs	r1, r1
 8000b90:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b94:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b98:	d313      	bcc.n	8000bc2 <__addsf3+0xa6>
 8000b9a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b9e:	d306      	bcc.n	8000bae <__addsf3+0x92>
 8000ba0:	0840      	lsrs	r0, r0, #1
 8000ba2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000ba6:	f102 0201 	add.w	r2, r2, #1
 8000baa:	2afe      	cmp	r2, #254	; 0xfe
 8000bac:	d251      	bcs.n	8000c52 <__addsf3+0x136>
 8000bae:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bb2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bb6:	bf08      	it	eq
 8000bb8:	f020 0001 	biceq.w	r0, r0, #1
 8000bbc:	ea40 0003 	orr.w	r0, r0, r3
 8000bc0:	4770      	bx	lr
 8000bc2:	0049      	lsls	r1, r1, #1
 8000bc4:	eb40 0000 	adc.w	r0, r0, r0
 8000bc8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	d1ed      	bne.n	8000bae <__addsf3+0x92>
 8000bd2:	fab0 fc80 	clz	ip, r0
 8000bd6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bda:	ebb2 020c 	subs.w	r2, r2, ip
 8000bde:	fa00 f00c 	lsl.w	r0, r0, ip
 8000be2:	bfaa      	itet	ge
 8000be4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000be8:	4252      	neglt	r2, r2
 8000bea:	4318      	orrge	r0, r3
 8000bec:	bfbc      	itt	lt
 8000bee:	40d0      	lsrlt	r0, r2
 8000bf0:	4318      	orrlt	r0, r3
 8000bf2:	4770      	bx	lr
 8000bf4:	f092 0f00 	teq	r2, #0
 8000bf8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bfc:	bf06      	itte	eq
 8000bfe:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c02:	3201      	addeq	r2, #1
 8000c04:	3b01      	subne	r3, #1
 8000c06:	e7b5      	b.n	8000b74 <__addsf3+0x58>
 8000c08:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c0c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c10:	bf18      	it	ne
 8000c12:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c16:	d021      	beq.n	8000c5c <__addsf3+0x140>
 8000c18:	ea92 0f03 	teq	r2, r3
 8000c1c:	d004      	beq.n	8000c28 <__addsf3+0x10c>
 8000c1e:	f092 0f00 	teq	r2, #0
 8000c22:	bf08      	it	eq
 8000c24:	4608      	moveq	r0, r1
 8000c26:	4770      	bx	lr
 8000c28:	ea90 0f01 	teq	r0, r1
 8000c2c:	bf1c      	itt	ne
 8000c2e:	2000      	movne	r0, #0
 8000c30:	4770      	bxne	lr
 8000c32:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c36:	d104      	bne.n	8000c42 <__addsf3+0x126>
 8000c38:	0040      	lsls	r0, r0, #1
 8000c3a:	bf28      	it	cs
 8000c3c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c40:	4770      	bx	lr
 8000c42:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c46:	bf3c      	itt	cc
 8000c48:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c4c:	4770      	bxcc	lr
 8000c4e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c52:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c56:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c5a:	4770      	bx	lr
 8000c5c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c60:	bf16      	itet	ne
 8000c62:	4608      	movne	r0, r1
 8000c64:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c68:	4601      	movne	r1, r0
 8000c6a:	0242      	lsls	r2, r0, #9
 8000c6c:	bf06      	itte	eq
 8000c6e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c72:	ea90 0f01 	teqeq	r0, r1
 8000c76:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c7a:	4770      	bx	lr

08000c7c <__aeabi_ui2f>:
 8000c7c:	f04f 0300 	mov.w	r3, #0
 8000c80:	e004      	b.n	8000c8c <__aeabi_i2f+0x8>
 8000c82:	bf00      	nop

08000c84 <__aeabi_i2f>:
 8000c84:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c88:	bf48      	it	mi
 8000c8a:	4240      	negmi	r0, r0
 8000c8c:	ea5f 0c00 	movs.w	ip, r0
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c98:	4601      	mov	r1, r0
 8000c9a:	f04f 0000 	mov.w	r0, #0
 8000c9e:	e01c      	b.n	8000cda <__aeabi_l2f+0x2a>

08000ca0 <__aeabi_ul2f>:
 8000ca0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ca4:	bf08      	it	eq
 8000ca6:	4770      	bxeq	lr
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	e00a      	b.n	8000cc4 <__aeabi_l2f+0x14>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_l2f>:
 8000cb0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb4:	bf08      	it	eq
 8000cb6:	4770      	bxeq	lr
 8000cb8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__aeabi_l2f+0x14>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	ea5f 0c01 	movs.w	ip, r1
 8000cc8:	bf02      	ittt	eq
 8000cca:	4684      	moveq	ip, r0
 8000ccc:	4601      	moveq	r1, r0
 8000cce:	2000      	moveq	r0, #0
 8000cd0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cd4:	bf08      	it	eq
 8000cd6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cda:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cde:	fabc f28c 	clz	r2, ip
 8000ce2:	3a08      	subs	r2, #8
 8000ce4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ce8:	db10      	blt.n	8000d0c <__aeabi_l2f+0x5c>
 8000cea:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cee:	4463      	add	r3, ip
 8000cf0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cf4:	f1c2 0220 	rsb	r2, r2, #32
 8000cf8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cfc:	fa20 f202 	lsr.w	r2, r0, r2
 8000d00:	eb43 0002 	adc.w	r0, r3, r2
 8000d04:	bf08      	it	eq
 8000d06:	f020 0001 	biceq.w	r0, r0, #1
 8000d0a:	4770      	bx	lr
 8000d0c:	f102 0220 	add.w	r2, r2, #32
 8000d10:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d14:	f1c2 0220 	rsb	r2, r2, #32
 8000d18:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d1c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d20:	eb43 0002 	adc.w	r0, r3, r2
 8000d24:	bf08      	it	eq
 8000d26:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d2a:	4770      	bx	lr

08000d2c <__aeabi_fmul>:
 8000d2c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d30:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d34:	bf1e      	ittt	ne
 8000d36:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d3a:	ea92 0f0c 	teqne	r2, ip
 8000d3e:	ea93 0f0c 	teqne	r3, ip
 8000d42:	d06f      	beq.n	8000e24 <__aeabi_fmul+0xf8>
 8000d44:	441a      	add	r2, r3
 8000d46:	ea80 0c01 	eor.w	ip, r0, r1
 8000d4a:	0240      	lsls	r0, r0, #9
 8000d4c:	bf18      	it	ne
 8000d4e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d52:	d01e      	beq.n	8000d92 <__aeabi_fmul+0x66>
 8000d54:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d58:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d5c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d60:	fba0 3101 	umull	r3, r1, r0, r1
 8000d64:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d68:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d6c:	bf3e      	ittt	cc
 8000d6e:	0049      	lslcc	r1, r1, #1
 8000d70:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d74:	005b      	lslcc	r3, r3, #1
 8000d76:	ea40 0001 	orr.w	r0, r0, r1
 8000d7a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d7e:	2afd      	cmp	r2, #253	; 0xfd
 8000d80:	d81d      	bhi.n	8000dbe <__aeabi_fmul+0x92>
 8000d82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d86:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d8a:	bf08      	it	eq
 8000d8c:	f020 0001 	biceq.w	r0, r0, #1
 8000d90:	4770      	bx	lr
 8000d92:	f090 0f00 	teq	r0, #0
 8000d96:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d9a:	bf08      	it	eq
 8000d9c:	0249      	lsleq	r1, r1, #9
 8000d9e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000da2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000da6:	3a7f      	subs	r2, #127	; 0x7f
 8000da8:	bfc2      	ittt	gt
 8000daa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dae:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000db2:	4770      	bxgt	lr
 8000db4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000db8:	f04f 0300 	mov.w	r3, #0
 8000dbc:	3a01      	subs	r2, #1
 8000dbe:	dc5d      	bgt.n	8000e7c <__aeabi_fmul+0x150>
 8000dc0:	f112 0f19 	cmn.w	r2, #25
 8000dc4:	bfdc      	itt	le
 8000dc6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dca:	4770      	bxle	lr
 8000dcc:	f1c2 0200 	rsb	r2, r2, #0
 8000dd0:	0041      	lsls	r1, r0, #1
 8000dd2:	fa21 f102 	lsr.w	r1, r1, r2
 8000dd6:	f1c2 0220 	rsb	r2, r2, #32
 8000dda:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dde:	ea5f 0031 	movs.w	r0, r1, rrx
 8000de2:	f140 0000 	adc.w	r0, r0, #0
 8000de6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dea:	bf08      	it	eq
 8000dec:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df0:	4770      	bx	lr
 8000df2:	f092 0f00 	teq	r2, #0
 8000df6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dfa:	bf02      	ittt	eq
 8000dfc:	0040      	lsleq	r0, r0, #1
 8000dfe:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e02:	3a01      	subeq	r2, #1
 8000e04:	d0f9      	beq.n	8000dfa <__aeabi_fmul+0xce>
 8000e06:	ea40 000c 	orr.w	r0, r0, ip
 8000e0a:	f093 0f00 	teq	r3, #0
 8000e0e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0049      	lsleq	r1, r1, #1
 8000e16:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e1a:	3b01      	subeq	r3, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xe6>
 8000e1e:	ea41 010c 	orr.w	r1, r1, ip
 8000e22:	e78f      	b.n	8000d44 <__aeabi_fmul+0x18>
 8000e24:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e28:	ea92 0f0c 	teq	r2, ip
 8000e2c:	bf18      	it	ne
 8000e2e:	ea93 0f0c 	teqne	r3, ip
 8000e32:	d00a      	beq.n	8000e4a <__aeabi_fmul+0x11e>
 8000e34:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e38:	bf18      	it	ne
 8000e3a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e3e:	d1d8      	bne.n	8000df2 <__aeabi_fmul+0xc6>
 8000e40:	ea80 0001 	eor.w	r0, r0, r1
 8000e44:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e48:	4770      	bx	lr
 8000e4a:	f090 0f00 	teq	r0, #0
 8000e4e:	bf17      	itett	ne
 8000e50:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e54:	4608      	moveq	r0, r1
 8000e56:	f091 0f00 	teqne	r1, #0
 8000e5a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e5e:	d014      	beq.n	8000e8a <__aeabi_fmul+0x15e>
 8000e60:	ea92 0f0c 	teq	r2, ip
 8000e64:	d101      	bne.n	8000e6a <__aeabi_fmul+0x13e>
 8000e66:	0242      	lsls	r2, r0, #9
 8000e68:	d10f      	bne.n	8000e8a <__aeabi_fmul+0x15e>
 8000e6a:	ea93 0f0c 	teq	r3, ip
 8000e6e:	d103      	bne.n	8000e78 <__aeabi_fmul+0x14c>
 8000e70:	024b      	lsls	r3, r1, #9
 8000e72:	bf18      	it	ne
 8000e74:	4608      	movne	r0, r1
 8000e76:	d108      	bne.n	8000e8a <__aeabi_fmul+0x15e>
 8000e78:	ea80 0001 	eor.w	r0, r0, r1
 8000e7c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e88:	4770      	bx	lr
 8000e8a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e92:	4770      	bx	lr

08000e94 <__aeabi_fdiv>:
 8000e94:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e98:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e9c:	bf1e      	ittt	ne
 8000e9e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ea2:	ea92 0f0c 	teqne	r2, ip
 8000ea6:	ea93 0f0c 	teqne	r3, ip
 8000eaa:	d069      	beq.n	8000f80 <__aeabi_fdiv+0xec>
 8000eac:	eba2 0203 	sub.w	r2, r2, r3
 8000eb0:	ea80 0c01 	eor.w	ip, r0, r1
 8000eb4:	0249      	lsls	r1, r1, #9
 8000eb6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eba:	d037      	beq.n	8000f2c <__aeabi_fdiv+0x98>
 8000ebc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ec4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ec8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ecc:	428b      	cmp	r3, r1
 8000ece:	bf38      	it	cc
 8000ed0:	005b      	lslcc	r3, r3, #1
 8000ed2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ed6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eda:	428b      	cmp	r3, r1
 8000edc:	bf24      	itt	cs
 8000ede:	1a5b      	subcs	r3, r3, r1
 8000ee0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ee4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ee8:	bf24      	itt	cs
 8000eea:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eee:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ef2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ef6:	bf24      	itt	cs
 8000ef8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000efc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f00:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f04:	bf24      	itt	cs
 8000f06:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f0a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f0e:	011b      	lsls	r3, r3, #4
 8000f10:	bf18      	it	ne
 8000f12:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f16:	d1e0      	bne.n	8000eda <__aeabi_fdiv+0x46>
 8000f18:	2afd      	cmp	r2, #253	; 0xfd
 8000f1a:	f63f af50 	bhi.w	8000dbe <__aeabi_fmul+0x92>
 8000f1e:	428b      	cmp	r3, r1
 8000f20:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f24:	bf08      	it	eq
 8000f26:	f020 0001 	biceq.w	r0, r0, #1
 8000f2a:	4770      	bx	lr
 8000f2c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f30:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f34:	327f      	adds	r2, #127	; 0x7f
 8000f36:	bfc2      	ittt	gt
 8000f38:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f3c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f40:	4770      	bxgt	lr
 8000f42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f46:	f04f 0300 	mov.w	r3, #0
 8000f4a:	3a01      	subs	r2, #1
 8000f4c:	e737      	b.n	8000dbe <__aeabi_fmul+0x92>
 8000f4e:	f092 0f00 	teq	r2, #0
 8000f52:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f56:	bf02      	ittt	eq
 8000f58:	0040      	lsleq	r0, r0, #1
 8000f5a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f5e:	3a01      	subeq	r2, #1
 8000f60:	d0f9      	beq.n	8000f56 <__aeabi_fdiv+0xc2>
 8000f62:	ea40 000c 	orr.w	r0, r0, ip
 8000f66:	f093 0f00 	teq	r3, #0
 8000f6a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0049      	lsleq	r1, r1, #1
 8000f72:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f76:	3b01      	subeq	r3, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xda>
 8000f7a:	ea41 010c 	orr.w	r1, r1, ip
 8000f7e:	e795      	b.n	8000eac <__aeabi_fdiv+0x18>
 8000f80:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f84:	ea92 0f0c 	teq	r2, ip
 8000f88:	d108      	bne.n	8000f9c <__aeabi_fdiv+0x108>
 8000f8a:	0242      	lsls	r2, r0, #9
 8000f8c:	f47f af7d 	bne.w	8000e8a <__aeabi_fmul+0x15e>
 8000f90:	ea93 0f0c 	teq	r3, ip
 8000f94:	f47f af70 	bne.w	8000e78 <__aeabi_fmul+0x14c>
 8000f98:	4608      	mov	r0, r1
 8000f9a:	e776      	b.n	8000e8a <__aeabi_fmul+0x15e>
 8000f9c:	ea93 0f0c 	teq	r3, ip
 8000fa0:	d104      	bne.n	8000fac <__aeabi_fdiv+0x118>
 8000fa2:	024b      	lsls	r3, r1, #9
 8000fa4:	f43f af4c 	beq.w	8000e40 <__aeabi_fmul+0x114>
 8000fa8:	4608      	mov	r0, r1
 8000faa:	e76e      	b.n	8000e8a <__aeabi_fmul+0x15e>
 8000fac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb0:	bf18      	it	ne
 8000fb2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fb6:	d1ca      	bne.n	8000f4e <__aeabi_fdiv+0xba>
 8000fb8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fbc:	f47f af5c 	bne.w	8000e78 <__aeabi_fmul+0x14c>
 8000fc0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fc4:	f47f af3c 	bne.w	8000e40 <__aeabi_fmul+0x114>
 8000fc8:	e75f      	b.n	8000e8a <__aeabi_fmul+0x15e>
 8000fca:	bf00      	nop

08000fcc <__gesf2>:
 8000fcc:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd0:	e006      	b.n	8000fe0 <__cmpsf2+0x4>
 8000fd2:	bf00      	nop

08000fd4 <__lesf2>:
 8000fd4:	f04f 0c01 	mov.w	ip, #1
 8000fd8:	e002      	b.n	8000fe0 <__cmpsf2+0x4>
 8000fda:	bf00      	nop

08000fdc <__cmpsf2>:
 8000fdc:	f04f 0c01 	mov.w	ip, #1
 8000fe0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fe4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff0:	bf18      	it	ne
 8000ff2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ff6:	d011      	beq.n	800101c <__cmpsf2+0x40>
 8000ff8:	b001      	add	sp, #4
 8000ffa:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ffe:	bf18      	it	ne
 8001000:	ea90 0f01 	teqne	r0, r1
 8001004:	bf58      	it	pl
 8001006:	ebb2 0003 	subspl.w	r0, r2, r3
 800100a:	bf88      	it	hi
 800100c:	17c8      	asrhi	r0, r1, #31
 800100e:	bf38      	it	cc
 8001010:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001014:	bf18      	it	ne
 8001016:	f040 0001 	orrne.w	r0, r0, #1
 800101a:	4770      	bx	lr
 800101c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001020:	d102      	bne.n	8001028 <__cmpsf2+0x4c>
 8001022:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001026:	d105      	bne.n	8001034 <__cmpsf2+0x58>
 8001028:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800102c:	d1e4      	bne.n	8000ff8 <__cmpsf2+0x1c>
 800102e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001032:	d0e1      	beq.n	8000ff8 <__cmpsf2+0x1c>
 8001034:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop

0800103c <__aeabi_cfrcmple>:
 800103c:	4684      	mov	ip, r0
 800103e:	4608      	mov	r0, r1
 8001040:	4661      	mov	r1, ip
 8001042:	e7ff      	b.n	8001044 <__aeabi_cfcmpeq>

08001044 <__aeabi_cfcmpeq>:
 8001044:	b50f      	push	{r0, r1, r2, r3, lr}
 8001046:	f7ff ffc9 	bl	8000fdc <__cmpsf2>
 800104a:	2800      	cmp	r0, #0
 800104c:	bf48      	it	mi
 800104e:	f110 0f00 	cmnmi.w	r0, #0
 8001052:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001054 <__aeabi_fcmpeq>:
 8001054:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001058:	f7ff fff4 	bl	8001044 <__aeabi_cfcmpeq>
 800105c:	bf0c      	ite	eq
 800105e:	2001      	moveq	r0, #1
 8001060:	2000      	movne	r0, #0
 8001062:	f85d fb08 	ldr.w	pc, [sp], #8
 8001066:	bf00      	nop

08001068 <__aeabi_fcmplt>:
 8001068:	f84d ed08 	str.w	lr, [sp, #-8]!
 800106c:	f7ff ffea 	bl	8001044 <__aeabi_cfcmpeq>
 8001070:	bf34      	ite	cc
 8001072:	2001      	movcc	r0, #1
 8001074:	2000      	movcs	r0, #0
 8001076:	f85d fb08 	ldr.w	pc, [sp], #8
 800107a:	bf00      	nop

0800107c <__aeabi_fcmple>:
 800107c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001080:	f7ff ffe0 	bl	8001044 <__aeabi_cfcmpeq>
 8001084:	bf94      	ite	ls
 8001086:	2001      	movls	r0, #1
 8001088:	2000      	movhi	r0, #0
 800108a:	f85d fb08 	ldr.w	pc, [sp], #8
 800108e:	bf00      	nop

08001090 <__aeabi_fcmpge>:
 8001090:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001094:	f7ff ffd2 	bl	800103c <__aeabi_cfrcmple>
 8001098:	bf94      	ite	ls
 800109a:	2001      	movls	r0, #1
 800109c:	2000      	movhi	r0, #0
 800109e:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a2:	bf00      	nop

080010a4 <__aeabi_fcmpgt>:
 80010a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a8:	f7ff ffc8 	bl	800103c <__aeabi_cfrcmple>
 80010ac:	bf34      	ite	cc
 80010ae:	2001      	movcc	r0, #1
 80010b0:	2000      	movcs	r0, #0
 80010b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010b6:	bf00      	nop

080010b8 <__aeabi_f2iz>:
 80010b8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010bc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010c0:	d30f      	bcc.n	80010e2 <__aeabi_f2iz+0x2a>
 80010c2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010c6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010ca:	d90d      	bls.n	80010e8 <__aeabi_f2iz+0x30>
 80010cc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010d4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010d8:	fa23 f002 	lsr.w	r0, r3, r2
 80010dc:	bf18      	it	ne
 80010de:	4240      	negne	r0, r0
 80010e0:	4770      	bx	lr
 80010e2:	f04f 0000 	mov.w	r0, #0
 80010e6:	4770      	bx	lr
 80010e8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010ec:	d101      	bne.n	80010f2 <__aeabi_f2iz+0x3a>
 80010ee:	0242      	lsls	r2, r0, #9
 80010f0:	d105      	bne.n	80010fe <__aeabi_f2iz+0x46>
 80010f2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010f6:	bf08      	it	eq
 80010f8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010fc:	4770      	bx	lr
 80010fe:	f04f 0000 	mov.w	r0, #0
 8001102:	4770      	bx	lr

08001104 <__aeabi_f2uiz>:
 8001104:	0042      	lsls	r2, r0, #1
 8001106:	d20e      	bcs.n	8001126 <__aeabi_f2uiz+0x22>
 8001108:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800110c:	d30b      	bcc.n	8001126 <__aeabi_f2uiz+0x22>
 800110e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001112:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001116:	d409      	bmi.n	800112c <__aeabi_f2uiz+0x28>
 8001118:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800111c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001120:	fa23 f002 	lsr.w	r0, r3, r2
 8001124:	4770      	bx	lr
 8001126:	f04f 0000 	mov.w	r0, #0
 800112a:	4770      	bx	lr
 800112c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001130:	d101      	bne.n	8001136 <__aeabi_f2uiz+0x32>
 8001132:	0242      	lsls	r2, r0, #9
 8001134:	d102      	bne.n	800113c <__aeabi_f2uiz+0x38>
 8001136:	f04f 30ff 	mov.w	r0, #4294967295
 800113a:	4770      	bx	lr
 800113c:	f04f 0000 	mov.w	r0, #0
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop

08001144 <MADC_voidInit>:



/* Configure the type of transfer */
void MADC_voidInit(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
		Data Right Alignment
		Enable DMA
		power on
		Enable callibration	
	*/
	ADC -> CR1    |= (ADC_END_OF_CONV_INTERRUPT << 5) | (1<<11);
 8001148:	4a16      	ldr	r2, [pc, #88]	; (80011a4 <MADC_voidInit+0x60>)
 800114a:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <MADC_voidInit+0x60>)
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001152:	6053      	str	r3, [r2, #4]
	ADC -> SMPRA2 |= (ADC_SAMPLE);
 8001154:	4a13      	ldr	r2, [pc, #76]	; (80011a4 <MADC_voidInit+0x60>)
 8001156:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <MADC_voidInit+0x60>)
 8001158:	691b      	ldr	r3, [r3, #16]
 800115a:	6113      	str	r3, [r2, #16]
	ADC -> CR2    |= (ADC_CONT_CON << 1) | (ADC_DMA_MODE << 8) | (ADC_DATA_ALIGNMENT << 11) | (ADC_POWER) ;
 800115c:	4a11      	ldr	r2, [pc, #68]	; (80011a4 <MADC_voidInit+0x60>)
 800115e:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <MADC_voidInit+0x60>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f043 0301 	orr.w	r3, r3, #1
 8001166:	6093      	str	r3, [r2, #8]
	MSTK_voidSetBusyWait(1000); // Delay 1 microsecond for first time power on
 8001168:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800116c:	f000 fdd8 	bl	8001d20 <MSTK_voidSetBusyWait>

	MSTK_voidSetBusyWait(10); // Delay 1 microsecond for stablity time for power
 8001170:	200a      	movs	r0, #10
 8001172:	f000 fdd5 	bl	8001d20 <MSTK_voidSetBusyWait>
	ADC -> CR2    |= (ADC_CAL << 2) ;
 8001176:	4a0b      	ldr	r2, [pc, #44]	; (80011a4 <MADC_voidInit+0x60>)
 8001178:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <MADC_voidInit+0x60>)
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	f043 0304 	orr.w	r3, r3, #4
 8001180:	6093      	str	r3, [r2, #8]
	MSTK_voidSetBusyWait(10); // Delay 1 microsecond for calibration cycles
 8001182:	200a      	movs	r0, #10
 8001184:	f000 fdcc 	bl	8001d20 <MSTK_voidSetBusyWait>

	ADC->CR2 |= 7<<17;			//manual trigger
 8001188:	4a06      	ldr	r2, [pc, #24]	; (80011a4 <MADC_voidInit+0x60>)
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <MADC_voidInit+0x60>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 8001192:	6093      	str	r3, [r2, #8]
	ADC->CR2 |= (ADC_POWER) ;
 8001194:	4a03      	ldr	r2, [pc, #12]	; (80011a4 <MADC_voidInit+0x60>)
 8001196:	4b03      	ldr	r3, [pc, #12]	; (80011a4 <MADC_voidInit+0x60>)
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	f043 0301 	orr.w	r3, r3, #1
 800119e:	6093      	str	r3, [r2, #8]
}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40012400 	.word	0x40012400

080011a8 <MADC_u16GetData>:

u16	MADC_u16GetData(u8 Copy_u8Channel)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
	/*Select Channel*/
	ADC->CR1 &= ~(0xF);
 80011b2:	4a15      	ldr	r2, [pc, #84]	; (8001208 <MADC_u16GetData+0x60>)
 80011b4:	4b14      	ldr	r3, [pc, #80]	; (8001208 <MADC_u16GetData+0x60>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f023 030f 	bic.w	r3, r3, #15
 80011bc:	6053      	str	r3, [r2, #4]
	ADC->CR1 |= Copy_u8Channel & 0xF;
 80011be:	4912      	ldr	r1, [pc, #72]	; (8001208 <MADC_u16GetData+0x60>)
 80011c0:	4b11      	ldr	r3, [pc, #68]	; (8001208 <MADC_u16GetData+0x60>)
 80011c2:	685a      	ldr	r2, [r3, #4]
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	f003 030f 	and.w	r3, r3, #15
 80011ca:	4313      	orrs	r3, r2
 80011cc:	604b      	str	r3, [r1, #4]

	/*Start the Conversion*/
	SET_BIT(ADC->CR2,0);
 80011ce:	4a0e      	ldr	r2, [pc, #56]	; (8001208 <MADC_u16GetData+0x60>)
 80011d0:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <MADC_u16GetData+0x60>)
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6093      	str	r3, [r2, #8]
	/*wait till it finishes*/
	while(!GET_BIT(ADC->SR,1));
 80011da:	bf00      	nop
 80011dc:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <MADC_u16GetData+0x60>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	085b      	lsrs	r3, r3, #1
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d0f8      	beq.n	80011dc <MADC_u16GetData+0x34>

	/*clear end of conversion flag*/
	CLR_BIT(ADC->SR,1);
 80011ea:	4a07      	ldr	r2, [pc, #28]	; (8001208 <MADC_u16GetData+0x60>)
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <MADC_u16GetData+0x60>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f023 0302 	bic.w	r3, r3, #2
 80011f4:	6013      	str	r3, [r2, #0]

	/*return the result*/
	return ADC->DR;
 80011f6:	4b04      	ldr	r3, [pc, #16]	; (8001208 <MADC_u16GetData+0x60>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fa:	b29b      	uxth	r3, r3
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40012400 	.word	0x40012400

0800120c <ADC1_2_IRQHandler>:
	ADC_pCallBack = ptr ;
}

/* ISR interrupt function for channel 1 */
void ADC1_2_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
	if((GET_BIT(ADC->SR,1)) && ADC_pCallBack != 0 ) /*Clear Interrupt flag*/
 8001210:	4b09      	ldr	r3, [pc, #36]	; (8001238 <ADC1_2_IRQHandler+0x2c>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	085b      	lsrs	r3, r3, #1
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	2b00      	cmp	r3, #0
 800121c:	d00a      	beq.n	8001234 <ADC1_2_IRQHandler+0x28>
 800121e:	4b07      	ldr	r3, [pc, #28]	; (800123c <ADC1_2_IRQHandler+0x30>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d006      	beq.n	8001234 <ADC1_2_IRQHandler+0x28>
	{
		ADC_pCallBack(ADC->DR);  /* process the callback function at the end of conversion */
 8001226:	4b05      	ldr	r3, [pc, #20]	; (800123c <ADC1_2_IRQHandler+0x30>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a03      	ldr	r2, [pc, #12]	; (8001238 <ADC1_2_IRQHandler+0x2c>)
 800122c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800122e:	b292      	uxth	r2, r2
 8001230:	4610      	mov	r0, r2
 8001232:	4798      	blx	r3
	}
	
};
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40012400 	.word	0x40012400
 800123c:	2000008c 	.word	0x2000008c

08001240 <MAFIO_voidSetEXTIConfiguration>:

#include "AFIO_interface.h"
#include "AFIO_config.h"
#include "AFIO_private.h"

void MAFIO_voidSetEXTIConfiguration(u8 Copy_u8Line, u8 Copy_u8PortMap){
 8001240:	b490      	push	{r4, r7}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	460a      	mov	r2, r1
 800124a:	71fb      	strb	r3, [r7, #7]
 800124c:	4613      	mov	r3, r2
 800124e:	71bb      	strb	r3, [r7, #6]
	u8 Local_u8RegIndex = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	73fb      	strb	r3, [r7, #15]
	Local_u8RegIndex = Copy_u8Line / 4;
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	089b      	lsrs	r3, r3, #2
 8001258:	73fb      	strb	r3, [r7, #15]
	Copy_u8Line %= 4;
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	f003 0303 	and.w	r3, r3, #3
 8001260:	71fb      	strb	r3, [r7, #7]
	AFIO->EXTICR[Local_u8RegIndex] &= ~((0b1111) << (Copy_u8Line*4));
 8001262:	4813      	ldr	r0, [pc, #76]	; (80012b0 <MAFIO_voidSetEXTIConfiguration+0x70>)
 8001264:	7bfb      	ldrb	r3, [r7, #15]
 8001266:	4912      	ldr	r1, [pc, #72]	; (80012b0 <MAFIO_voidSetEXTIConfiguration+0x70>)
 8001268:	7bfa      	ldrb	r2, [r7, #15]
 800126a:	3202      	adds	r2, #2
 800126c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001270:	79f9      	ldrb	r1, [r7, #7]
 8001272:	0089      	lsls	r1, r1, #2
 8001274:	240f      	movs	r4, #15
 8001276:	fa04 f101 	lsl.w	r1, r4, r1
 800127a:	43c9      	mvns	r1, r1
 800127c:	400a      	ands	r2, r1
 800127e:	3302      	adds	r3, #2
 8001280:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	AFIO->EXTICR[Local_u8RegIndex] |=  ((Copy_u8PortMap) << (Copy_u8Line*4));
 8001284:	4c0a      	ldr	r4, [pc, #40]	; (80012b0 <MAFIO_voidSetEXTIConfiguration+0x70>)
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	4909      	ldr	r1, [pc, #36]	; (80012b0 <MAFIO_voidSetEXTIConfiguration+0x70>)
 800128a:	7bfa      	ldrb	r2, [r7, #15]
 800128c:	3202      	adds	r2, #2
 800128e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001292:	79b8      	ldrb	r0, [r7, #6]
 8001294:	79f9      	ldrb	r1, [r7, #7]
 8001296:	0089      	lsls	r1, r1, #2
 8001298:	fa00 f101 	lsl.w	r1, r0, r1
 800129c:	430a      	orrs	r2, r1
 800129e:	3302      	adds	r3, #2
 80012a0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
}
 80012a4:	bf00      	nop
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc90      	pop	{r4, r7}
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	40010000 	.word	0x40010000

080012b4 <MAFIO_voidRemap>:

void MAFIO_voidRemap(u8 Copy_u8Peripheral, u8 Copy_u8Mode)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	460a      	mov	r2, r1
 80012be:	71fb      	strb	r3, [r7, #7]
 80012c0:	4613      	mov	r3, r2
 80012c2:	71bb      	strb	r3, [r7, #6]
	if ((Copy_u8Peripheral>=0 && Copy_u8Peripheral<=3)
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	2b03      	cmp	r3, #3
 80012c8:	d908      	bls.n	80012dc <MAFIO_voidRemap+0x28>
			|| (Copy_u8Peripheral>=15 && Copy_u8Peripheral<=20)
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	2b0e      	cmp	r3, #14
 80012ce:	d902      	bls.n	80012d6 <MAFIO_voidRemap+0x22>
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	2b14      	cmp	r3, #20
 80012d4:	d902      	bls.n	80012dc <MAFIO_voidRemap+0x28>
			|| (Copy_u8Peripheral == 12))
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	2b0c      	cmp	r3, #12
 80012da:	d106      	bne.n	80012ea <MAFIO_voidRemap+0x36>
	{
		AFIO->MAPR = 1<<Copy_u8Peripheral;
 80012dc:	4a0e      	ldr	r2, [pc, #56]	; (8001318 <MAFIO_voidRemap+0x64>)
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	2101      	movs	r1, #1
 80012e2:	fa01 f303 	lsl.w	r3, r1, r3
 80012e6:	6053      	str	r3, [r2, #4]
		return;
 80012e8:	e011      	b.n	800130e <MAFIO_voidRemap+0x5a>
	}
	AFIO->MAPR &= (0b11<<Copy_u8Peripheral);
 80012ea:	490b      	ldr	r1, [pc, #44]	; (8001318 <MAFIO_voidRemap+0x64>)
 80012ec:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <MAFIO_voidRemap+0x64>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	79fa      	ldrb	r2, [r7, #7]
 80012f2:	2003      	movs	r0, #3
 80012f4:	fa00 f202 	lsl.w	r2, r0, r2
 80012f8:	4013      	ands	r3, r2
 80012fa:	604b      	str	r3, [r1, #4]
	AFIO->MAPR |= Copy_u8Mode<<Copy_u8Peripheral;
 80012fc:	4806      	ldr	r0, [pc, #24]	; (8001318 <MAFIO_voidRemap+0x64>)
 80012fe:	4b06      	ldr	r3, [pc, #24]	; (8001318 <MAFIO_voidRemap+0x64>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	79b9      	ldrb	r1, [r7, #6]
 8001304:	79fa      	ldrb	r2, [r7, #7]
 8001306:	fa01 f202 	lsl.w	r2, r1, r2
 800130a:	4313      	orrs	r3, r2
 800130c:	6043      	str	r3, [r0, #4]
}
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	40010000 	.word	0x40010000

0800131c <MEXTI_voidSetSignalLatch>:
void MEXTI_voidSwTrigger(u8 Copy_u8Line){
	SET_BIT(EXTI->IMR,Copy_u8Line);
	SET_BIT(EXTI->SWIER,Copy_u8Line);
}

void MEXTI_voidSetSignalLatch(u8 Copy_u8Line, u8 Copy_u8Mode){
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	460a      	mov	r2, r1
 8001326:	71fb      	strb	r3, [r7, #7]
 8001328:	4613      	mov	r3, r2
 800132a:	71bb      	strb	r3, [r7, #6]
	switch (Copy_u8Mode){
 800132c:	79bb      	ldrb	r3, [r7, #6]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d00e      	beq.n	8001350 <MEXTI_voidSetSignalLatch+0x34>
 8001332:	2b02      	cmp	r3, #2
 8001334:	d016      	beq.n	8001364 <MEXTI_voidSetSignalLatch+0x48>
 8001336:	2b00      	cmp	r3, #0
 8001338:	d000      	beq.n	800133c <MEXTI_voidSetSignalLatch+0x20>
		case RISING_EDGE	:	SET_BIT(EXTI->RTSR, Copy_u8Line); break;
		case FALLING_EDGE	:	SET_BIT(EXTI->FTSR, Copy_u8Line); break;
		case ON_CHANGE		:	SET_BIT(EXTI->RTSR, Copy_u8Line);
								SET_BIT(EXTI->FTSR, Copy_u8Line); break;
		default:	/*return error*/	break;
 800133a:	e026      	b.n	800138a <MEXTI_voidSetSignalLatch+0x6e>
		case RISING_EDGE	:	SET_BIT(EXTI->RTSR, Copy_u8Line); break;
 800133c:	491a      	ldr	r1, [pc, #104]	; (80013a8 <MEXTI_voidSetSignalLatch+0x8c>)
 800133e:	4b1a      	ldr	r3, [pc, #104]	; (80013a8 <MEXTI_voidSetSignalLatch+0x8c>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	79fa      	ldrb	r2, [r7, #7]
 8001344:	2001      	movs	r0, #1
 8001346:	fa00 f202 	lsl.w	r2, r0, r2
 800134a:	4313      	orrs	r3, r2
 800134c:	608b      	str	r3, [r1, #8]
 800134e:	e01c      	b.n	800138a <MEXTI_voidSetSignalLatch+0x6e>
		case FALLING_EDGE	:	SET_BIT(EXTI->FTSR, Copy_u8Line); break;
 8001350:	4915      	ldr	r1, [pc, #84]	; (80013a8 <MEXTI_voidSetSignalLatch+0x8c>)
 8001352:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <MEXTI_voidSetSignalLatch+0x8c>)
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	79fa      	ldrb	r2, [r7, #7]
 8001358:	2001      	movs	r0, #1
 800135a:	fa00 f202 	lsl.w	r2, r0, r2
 800135e:	4313      	orrs	r3, r2
 8001360:	60cb      	str	r3, [r1, #12]
 8001362:	e012      	b.n	800138a <MEXTI_voidSetSignalLatch+0x6e>
		case ON_CHANGE		:	SET_BIT(EXTI->RTSR, Copy_u8Line);
 8001364:	4910      	ldr	r1, [pc, #64]	; (80013a8 <MEXTI_voidSetSignalLatch+0x8c>)
 8001366:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <MEXTI_voidSetSignalLatch+0x8c>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	79fa      	ldrb	r2, [r7, #7]
 800136c:	2001      	movs	r0, #1
 800136e:	fa00 f202 	lsl.w	r2, r0, r2
 8001372:	4313      	orrs	r3, r2
 8001374:	608b      	str	r3, [r1, #8]
								SET_BIT(EXTI->FTSR, Copy_u8Line); break;
 8001376:	490c      	ldr	r1, [pc, #48]	; (80013a8 <MEXTI_voidSetSignalLatch+0x8c>)
 8001378:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <MEXTI_voidSetSignalLatch+0x8c>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	79fa      	ldrb	r2, [r7, #7]
 800137e:	2001      	movs	r0, #1
 8001380:	fa00 f202 	lsl.w	r2, r0, r2
 8001384:	4313      	orrs	r3, r2
 8001386:	60cb      	str	r3, [r1, #12]
 8001388:	bf00      	nop
	}
	SET_BIT(EXTI->IMR,Copy_u8Line);
 800138a:	4907      	ldr	r1, [pc, #28]	; (80013a8 <MEXTI_voidSetSignalLatch+0x8c>)
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <MEXTI_voidSetSignalLatch+0x8c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	79fa      	ldrb	r2, [r7, #7]
 8001392:	2001      	movs	r0, #1
 8001394:	fa00 f202 	lsl.w	r2, r0, r2
 8001398:	4313      	orrs	r3, r2
 800139a:	600b      	str	r3, [r1, #0]
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	40010400 	.word	0x40010400

080013ac <MEXTI_voidSetCallBack>:

void MEXTI_voidSetCallBack(u8 Copy_u8Line,void (*Copy_ptr)(void)){
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	6039      	str	r1, [r7, #0]
 80013b6:	71fb      	strb	r3, [r7, #7]
	if (Copy_u8Line > 16)
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	2b10      	cmp	r3, #16
 80013bc:	d805      	bhi.n	80013ca <MEXTI_voidSetCallBack+0x1e>
		return;
	EXTI_CallBack[Copy_u8Line] = Copy_ptr;
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	4904      	ldr	r1, [pc, #16]	; (80013d4 <MEXTI_voidSetCallBack+0x28>)
 80013c2:	683a      	ldr	r2, [r7, #0]
 80013c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80013c8:	e000      	b.n	80013cc <MEXTI_voidSetCallBack+0x20>
		return;
 80013ca:	bf00      	nop
}
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr
 80013d4:	20000090 	.word	0x20000090

080013d8 <EXTI0_IRQHandler>:
u8 MEXTI_u8GetInterruptStatus(u8 Copy_u8IntID)
{
	return GET_BIT(EXTI->PR,Copy_u8IntID);
}

void EXTI0_IRQHandler(void){
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0

	EXTI_CallBack[0]();
 80013dc:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <EXTI0_IRQHandler+0x1c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4798      	blx	r3
	SET_BIT(EXTI->PR,0);
 80013e2:	4a05      	ldr	r2, [pc, #20]	; (80013f8 <EXTI0_IRQHandler+0x20>)
 80013e4:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <EXTI0_IRQHandler+0x20>)
 80013e6:	695b      	ldr	r3, [r3, #20]
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	6153      	str	r3, [r2, #20]
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000090 	.word	0x20000090
 80013f8:	40010400 	.word	0x40010400

080013fc <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0

	EXTI_CallBack[1]();
 8001400:	4b05      	ldr	r3, [pc, #20]	; (8001418 <EXTI1_IRQHandler+0x1c>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	4798      	blx	r3
	SET_BIT(EXTI->PR,1);
 8001406:	4a05      	ldr	r2, [pc, #20]	; (800141c <EXTI1_IRQHandler+0x20>)
 8001408:	4b04      	ldr	r3, [pc, #16]	; (800141c <EXTI1_IRQHandler+0x20>)
 800140a:	695b      	ldr	r3, [r3, #20]
 800140c:	f043 0302 	orr.w	r3, r3, #2
 8001410:	6153      	str	r3, [r2, #20]
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000090 	.word	0x20000090
 800141c:	40010400 	.word	0x40010400

08001420 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void){
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
	EXTI_CallBack[2]();
 8001424:	4b05      	ldr	r3, [pc, #20]	; (800143c <EXTI2_IRQHandler+0x1c>)
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	4798      	blx	r3
	SET_BIT(EXTI -> PR,2);
 800142a:	4a05      	ldr	r2, [pc, #20]	; (8001440 <EXTI2_IRQHandler+0x20>)
 800142c:	4b04      	ldr	r3, [pc, #16]	; (8001440 <EXTI2_IRQHandler+0x20>)
 800142e:	695b      	ldr	r3, [r3, #20]
 8001430:	f043 0304 	orr.w	r3, r3, #4
 8001434:	6153      	str	r3, [r2, #20]
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000090 	.word	0x20000090
 8001440:	40010400 	.word	0x40010400

08001444 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
	EXTI_CallBack[3]();
 8001448:	4b05      	ldr	r3, [pc, #20]	; (8001460 <EXTI3_IRQHandler+0x1c>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	4798      	blx	r3
	SET_BIT(EXTI -> PR,3);
 800144e:	4a05      	ldr	r2, [pc, #20]	; (8001464 <EXTI3_IRQHandler+0x20>)
 8001450:	4b04      	ldr	r3, [pc, #16]	; (8001464 <EXTI3_IRQHandler+0x20>)
 8001452:	695b      	ldr	r3, [r3, #20]
 8001454:	f043 0308 	orr.w	r3, r3, #8
 8001458:	6153      	str	r3, [r2, #20]
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000090 	.word	0x20000090
 8001464:	40010400 	.word	0x40010400

08001468 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
	EXTI_CallBack[4]();
 800146c:	4b05      	ldr	r3, [pc, #20]	; (8001484 <EXTI4_IRQHandler+0x1c>)
 800146e:	691b      	ldr	r3, [r3, #16]
 8001470:	4798      	blx	r3
	SET_BIT(EXTI -> PR,4);
 8001472:	4a05      	ldr	r2, [pc, #20]	; (8001488 <EXTI4_IRQHandler+0x20>)
 8001474:	4b04      	ldr	r3, [pc, #16]	; (8001488 <EXTI4_IRQHandler+0x20>)
 8001476:	695b      	ldr	r3, [r3, #20]
 8001478:	f043 0310 	orr.w	r3, r3, #16
 800147c:	6153      	str	r3, [r2, #20]
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000090 	.word	0x20000090
 8001488:	40010400 	.word	0x40010400

0800148c <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
	if (GET_BIT(EXTI -> PR,5) && EXTI_CallBack[5] != 0)
 8001490:	4b34      	ldr	r3, [pc, #208]	; (8001564 <EXTI9_5_IRQHandler+0xd8>)
 8001492:	695b      	ldr	r3, [r3, #20]
 8001494:	095b      	lsrs	r3, r3, #5
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	2b00      	cmp	r3, #0
 800149c:	d00d      	beq.n	80014ba <EXTI9_5_IRQHandler+0x2e>
 800149e:	4b32      	ldr	r3, [pc, #200]	; (8001568 <EXTI9_5_IRQHandler+0xdc>)
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d009      	beq.n	80014ba <EXTI9_5_IRQHandler+0x2e>
		{
			 EXTI_CallBack[5]();
 80014a6:	4b30      	ldr	r3, [pc, #192]	; (8001568 <EXTI9_5_IRQHandler+0xdc>)
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	4798      	blx	r3
			 SET_BIT(EXTI -> PR,5);
 80014ac:	4a2d      	ldr	r2, [pc, #180]	; (8001564 <EXTI9_5_IRQHandler+0xd8>)
 80014ae:	4b2d      	ldr	r3, [pc, #180]	; (8001564 <EXTI9_5_IRQHandler+0xd8>)
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	f043 0320 	orr.w	r3, r3, #32
 80014b6:	6153      	str	r3, [r2, #20]
			 return;
 80014b8:	e053      	b.n	8001562 <EXTI9_5_IRQHandler+0xd6>
		}
	if (GET_BIT(EXTI -> PR,6) && EXTI_CallBack[6] != 0)
 80014ba:	4b2a      	ldr	r3, [pc, #168]	; (8001564 <EXTI9_5_IRQHandler+0xd8>)
 80014bc:	695b      	ldr	r3, [r3, #20]
 80014be:	099b      	lsrs	r3, r3, #6
 80014c0:	f003 0301 	and.w	r3, r3, #1
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d00d      	beq.n	80014e4 <EXTI9_5_IRQHandler+0x58>
 80014c8:	4b27      	ldr	r3, [pc, #156]	; (8001568 <EXTI9_5_IRQHandler+0xdc>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d009      	beq.n	80014e4 <EXTI9_5_IRQHandler+0x58>
		{
				 EXTI_CallBack[6]();
 80014d0:	4b25      	ldr	r3, [pc, #148]	; (8001568 <EXTI9_5_IRQHandler+0xdc>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	4798      	blx	r3
				 SET_BIT(EXTI -> PR,6);
 80014d6:	4a23      	ldr	r2, [pc, #140]	; (8001564 <EXTI9_5_IRQHandler+0xd8>)
 80014d8:	4b22      	ldr	r3, [pc, #136]	; (8001564 <EXTI9_5_IRQHandler+0xd8>)
 80014da:	695b      	ldr	r3, [r3, #20]
 80014dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014e0:	6153      	str	r3, [r2, #20]
				 return;
 80014e2:	e03e      	b.n	8001562 <EXTI9_5_IRQHandler+0xd6>
		}
	if (GET_BIT(EXTI -> PR,7) && EXTI_CallBack[7] != 0)
 80014e4:	4b1f      	ldr	r3, [pc, #124]	; (8001564 <EXTI9_5_IRQHandler+0xd8>)
 80014e6:	695b      	ldr	r3, [r3, #20]
 80014e8:	09db      	lsrs	r3, r3, #7
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d00d      	beq.n	800150e <EXTI9_5_IRQHandler+0x82>
 80014f2:	4b1d      	ldr	r3, [pc, #116]	; (8001568 <EXTI9_5_IRQHandler+0xdc>)
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d009      	beq.n	800150e <EXTI9_5_IRQHandler+0x82>
		{
				 EXTI_CallBack[7]();
 80014fa:	4b1b      	ldr	r3, [pc, #108]	; (8001568 <EXTI9_5_IRQHandler+0xdc>)
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	4798      	blx	r3
				 SET_BIT(EXTI -> PR,7);
 8001500:	4a18      	ldr	r2, [pc, #96]	; (8001564 <EXTI9_5_IRQHandler+0xd8>)
 8001502:	4b18      	ldr	r3, [pc, #96]	; (8001564 <EXTI9_5_IRQHandler+0xd8>)
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800150a:	6153      	str	r3, [r2, #20]
				 return;
 800150c:	e029      	b.n	8001562 <EXTI9_5_IRQHandler+0xd6>
		}
	if (GET_BIT(EXTI -> PR,8) && EXTI_CallBack[8] != 0)
 800150e:	4b15      	ldr	r3, [pc, #84]	; (8001564 <EXTI9_5_IRQHandler+0xd8>)
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	0a1b      	lsrs	r3, r3, #8
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	2b00      	cmp	r3, #0
 800151a:	d00d      	beq.n	8001538 <EXTI9_5_IRQHandler+0xac>
 800151c:	4b12      	ldr	r3, [pc, #72]	; (8001568 <EXTI9_5_IRQHandler+0xdc>)
 800151e:	6a1b      	ldr	r3, [r3, #32]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d009      	beq.n	8001538 <EXTI9_5_IRQHandler+0xac>
		{
				 EXTI_CallBack[8]();
 8001524:	4b10      	ldr	r3, [pc, #64]	; (8001568 <EXTI9_5_IRQHandler+0xdc>)
 8001526:	6a1b      	ldr	r3, [r3, #32]
 8001528:	4798      	blx	r3
				 SET_BIT(EXTI -> PR,8);
 800152a:	4a0e      	ldr	r2, [pc, #56]	; (8001564 <EXTI9_5_IRQHandler+0xd8>)
 800152c:	4b0d      	ldr	r3, [pc, #52]	; (8001564 <EXTI9_5_IRQHandler+0xd8>)
 800152e:	695b      	ldr	r3, [r3, #20]
 8001530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001534:	6153      	str	r3, [r2, #20]
				 return;
 8001536:	e014      	b.n	8001562 <EXTI9_5_IRQHandler+0xd6>
		}
	if (GET_BIT(EXTI -> PR,9) && EXTI_CallBack[9] != 0)
 8001538:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <EXTI9_5_IRQHandler+0xd8>)
 800153a:	695b      	ldr	r3, [r3, #20]
 800153c:	0a5b      	lsrs	r3, r3, #9
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	2b00      	cmp	r3, #0
 8001544:	d00d      	beq.n	8001562 <EXTI9_5_IRQHandler+0xd6>
 8001546:	4b08      	ldr	r3, [pc, #32]	; (8001568 <EXTI9_5_IRQHandler+0xdc>)
 8001548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154a:	2b00      	cmp	r3, #0
 800154c:	d009      	beq.n	8001562 <EXTI9_5_IRQHandler+0xd6>
		{
				 EXTI_CallBack[9]();
 800154e:	4b06      	ldr	r3, [pc, #24]	; (8001568 <EXTI9_5_IRQHandler+0xdc>)
 8001550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001552:	4798      	blx	r3
				 SET_BIT(EXTI -> PR,9);
 8001554:	4a03      	ldr	r2, [pc, #12]	; (8001564 <EXTI9_5_IRQHandler+0xd8>)
 8001556:	4b03      	ldr	r3, [pc, #12]	; (8001564 <EXTI9_5_IRQHandler+0xd8>)
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800155e:	6153      	str	r3, [r2, #20]
				 return;
 8001560:	bf00      	nop
		}
}
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40010400 	.word	0x40010400
 8001568:	20000090 	.word	0x20000090

0800156c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void){
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
	 if (GET_BIT(EXTI -> PR,10) && EXTI_CallBack[10] != 0)
 8001570:	4b3f      	ldr	r3, [pc, #252]	; (8001670 <EXTI15_10_IRQHandler+0x104>)
 8001572:	695b      	ldr	r3, [r3, #20]
 8001574:	0a9b      	lsrs	r3, r3, #10
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	2b00      	cmp	r3, #0
 800157c:	d00d      	beq.n	800159a <EXTI15_10_IRQHandler+0x2e>
 800157e:	4b3d      	ldr	r3, [pc, #244]	; (8001674 <EXTI15_10_IRQHandler+0x108>)
 8001580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001582:	2b00      	cmp	r3, #0
 8001584:	d009      	beq.n	800159a <EXTI15_10_IRQHandler+0x2e>
	 	 {
		 EXTI_CallBack[10]();
 8001586:	4b3b      	ldr	r3, [pc, #236]	; (8001674 <EXTI15_10_IRQHandler+0x108>)
 8001588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158a:	4798      	blx	r3
		 SET_BIT(EXTI -> PR,10);
 800158c:	4a38      	ldr	r2, [pc, #224]	; (8001670 <EXTI15_10_IRQHandler+0x104>)
 800158e:	4b38      	ldr	r3, [pc, #224]	; (8001670 <EXTI15_10_IRQHandler+0x104>)
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001596:	6153      	str	r3, [r2, #20]
		 return;
 8001598:	e068      	b.n	800166c <EXTI15_10_IRQHandler+0x100>
	 	 }
	 if (GET_BIT(EXTI -> PR,11) && EXTI_CallBack[11] != 0)
 800159a:	4b35      	ldr	r3, [pc, #212]	; (8001670 <EXTI15_10_IRQHandler+0x104>)
 800159c:	695b      	ldr	r3, [r3, #20]
 800159e:	0adb      	lsrs	r3, r3, #11
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d00d      	beq.n	80015c4 <EXTI15_10_IRQHandler+0x58>
 80015a8:	4b32      	ldr	r3, [pc, #200]	; (8001674 <EXTI15_10_IRQHandler+0x108>)
 80015aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d009      	beq.n	80015c4 <EXTI15_10_IRQHandler+0x58>
	 	 {
	 		 EXTI_CallBack[11]();
 80015b0:	4b30      	ldr	r3, [pc, #192]	; (8001674 <EXTI15_10_IRQHandler+0x108>)
 80015b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b4:	4798      	blx	r3
	 		 SET_BIT(EXTI -> PR,11);
 80015b6:	4a2e      	ldr	r2, [pc, #184]	; (8001670 <EXTI15_10_IRQHandler+0x104>)
 80015b8:	4b2d      	ldr	r3, [pc, #180]	; (8001670 <EXTI15_10_IRQHandler+0x104>)
 80015ba:	695b      	ldr	r3, [r3, #20]
 80015bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015c0:	6153      	str	r3, [r2, #20]
	 		return;
 80015c2:	e053      	b.n	800166c <EXTI15_10_IRQHandler+0x100>
	 	 }
	 if (GET_BIT(EXTI -> PR,12) && EXTI_CallBack[12] != 0)
 80015c4:	4b2a      	ldr	r3, [pc, #168]	; (8001670 <EXTI15_10_IRQHandler+0x104>)
 80015c6:	695b      	ldr	r3, [r3, #20]
 80015c8:	0b1b      	lsrs	r3, r3, #12
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d00d      	beq.n	80015ee <EXTI15_10_IRQHandler+0x82>
 80015d2:	4b28      	ldr	r3, [pc, #160]	; (8001674 <EXTI15_10_IRQHandler+0x108>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d009      	beq.n	80015ee <EXTI15_10_IRQHandler+0x82>
	 	 {
	 		 EXTI_CallBack[12]();
 80015da:	4b26      	ldr	r3, [pc, #152]	; (8001674 <EXTI15_10_IRQHandler+0x108>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	4798      	blx	r3
	 		 SET_BIT(EXTI -> PR,12);
 80015e0:	4a23      	ldr	r2, [pc, #140]	; (8001670 <EXTI15_10_IRQHandler+0x104>)
 80015e2:	4b23      	ldr	r3, [pc, #140]	; (8001670 <EXTI15_10_IRQHandler+0x104>)
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015ea:	6153      	str	r3, [r2, #20]
	 		return;
 80015ec:	e03e      	b.n	800166c <EXTI15_10_IRQHandler+0x100>
	 	 }
	 if (GET_BIT(EXTI -> PR,13) && EXTI_CallBack[13] != 0)
 80015ee:	4b20      	ldr	r3, [pc, #128]	; (8001670 <EXTI15_10_IRQHandler+0x104>)
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	0b5b      	lsrs	r3, r3, #13
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d00d      	beq.n	8001618 <EXTI15_10_IRQHandler+0xac>
 80015fc:	4b1d      	ldr	r3, [pc, #116]	; (8001674 <EXTI15_10_IRQHandler+0x108>)
 80015fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001600:	2b00      	cmp	r3, #0
 8001602:	d009      	beq.n	8001618 <EXTI15_10_IRQHandler+0xac>
	 	 {
	 		 EXTI_CallBack[13]();
 8001604:	4b1b      	ldr	r3, [pc, #108]	; (8001674 <EXTI15_10_IRQHandler+0x108>)
 8001606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001608:	4798      	blx	r3
	 		 SET_BIT(EXTI -> PR,13);
 800160a:	4a19      	ldr	r2, [pc, #100]	; (8001670 <EXTI15_10_IRQHandler+0x104>)
 800160c:	4b18      	ldr	r3, [pc, #96]	; (8001670 <EXTI15_10_IRQHandler+0x104>)
 800160e:	695b      	ldr	r3, [r3, #20]
 8001610:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001614:	6153      	str	r3, [r2, #20]
	 		return;
 8001616:	e029      	b.n	800166c <EXTI15_10_IRQHandler+0x100>
	 	 }
	 if (GET_BIT(EXTI -> PR,14) && EXTI_CallBack[14] != 0)
 8001618:	4b15      	ldr	r3, [pc, #84]	; (8001670 <EXTI15_10_IRQHandler+0x104>)
 800161a:	695b      	ldr	r3, [r3, #20]
 800161c:	0b9b      	lsrs	r3, r3, #14
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	2b00      	cmp	r3, #0
 8001624:	d00d      	beq.n	8001642 <EXTI15_10_IRQHandler+0xd6>
 8001626:	4b13      	ldr	r3, [pc, #76]	; (8001674 <EXTI15_10_IRQHandler+0x108>)
 8001628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800162a:	2b00      	cmp	r3, #0
 800162c:	d009      	beq.n	8001642 <EXTI15_10_IRQHandler+0xd6>
	 	 {
	 		 EXTI_CallBack[14]();
 800162e:	4b11      	ldr	r3, [pc, #68]	; (8001674 <EXTI15_10_IRQHandler+0x108>)
 8001630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001632:	4798      	blx	r3
	 		 SET_BIT(EXTI -> PR,14);
 8001634:	4a0e      	ldr	r2, [pc, #56]	; (8001670 <EXTI15_10_IRQHandler+0x104>)
 8001636:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <EXTI15_10_IRQHandler+0x104>)
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800163e:	6153      	str	r3, [r2, #20]
	 		return;
 8001640:	e014      	b.n	800166c <EXTI15_10_IRQHandler+0x100>
	 	 }
	 if (GET_BIT(EXTI -> PR,15) && EXTI_CallBack[15] != 0)
 8001642:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <EXTI15_10_IRQHandler+0x104>)
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	0bdb      	lsrs	r3, r3, #15
 8001648:	f003 0301 	and.w	r3, r3, #1
 800164c:	2b00      	cmp	r3, #0
 800164e:	d00d      	beq.n	800166c <EXTI15_10_IRQHandler+0x100>
 8001650:	4b08      	ldr	r3, [pc, #32]	; (8001674 <EXTI15_10_IRQHandler+0x108>)
 8001652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001654:	2b00      	cmp	r3, #0
 8001656:	d009      	beq.n	800166c <EXTI15_10_IRQHandler+0x100>
	 	 {
	 		 EXTI_CallBack[15]();
 8001658:	4b06      	ldr	r3, [pc, #24]	; (8001674 <EXTI15_10_IRQHandler+0x108>)
 800165a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800165c:	4798      	blx	r3
	 		 SET_BIT(EXTI -> PR,15);
 800165e:	4a04      	ldr	r2, [pc, #16]	; (8001670 <EXTI15_10_IRQHandler+0x104>)
 8001660:	4b03      	ldr	r3, [pc, #12]	; (8001670 <EXTI15_10_IRQHandler+0x104>)
 8001662:	695b      	ldr	r3, [r3, #20]
 8001664:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001668:	6153      	str	r3, [r2, #20]
	 		return;
 800166a:	bf00      	nop
	 	 }
}
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40010400 	.word	0x40010400
 8001674:	20000090 	.word	0x20000090

08001678 <reverse>:

#include "FLOAT_ARRAY.h"
#include <math.h>
void reverse(char* str, int len)
{
 8001678:	b480      	push	{r7}
 800167a:	b087      	sub	sp, #28
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 8001682:	2300      	movs	r3, #0
 8001684:	617b      	str	r3, [r7, #20]
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	3b01      	subs	r3, #1
 800168a:	613b      	str	r3, [r7, #16]
    while (i < j) {
 800168c:	e018      	b.n	80016c0 <reverse+0x48>
        temp = str[i];
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	4413      	add	r3, r2
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	4413      	add	r3, r2
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	6879      	ldr	r1, [r7, #4]
 80016a2:	440a      	add	r2, r1
 80016a4:	7812      	ldrb	r2, [r2, #0]
 80016a6:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	4413      	add	r3, r2
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	701a      	strb	r2, [r3, #0]
        i++;
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	3301      	adds	r3, #1
 80016b8:	617b      	str	r3, [r7, #20]
        j--;
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	3b01      	subs	r3, #1
 80016be:	613b      	str	r3, [r7, #16]
    while (i < j) {
 80016c0:	697a      	ldr	r2, [r7, #20]
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	dbe2      	blt.n	800168e <reverse+0x16>
    }
}
 80016c8:	bf00      	nop
 80016ca:	371c      	adds	r7, #28
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr
	...

080016d4 <intToStr>:

int intToStr(int x, char str[], int d)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
    int i = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]
    while (x) {
 80016e4:	e01d      	b.n	8001722 <intToStr+0x4e>
        str[i++] = (x % 10) + '0';
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	1c5a      	adds	r2, r3, #1
 80016ea:	617a      	str	r2, [r7, #20]
 80016ec:	461a      	mov	r2, r3
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	1898      	adds	r0, r3, r2
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	4b1a      	ldr	r3, [pc, #104]	; (8001760 <intToStr+0x8c>)
 80016f6:	fb83 1302 	smull	r1, r3, r3, r2
 80016fa:	1099      	asrs	r1, r3, #2
 80016fc:	17d3      	asrs	r3, r2, #31
 80016fe:	1ac9      	subs	r1, r1, r3
 8001700:	460b      	mov	r3, r1
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	440b      	add	r3, r1
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	1ad1      	subs	r1, r2, r3
 800170a:	b2cb      	uxtb	r3, r1
 800170c:	3330      	adds	r3, #48	; 0x30
 800170e:	b2db      	uxtb	r3, r3
 8001710:	7003      	strb	r3, [r0, #0]
        x = x / 10;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	4a12      	ldr	r2, [pc, #72]	; (8001760 <intToStr+0x8c>)
 8001716:	fb82 1203 	smull	r1, r2, r2, r3
 800171a:	1092      	asrs	r2, r2, #2
 800171c:	17db      	asrs	r3, r3, #31
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	60fb      	str	r3, [r7, #12]
    while (x) {
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1de      	bne.n	80016e6 <intToStr+0x12>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 8001728:	e007      	b.n	800173a <intToStr+0x66>
        str[i++] = '0';
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	1c5a      	adds	r2, r3, #1
 800172e:	617a      	str	r2, [r7, #20]
 8001730:	461a      	mov	r2, r3
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	4413      	add	r3, r2
 8001736:	2230      	movs	r2, #48	; 0x30
 8001738:	701a      	strb	r2, [r3, #0]
    while (i < d)
 800173a:	697a      	ldr	r2, [r7, #20]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	429a      	cmp	r2, r3
 8001740:	dbf3      	blt.n	800172a <intToStr+0x56>

    reverse(str, i);
 8001742:	6979      	ldr	r1, [r7, #20]
 8001744:	68b8      	ldr	r0, [r7, #8]
 8001746:	f7ff ff97 	bl	8001678 <reverse>
    str[i] = '\0';
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	68ba      	ldr	r2, [r7, #8]
 800174e:	4413      	add	r3, r2
 8001750:	2200      	movs	r2, #0
 8001752:	701a      	strb	r2, [r3, #0]
    return i;
 8001754:	697b      	ldr	r3, [r7, #20]
}
 8001756:	4618      	mov	r0, r3
 8001758:	3718      	adds	r7, #24
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	66666667 	.word	0x66666667

08001764 <ftoa>:

void ftoa(float n, char* res, int afterpoint)
{
 8001764:	b5b0      	push	{r4, r5, r7, lr}
 8001766:	b088      	sub	sp, #32
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 8001770:	68f8      	ldr	r0, [r7, #12]
 8001772:	f7ff fca1 	bl	80010b8 <__aeabi_f2iz>
 8001776:	4603      	mov	r3, r0
 8001778:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 800177a:	69f8      	ldr	r0, [r7, #28]
 800177c:	f7ff fa82 	bl	8000c84 <__aeabi_i2f>
 8001780:	4603      	mov	r3, r0
 8001782:	4619      	mov	r1, r3
 8001784:	68f8      	ldr	r0, [r7, #12]
 8001786:	f7ff f9c7 	bl	8000b18 <__aeabi_fsub>
 800178a:	4603      	mov	r3, r0
 800178c:	61bb      	str	r3, [r7, #24]

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 800178e:	2200      	movs	r2, #0
 8001790:	68b9      	ldr	r1, [r7, #8]
 8001792:	69f8      	ldr	r0, [r7, #28]
 8001794:	f7ff ff9e 	bl	80016d4 <intToStr>
 8001798:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0) {
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d02c      	beq.n	80017fa <ftoa+0x96>
        res[i] = '.'; // add dot
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	4413      	add	r3, r2
 80017a6:	222e      	movs	r2, #46	; 0x2e
 80017a8:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter
        // is needed to handle cases like 233.007
        fpart = fpart * pow(10, afterpoint);
 80017aa:	69b8      	ldr	r0, [r7, #24]
 80017ac:	f7fe fe34 	bl	8000418 <__aeabi_f2d>
 80017b0:	4604      	mov	r4, r0
 80017b2:	460d      	mov	r5, r1
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f7fe fe1d 	bl	80003f4 <__aeabi_i2d>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	f04f 0000 	mov.w	r0, #0
 80017c2:	4910      	ldr	r1, [pc, #64]	; (8001804 <ftoa+0xa0>)
 80017c4:	f001 fde4 	bl	8003390 <pow>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	4620      	mov	r0, r4
 80017ce:	4629      	mov	r1, r5
 80017d0:	f7fe fe76 	bl	80004c0 <__aeabi_dmul>
 80017d4:	4603      	mov	r3, r0
 80017d6:	460c      	mov	r4, r1
 80017d8:	4618      	mov	r0, r3
 80017da:	4621      	mov	r1, r4
 80017dc:	f7ff f948 	bl	8000a70 <__aeabi_d2f>
 80017e0:	4603      	mov	r3, r0
 80017e2:	61bb      	str	r3, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 80017e4:	69b8      	ldr	r0, [r7, #24]
 80017e6:	f7ff fc67 	bl	80010b8 <__aeabi_f2iz>
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	3301      	adds	r3, #1
 80017ee:	68ba      	ldr	r2, [r7, #8]
 80017f0:	4413      	add	r3, r2
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	4619      	mov	r1, r3
 80017f6:	f7ff ff6d 	bl	80016d4 <intToStr>
    }
}
 80017fa:	bf00      	nop
 80017fc:	3720      	adds	r7, #32
 80017fe:	46bd      	mov	sp, r7
 8001800:	bdb0      	pop	{r4, r5, r7, pc}
 8001802:	bf00      	nop
 8001804:	40240000 	.word	0x40240000

08001808 <MGPIO_voidSetPinDirection>:

#include "GPIO_interface.h"
#include "GPIO_private.h"
#include "GPIO_config.h"

void MGPIO_voidSetPinDirection( u8 Copy_u8Port , u8 Copy_u8Pin , u8 u8Copy_u8Mode ){
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]
 8001812:	460b      	mov	r3, r1
 8001814:	71bb      	strb	r3, [r7, #6]
 8001816:	4613      	mov	r3, r2
 8001818:	717b      	strb	r3, [r7, #5]

	switch(Copy_u8Port)
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	2b03      	cmp	r3, #3
 800181e:	d03a      	beq.n	8001896 <MGPIO_voidSetPinDirection+0x8e>
 8001820:	2b04      	cmp	r3, #4
 8001822:	d06d      	beq.n	8001900 <MGPIO_voidSetPinDirection+0xf8>
 8001824:	2b02      	cmp	r3, #2
 8001826:	d000      	beq.n	800182a <MGPIO_voidSetPinDirection+0x22>
			Copy_u8Pin = Copy_u8Pin - 8;
			GPIOC_CRH &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );
			GPIOC_CRH |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
		}
		break;
	default :break;
 8001828:	e0a4      	b.n	8001974 <MGPIO_voidSetPinDirection+0x16c>
		if(Copy_u8Pin <= 7 )
 800182a:	79bb      	ldrb	r3, [r7, #6]
 800182c:	2b07      	cmp	r3, #7
 800182e:	d815      	bhi.n	800185c <MGPIO_voidSetPinDirection+0x54>
			GPIOA_CRL &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ));// R M W
 8001830:	4953      	ldr	r1, [pc, #332]	; (8001980 <MGPIO_voidSetPinDirection+0x178>)
 8001832:	4b53      	ldr	r3, [pc, #332]	; (8001980 <MGPIO_voidSetPinDirection+0x178>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	79ba      	ldrb	r2, [r7, #6]
 8001838:	0092      	lsls	r2, r2, #2
 800183a:	200f      	movs	r0, #15
 800183c:	fa00 f202 	lsl.w	r2, r0, r2
 8001840:	43d2      	mvns	r2, r2
 8001842:	4013      	ands	r3, r2
 8001844:	600b      	str	r3, [r1, #0]
			GPIOA_CRL |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 );
 8001846:	484e      	ldr	r0, [pc, #312]	; (8001980 <MGPIO_voidSetPinDirection+0x178>)
 8001848:	4b4d      	ldr	r3, [pc, #308]	; (8001980 <MGPIO_voidSetPinDirection+0x178>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	7979      	ldrb	r1, [r7, #5]
 800184e:	79ba      	ldrb	r2, [r7, #6]
 8001850:	0092      	lsls	r2, r2, #2
 8001852:	fa01 f202 	lsl.w	r2, r1, r2
 8001856:	4313      	orrs	r3, r2
 8001858:	6003      	str	r3, [r0, #0]
		break;
 800185a:	e086      	b.n	800196a <MGPIO_voidSetPinDirection+0x162>
		else if(Copy_u8Pin <=15 )
 800185c:	79bb      	ldrb	r3, [r7, #6]
 800185e:	2b0f      	cmp	r3, #15
 8001860:	f200 8083 	bhi.w	800196a <MGPIO_voidSetPinDirection+0x162>
			Copy_u8Pin = Copy_u8Pin - 8;
 8001864:	79bb      	ldrb	r3, [r7, #6]
 8001866:	3b08      	subs	r3, #8
 8001868:	71bb      	strb	r3, [r7, #6]
			GPIOA_CRH &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );
 800186a:	4946      	ldr	r1, [pc, #280]	; (8001984 <MGPIO_voidSetPinDirection+0x17c>)
 800186c:	4b45      	ldr	r3, [pc, #276]	; (8001984 <MGPIO_voidSetPinDirection+0x17c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	79ba      	ldrb	r2, [r7, #6]
 8001872:	0092      	lsls	r2, r2, #2
 8001874:	200f      	movs	r0, #15
 8001876:	fa00 f202 	lsl.w	r2, r0, r2
 800187a:	43d2      	mvns	r2, r2
 800187c:	4013      	ands	r3, r2
 800187e:	600b      	str	r3, [r1, #0]
			GPIOA_CRH |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 );
 8001880:	4840      	ldr	r0, [pc, #256]	; (8001984 <MGPIO_voidSetPinDirection+0x17c>)
 8001882:	4b40      	ldr	r3, [pc, #256]	; (8001984 <MGPIO_voidSetPinDirection+0x17c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	7979      	ldrb	r1, [r7, #5]
 8001888:	79ba      	ldrb	r2, [r7, #6]
 800188a:	0092      	lsls	r2, r2, #2
 800188c:	fa01 f202 	lsl.w	r2, r1, r2
 8001890:	4313      	orrs	r3, r2
 8001892:	6003      	str	r3, [r0, #0]
		break;
 8001894:	e069      	b.n	800196a <MGPIO_voidSetPinDirection+0x162>
		if(Copy_u8Pin <= 7 )
 8001896:	79bb      	ldrb	r3, [r7, #6]
 8001898:	2b07      	cmp	r3, #7
 800189a:	d815      	bhi.n	80018c8 <MGPIO_voidSetPinDirection+0xc0>
			GPIOB_CRL &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );// R M W
 800189c:	493a      	ldr	r1, [pc, #232]	; (8001988 <MGPIO_voidSetPinDirection+0x180>)
 800189e:	4b3a      	ldr	r3, [pc, #232]	; (8001988 <MGPIO_voidSetPinDirection+0x180>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	79ba      	ldrb	r2, [r7, #6]
 80018a4:	0092      	lsls	r2, r2, #2
 80018a6:	200f      	movs	r0, #15
 80018a8:	fa00 f202 	lsl.w	r2, r0, r2
 80018ac:	43d2      	mvns	r2, r2
 80018ae:	4013      	ands	r3, r2
 80018b0:	600b      	str	r3, [r1, #0]
			GPIOB_CRL |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 80018b2:	4835      	ldr	r0, [pc, #212]	; (8001988 <MGPIO_voidSetPinDirection+0x180>)
 80018b4:	4b34      	ldr	r3, [pc, #208]	; (8001988 <MGPIO_voidSetPinDirection+0x180>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	7979      	ldrb	r1, [r7, #5]
 80018ba:	79ba      	ldrb	r2, [r7, #6]
 80018bc:	0092      	lsls	r2, r2, #2
 80018be:	fa01 f202 	lsl.w	r2, r1, r2
 80018c2:	4313      	orrs	r3, r2
 80018c4:	6003      	str	r3, [r0, #0]
		break;
 80018c6:	e052      	b.n	800196e <MGPIO_voidSetPinDirection+0x166>
		else if(Copy_u8Pin <=15 )
 80018c8:	79bb      	ldrb	r3, [r7, #6]
 80018ca:	2b0f      	cmp	r3, #15
 80018cc:	d84f      	bhi.n	800196e <MGPIO_voidSetPinDirection+0x166>
			Copy_u8Pin = Copy_u8Pin - 8;
 80018ce:	79bb      	ldrb	r3, [r7, #6]
 80018d0:	3b08      	subs	r3, #8
 80018d2:	71bb      	strb	r3, [r7, #6]
			GPIOB_CRH &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );
 80018d4:	492d      	ldr	r1, [pc, #180]	; (800198c <MGPIO_voidSetPinDirection+0x184>)
 80018d6:	4b2d      	ldr	r3, [pc, #180]	; (800198c <MGPIO_voidSetPinDirection+0x184>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	79ba      	ldrb	r2, [r7, #6]
 80018dc:	0092      	lsls	r2, r2, #2
 80018de:	200f      	movs	r0, #15
 80018e0:	fa00 f202 	lsl.w	r2, r0, r2
 80018e4:	43d2      	mvns	r2, r2
 80018e6:	4013      	ands	r3, r2
 80018e8:	600b      	str	r3, [r1, #0]
			GPIOB_CRH |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 80018ea:	4828      	ldr	r0, [pc, #160]	; (800198c <MGPIO_voidSetPinDirection+0x184>)
 80018ec:	4b27      	ldr	r3, [pc, #156]	; (800198c <MGPIO_voidSetPinDirection+0x184>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	7979      	ldrb	r1, [r7, #5]
 80018f2:	79ba      	ldrb	r2, [r7, #6]
 80018f4:	0092      	lsls	r2, r2, #2
 80018f6:	fa01 f202 	lsl.w	r2, r1, r2
 80018fa:	4313      	orrs	r3, r2
 80018fc:	6003      	str	r3, [r0, #0]
		break;
 80018fe:	e036      	b.n	800196e <MGPIO_voidSetPinDirection+0x166>
		if(Copy_u8Pin <= 7 )
 8001900:	79bb      	ldrb	r3, [r7, #6]
 8001902:	2b07      	cmp	r3, #7
 8001904:	d815      	bhi.n	8001932 <MGPIO_voidSetPinDirection+0x12a>
			GPIOC_CRL &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );// R M W
 8001906:	4922      	ldr	r1, [pc, #136]	; (8001990 <MGPIO_voidSetPinDirection+0x188>)
 8001908:	4b21      	ldr	r3, [pc, #132]	; (8001990 <MGPIO_voidSetPinDirection+0x188>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	79ba      	ldrb	r2, [r7, #6]
 800190e:	0092      	lsls	r2, r2, #2
 8001910:	200f      	movs	r0, #15
 8001912:	fa00 f202 	lsl.w	r2, r0, r2
 8001916:	43d2      	mvns	r2, r2
 8001918:	4013      	ands	r3, r2
 800191a:	600b      	str	r3, [r1, #0]
			GPIOC_CRL |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 800191c:	481c      	ldr	r0, [pc, #112]	; (8001990 <MGPIO_voidSetPinDirection+0x188>)
 800191e:	4b1c      	ldr	r3, [pc, #112]	; (8001990 <MGPIO_voidSetPinDirection+0x188>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	7979      	ldrb	r1, [r7, #5]
 8001924:	79ba      	ldrb	r2, [r7, #6]
 8001926:	0092      	lsls	r2, r2, #2
 8001928:	fa01 f202 	lsl.w	r2, r1, r2
 800192c:	4313      	orrs	r3, r2
 800192e:	6003      	str	r3, [r0, #0]
		break;
 8001930:	e01f      	b.n	8001972 <MGPIO_voidSetPinDirection+0x16a>
		else if(Copy_u8Pin <=15 )
 8001932:	79bb      	ldrb	r3, [r7, #6]
 8001934:	2b0f      	cmp	r3, #15
 8001936:	d81c      	bhi.n	8001972 <MGPIO_voidSetPinDirection+0x16a>
			Copy_u8Pin = Copy_u8Pin - 8;
 8001938:	79bb      	ldrb	r3, [r7, #6]
 800193a:	3b08      	subs	r3, #8
 800193c:	71bb      	strb	r3, [r7, #6]
			GPIOC_CRH &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );
 800193e:	4915      	ldr	r1, [pc, #84]	; (8001994 <MGPIO_voidSetPinDirection+0x18c>)
 8001940:	4b14      	ldr	r3, [pc, #80]	; (8001994 <MGPIO_voidSetPinDirection+0x18c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	79ba      	ldrb	r2, [r7, #6]
 8001946:	0092      	lsls	r2, r2, #2
 8001948:	200f      	movs	r0, #15
 800194a:	fa00 f202 	lsl.w	r2, r0, r2
 800194e:	43d2      	mvns	r2, r2
 8001950:	4013      	ands	r3, r2
 8001952:	600b      	str	r3, [r1, #0]
			GPIOC_CRH |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 8001954:	480f      	ldr	r0, [pc, #60]	; (8001994 <MGPIO_voidSetPinDirection+0x18c>)
 8001956:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <MGPIO_voidSetPinDirection+0x18c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	7979      	ldrb	r1, [r7, #5]
 800195c:	79ba      	ldrb	r2, [r7, #6]
 800195e:	0092      	lsls	r2, r2, #2
 8001960:	fa01 f202 	lsl.w	r2, r1, r2
 8001964:	4313      	orrs	r3, r2
 8001966:	6003      	str	r3, [r0, #0]
		break;
 8001968:	e003      	b.n	8001972 <MGPIO_voidSetPinDirection+0x16a>
		break;
 800196a:	bf00      	nop
 800196c:	e002      	b.n	8001974 <MGPIO_voidSetPinDirection+0x16c>
		break;
 800196e:	bf00      	nop
 8001970:	e000      	b.n	8001974 <MGPIO_voidSetPinDirection+0x16c>
		break;
 8001972:	bf00      	nop
	}


}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	40010800 	.word	0x40010800
 8001984:	40010804 	.word	0x40010804
 8001988:	40010c00 	.word	0x40010c00
 800198c:	40010c04 	.word	0x40010c04
 8001990:	40011000 	.word	0x40011000
 8001994:	40011004 	.word	0x40011004

08001998 <MGPIO_voidSetPinValue>:

void MGPIO_voidSetPinValue( u8 Copy_u8Port , u8 Copy_u8Pin , u8 u8Copy_u8Value ){
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	71fb      	strb	r3, [r7, #7]
 80019a2:	460b      	mov	r3, r1
 80019a4:	71bb      	strb	r3, [r7, #6]
 80019a6:	4613      	mov	r3, r2
 80019a8:	717b      	strb	r3, [r7, #5]

	switch(Copy_u8Port)
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	2b03      	cmp	r3, #3
 80019ae:	d01f      	beq.n	80019f0 <MGPIO_voidSetPinValue+0x58>
 80019b0:	2b04      	cmp	r3, #4
 80019b2:	d038      	beq.n	8001a26 <MGPIO_voidSetPinValue+0x8e>
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d000      	beq.n	80019ba <MGPIO_voidSetPinValue+0x22>
		}
		break;

	}

}
 80019b8:	e055      	b.n	8001a66 <MGPIO_voidSetPinValue+0xce>
		if( u8Copy_u8Value == HIGH ){
 80019ba:	797b      	ldrb	r3, [r7, #5]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d109      	bne.n	80019d4 <MGPIO_voidSetPinValue+0x3c>
			SET_BIT( GPIOA_ODR , Copy_u8Pin );
 80019c0:	492b      	ldr	r1, [pc, #172]	; (8001a70 <MGPIO_voidSetPinValue+0xd8>)
 80019c2:	4b2b      	ldr	r3, [pc, #172]	; (8001a70 <MGPIO_voidSetPinValue+0xd8>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	79ba      	ldrb	r2, [r7, #6]
 80019c8:	2001      	movs	r0, #1
 80019ca:	fa00 f202 	lsl.w	r2, r0, r2
 80019ce:	4313      	orrs	r3, r2
 80019d0:	600b      	str	r3, [r1, #0]
		break;
 80019d2:	e043      	b.n	8001a5c <MGPIO_voidSetPinValue+0xc4>
		}else if( u8Copy_u8Value == LOW ){
 80019d4:	797b      	ldrb	r3, [r7, #5]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d140      	bne.n	8001a5c <MGPIO_voidSetPinValue+0xc4>
			CLR_BIT(  GPIOA_ODR , Copy_u8Pin );
 80019da:	4925      	ldr	r1, [pc, #148]	; (8001a70 <MGPIO_voidSetPinValue+0xd8>)
 80019dc:	4b24      	ldr	r3, [pc, #144]	; (8001a70 <MGPIO_voidSetPinValue+0xd8>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	79ba      	ldrb	r2, [r7, #6]
 80019e2:	2001      	movs	r0, #1
 80019e4:	fa00 f202 	lsl.w	r2, r0, r2
 80019e8:	43d2      	mvns	r2, r2
 80019ea:	4013      	ands	r3, r2
 80019ec:	600b      	str	r3, [r1, #0]
		break;
 80019ee:	e035      	b.n	8001a5c <MGPIO_voidSetPinValue+0xc4>
		if( u8Copy_u8Value == HIGH ){
 80019f0:	797b      	ldrb	r3, [r7, #5]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d109      	bne.n	8001a0a <MGPIO_voidSetPinValue+0x72>
			SET_BIT( GPIOB_ODR  , Copy_u8Pin );
 80019f6:	491f      	ldr	r1, [pc, #124]	; (8001a74 <MGPIO_voidSetPinValue+0xdc>)
 80019f8:	4b1e      	ldr	r3, [pc, #120]	; (8001a74 <MGPIO_voidSetPinValue+0xdc>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	79ba      	ldrb	r2, [r7, #6]
 80019fe:	2001      	movs	r0, #1
 8001a00:	fa00 f202 	lsl.w	r2, r0, r2
 8001a04:	4313      	orrs	r3, r2
 8001a06:	600b      	str	r3, [r1, #0]
		break;
 8001a08:	e02a      	b.n	8001a60 <MGPIO_voidSetPinValue+0xc8>
		}else if( u8Copy_u8Value == LOW ){
 8001a0a:	797b      	ldrb	r3, [r7, #5]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d127      	bne.n	8001a60 <MGPIO_voidSetPinValue+0xc8>
			CLR_BIT( GPIOB_ODR  , Copy_u8Pin );
 8001a10:	4918      	ldr	r1, [pc, #96]	; (8001a74 <MGPIO_voidSetPinValue+0xdc>)
 8001a12:	4b18      	ldr	r3, [pc, #96]	; (8001a74 <MGPIO_voidSetPinValue+0xdc>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	79ba      	ldrb	r2, [r7, #6]
 8001a18:	2001      	movs	r0, #1
 8001a1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a1e:	43d2      	mvns	r2, r2
 8001a20:	4013      	ands	r3, r2
 8001a22:	600b      	str	r3, [r1, #0]
		break;
 8001a24:	e01c      	b.n	8001a60 <MGPIO_voidSetPinValue+0xc8>
		if( u8Copy_u8Value == HIGH ){
 8001a26:	797b      	ldrb	r3, [r7, #5]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d109      	bne.n	8001a40 <MGPIO_voidSetPinValue+0xa8>
			SET_BIT( GPIOC_ODR , Copy_u8Pin );
 8001a2c:	4912      	ldr	r1, [pc, #72]	; (8001a78 <MGPIO_voidSetPinValue+0xe0>)
 8001a2e:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <MGPIO_voidSetPinValue+0xe0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	79ba      	ldrb	r2, [r7, #6]
 8001a34:	2001      	movs	r0, #1
 8001a36:	fa00 f202 	lsl.w	r2, r0, r2
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	600b      	str	r3, [r1, #0]
		break;
 8001a3e:	e011      	b.n	8001a64 <MGPIO_voidSetPinValue+0xcc>
		}else if( u8Copy_u8Value == LOW ){
 8001a40:	797b      	ldrb	r3, [r7, #5]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d10e      	bne.n	8001a64 <MGPIO_voidSetPinValue+0xcc>
			CLR_BIT( GPIOC_ODR , Copy_u8Pin );
 8001a46:	490c      	ldr	r1, [pc, #48]	; (8001a78 <MGPIO_voidSetPinValue+0xe0>)
 8001a48:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <MGPIO_voidSetPinValue+0xe0>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	79ba      	ldrb	r2, [r7, #6]
 8001a4e:	2001      	movs	r0, #1
 8001a50:	fa00 f202 	lsl.w	r2, r0, r2
 8001a54:	43d2      	mvns	r2, r2
 8001a56:	4013      	ands	r3, r2
 8001a58:	600b      	str	r3, [r1, #0]
		break;
 8001a5a:	e003      	b.n	8001a64 <MGPIO_voidSetPinValue+0xcc>
		break;
 8001a5c:	bf00      	nop
 8001a5e:	e002      	b.n	8001a66 <MGPIO_voidSetPinValue+0xce>
		break;
 8001a60:	bf00      	nop
 8001a62:	e000      	b.n	8001a66 <MGPIO_voidSetPinValue+0xce>
		break;
 8001a64:	bf00      	nop
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr
 8001a70:	4001080c 	.word	0x4001080c
 8001a74:	40010c0c 	.word	0x40010c0c
 8001a78:	4001100c 	.word	0x4001100c

08001a7c <MGPIO_u8GetPinValue>:

u8  MGPIO_u8GetPinValue( u8 Copy_u8Port , u8 Copy_u8Pin ){
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	460a      	mov	r2, r1
 8001a86:	71fb      	strb	r3, [r7, #7]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	71bb      	strb	r3, [r7, #6]

	u8 LOC_u8Result = 0 ;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	73fb      	strb	r3, [r7, #15]

	switch(Copy_u8Port)
 8001a90:	79fb      	ldrb	r3, [r7, #7]
 8001a92:	2b03      	cmp	r3, #3
 8001a94:	d00d      	beq.n	8001ab2 <MGPIO_u8GetPinValue+0x36>
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	d015      	beq.n	8001ac6 <MGPIO_u8GetPinValue+0x4a>
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d11d      	bne.n	8001ada <MGPIO_u8GetPinValue+0x5e>
	{
	case GPIOA:
		LOC_u8Result = GET_BIT( GPIOA_IDR , Copy_u8Pin );
 8001a9e:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <MGPIO_u8GetPinValue+0x6c>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	79bb      	ldrb	r3, [r7, #6]
 8001aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	73fb      	strb	r3, [r7, #15]

		break;
 8001ab0:	e013      	b.n	8001ada <MGPIO_u8GetPinValue+0x5e>
	case GPIOB:

		LOC_u8Result = GET_BIT( GPIOB_IDR , Copy_u8Pin );
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <MGPIO_u8GetPinValue+0x70>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	79bb      	ldrb	r3, [r7, #6]
 8001ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	73fb      	strb	r3, [r7, #15]

		break;
 8001ac4:	e009      	b.n	8001ada <MGPIO_u8GetPinValue+0x5e>
	case GPIOC:

		LOC_u8Result = GET_BIT( GPIOC_IDR , Copy_u8Pin );
 8001ac6:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <MGPIO_u8GetPinValue+0x74>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	79bb      	ldrb	r3, [r7, #6]
 8001acc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	73fb      	strb	r3, [r7, #15]

		break;
 8001ad8:	bf00      	nop
	}
	return LOC_u8Result;
 8001ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bc80      	pop	{r7}
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	40010808 	.word	0x40010808
 8001aec:	40010c08 	.word	0x40010c08
 8001af0:	40011008 	.word	0x40011008

08001af4 <MNVIC_voidInit>:

#include "NVIC_interface.h"
#include "NVIC_private.h"
#include "NVIC_config.h"

void MNVIC_voidInit(void){
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
	#define SCB_AIRCR		*((volatile u32*)(0xE000ED0C))
	SCB_AIRCR = MNVIC_GROUP_SUB_DISTRIBUTION;
 8001af8:	4b03      	ldr	r3, [pc, #12]	; (8001b08 <MNVIC_voidInit+0x14>)
 8001afa:	4a04      	ldr	r2, [pc, #16]	; (8001b0c <MNVIC_voidInit+0x18>)
 8001afc:	601a      	str	r2, [r3, #0]
}
 8001afe:	bf00      	nop
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bc80      	pop	{r7}
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	e000ed0c 	.word	0xe000ed0c
 8001b0c:	05fa0500 	.word	0x05fa0500

08001b10 <MNVIC_voidEnableInterrupt>:

void MNVIC_voidEnableInterrupt(u8 Copy_u8IntNumber){
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	71fb      	strb	r3, [r7, #7]
	if (Copy_u8IntNumber <=31)
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	2b1f      	cmp	r3, #31
 8001b1e:	d806      	bhi.n	8001b2e <MNVIC_voidEnableInterrupt+0x1e>
		NVIC_ISER0 = (1<< Copy_u8IntNumber);
 8001b20:	4a0a      	ldr	r2, [pc, #40]	; (8001b4c <MNVIC_voidEnableInterrupt+0x3c>)
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	2101      	movs	r1, #1
 8001b26:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2a:	6013      	str	r3, [r2, #0]
	else if(Copy_u8IntNumber <=59)
		NVIC_ISER1 = ( 1 << (Copy_u8IntNumber-32));
	else{
		//return error
	}
}
 8001b2c:	e009      	b.n	8001b42 <MNVIC_voidEnableInterrupt+0x32>
	else if(Copy_u8IntNumber <=59)
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	2b3b      	cmp	r3, #59	; 0x3b
 8001b32:	d806      	bhi.n	8001b42 <MNVIC_voidEnableInterrupt+0x32>
		NVIC_ISER1 = ( 1 << (Copy_u8IntNumber-32));
 8001b34:	4a06      	ldr	r2, [pc, #24]	; (8001b50 <MNVIC_voidEnableInterrupt+0x40>)
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	3b20      	subs	r3, #32
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b40:	6013      	str	r3, [r2, #0]
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr
 8001b4c:	e000e100 	.word	0xe000e100
 8001b50:	e000e104 	.word	0xe000e104

08001b54 <MNVIC_voidSetPriority>:
		//return error
	}
	return LOC_NVICResult;
}

void MNVIC_voidSetPriority(s8 Copy_s8IntID, u8 Copy_u8GroupPriority, u8 Copy_u8SubPriority, u32 Copy_u32Group ){
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	603b      	str	r3, [r7, #0]
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	71fb      	strb	r3, [r7, #7]
 8001b60:	460b      	mov	r3, r1
 8001b62:	71bb      	strb	r3, [r7, #6]
 8001b64:	4613      	mov	r3, r2
 8001b66:	717b      	strb	r3, [r7, #5]
	u8 Local_u8Priority =  Copy_u8SubPriority | Copy_u8GroupPriority << ( (MNVIC_GROUP_SUB_DISTRIBUTION - 0x05FA0300) / 256 )  ;
 8001b68:	79bb      	ldrb	r3, [r7, #6]
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	b25a      	sxtb	r2, r3
 8001b6e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	b25b      	sxtb	r3, r3
 8001b76:	73fb      	strb	r3, [r7, #15]
	/*check if core peripheral*/
	
	/*else, external peripheral*/
	if (Copy_s8IntID >= 0){
 8001b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	db09      	blt.n	8001b94 <MNVIC_voidSetPriority+0x40>
		NVIC_IPR[Copy_s8IntID] = Local_u8Priority << 4;
 8001b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b84:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001b88:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001b8c:	7bfa      	ldrb	r2, [r7, #15]
 8001b8e:	0112      	lsls	r2, r2, #4
 8001b90:	b2d2      	uxtb	r2, r2
 8001b92:	701a      	strb	r2, [r3, #0]
	}
	//SCB_AIRCR	= Copy_u32Group;
}
 8001b94:	bf00      	nop
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr
	...

08001ba0 <RCC_voidClockInit>:
/*Driver Files Includes*/
#include        "RCC_interface.h"
#include        "RCC_private.h"
#include        "RCC_config.h"

void RCC_voidClockInit(void){
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
			RCC->CR = 0x01000080;//(1<<HSION)|(16<<HSITRIM0)|(1<<PLLON) = 0x01000081
		#elif RCC_PLL_INPUT == RCC_PLL_IN_HSE && RCC_PLL_HSE_DIV_2 == RCC_TRUE
			while (!GET_BIT(RCC->CR, 17));
			RCC->CFGR = 0x00030002|((RCC_PLL_MUL_VALUE-2) << 18); //(2<<SW0)|(1<<PLLSRC)|(1<<PLLXTPRE)=0x00030002
		#elif RCC_PLL_INPUT == RCC_PLL_IN_HSE && RCC_PLL_HSE_DIV_2 == RCC_FALSE
			while (!GET_BIT(RCC->CR, 17));
 8001ba4:	bf00      	nop
 8001ba6:	4b21      	ldr	r3, [pc, #132]	; (8001c2c <RCC_voidClockInit+0x8c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	0c5b      	lsrs	r3, r3, #17
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d0f8      	beq.n	8001ba6 <RCC_voidClockInit+0x6>
			RCC->CFGR &= ~(0b11);
 8001bb4:	4a1d      	ldr	r2, [pc, #116]	; (8001c2c <RCC_voidClockInit+0x8c>)
 8001bb6:	4b1d      	ldr	r3, [pc, #116]	; (8001c2c <RCC_voidClockInit+0x8c>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f023 0303 	bic.w	r3, r3, #3
 8001bbe:	6053      	str	r3, [r2, #4]
			RCC->CFGR |= 1;
 8001bc0:	4a1a      	ldr	r2, [pc, #104]	; (8001c2c <RCC_voidClockInit+0x8c>)
 8001bc2:	4b1a      	ldr	r3, [pc, #104]	; (8001c2c <RCC_voidClockInit+0x8c>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	6053      	str	r3, [r2, #4]
			CLR_BIT(RCC->CR,24);
 8001bcc:	4a17      	ldr	r2, [pc, #92]	; (8001c2c <RCC_voidClockInit+0x8c>)
 8001bce:	4b17      	ldr	r3, [pc, #92]	; (8001c2c <RCC_voidClockInit+0x8c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bd6:	6013      	str	r3, [r2, #0]
			RCC->CFGR = 0x00010002|((RCC_PLL_MUL_VALUE-2) << 18); //(2<<SW0)|(1<<PLLSRC) = 0x00010002
 8001bd8:	4b14      	ldr	r3, [pc, #80]	; (8001c2c <RCC_voidClockInit+0x8c>)
 8001bda:	4a15      	ldr	r2, [pc, #84]	; (8001c30 <RCC_voidClockInit+0x90>)
 8001bdc:	605a      	str	r2, [r3, #4]
		#else 
			#error ("Wrong PLL options!")
		#endif
		
		#if	RCC_PLL_INPUT != RCC_PLL_IN_HSI_DIV_2
			SET_BIT(RCC->CR,24);
 8001bde:	4a13      	ldr	r2, [pc, #76]	; (8001c2c <RCC_voidClockInit+0x8c>)
 8001be0:	4b12      	ldr	r3, [pc, #72]	; (8001c2c <RCC_voidClockInit+0x8c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001be8:	6013      	str	r3, [r2, #0]
			while(!GET_BIT(RCC->CR,25));
 8001bea:	bf00      	nop
 8001bec:	4b0f      	ldr	r3, [pc, #60]	; (8001c2c <RCC_voidClockInit+0x8c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	0e5b      	lsrs	r3, r3, #25
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d0f8      	beq.n	8001bec <RCC_voidClockInit+0x4c>
			#if RCC_PLL_HSE_TYPE == RCC_CRYSTAL
				RCC->CR = 0x01010000;			//(1<<HSEON)|(1<<PLLON) = 0x01010000
 8001bfa:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <RCC_voidClockInit+0x8c>)
 8001bfc:	4a0d      	ldr	r2, [pc, #52]	; (8001c34 <RCC_voidClockInit+0x94>)
 8001bfe:	601a      	str	r2, [r3, #0]
        #error("Wrong Clock Type!")

    #endif // RCC_CLOCK_TYPE


	RCC->CFGR |= (RCC_AHB_PRESCALAR<<4) | (RCC_APB1_PRESCALAR<<8) | (RCC_APB2_PRESCALAR<<11)
 8001c00:	4a0a      	ldr	r2, [pc, #40]	; (8001c2c <RCC_voidClockInit+0x8c>)
 8001c02:	4b0a      	ldr	r3, [pc, #40]	; (8001c2c <RCC_voidClockInit+0x8c>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8001c0a:	6053      	str	r3, [r2, #4]
				| (RCC_ADC_PRESCALAR<<14);
	RCC->CFGR &= ~(0b1111<<18);
 8001c0c:	4a07      	ldr	r2, [pc, #28]	; (8001c2c <RCC_voidClockInit+0x8c>)
 8001c0e:	4b07      	ldr	r3, [pc, #28]	; (8001c2c <RCC_voidClockInit+0x8c>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8001c16:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= 4<<18;
 8001c18:	4a04      	ldr	r2, [pc, #16]	; (8001c2c <RCC_voidClockInit+0x8c>)
 8001c1a:	4b04      	ldr	r3, [pc, #16]	; (8001c2c <RCC_voidClockInit+0x8c>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c22:	6053      	str	r3, [r2, #4]
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	00110002 	.word	0x00110002
 8001c34:	01010000 	.word	0x01010000

08001c38 <RCC_voidEnableClock>:
void RCC_voidEnableClock(u8 Copy_u8BusId, u8 Copy_u8PerId){
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	460a      	mov	r2, r1
 8001c42:	71fb      	strb	r3, [r7, #7]
 8001c44:	4613      	mov	r3, r2
 8001c46:	71bb      	strb	r3, [r7, #6]

    if (Copy_u8PerId >31){
        //return error
    }
    switch (Copy_u8BusId){
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d00e      	beq.n	8001c6c <RCC_voidEnableClock+0x34>
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d016      	beq.n	8001c80 <RCC_voidEnableClock+0x48>
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d000      	beq.n	8001c58 <RCC_voidEnableClock+0x20>
        case RCC_AHB    :   SET_BIT(RCC->AHBENR  , Copy_u8PerId); break;
        case RCC_APB1   :   SET_BIT(RCC->APB1ENR , Copy_u8PerId); break;
        case RCC_APB2   :   SET_BIT(RCC->APB2ENR , Copy_u8PerId); break;
        default         :/*return error*/   break;
 8001c56:	e01d      	b.n	8001c94 <RCC_voidEnableClock+0x5c>
        case RCC_AHB    :   SET_BIT(RCC->AHBENR  , Copy_u8PerId); break;
 8001c58:	4911      	ldr	r1, [pc, #68]	; (8001ca0 <RCC_voidEnableClock+0x68>)
 8001c5a:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <RCC_voidEnableClock+0x68>)
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	79ba      	ldrb	r2, [r7, #6]
 8001c60:	2001      	movs	r0, #1
 8001c62:	fa00 f202 	lsl.w	r2, r0, r2
 8001c66:	4313      	orrs	r3, r2
 8001c68:	614b      	str	r3, [r1, #20]
 8001c6a:	e013      	b.n	8001c94 <RCC_voidEnableClock+0x5c>
        case RCC_APB1   :   SET_BIT(RCC->APB1ENR , Copy_u8PerId); break;
 8001c6c:	490c      	ldr	r1, [pc, #48]	; (8001ca0 <RCC_voidEnableClock+0x68>)
 8001c6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <RCC_voidEnableClock+0x68>)
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	79ba      	ldrb	r2, [r7, #6]
 8001c74:	2001      	movs	r0, #1
 8001c76:	fa00 f202 	lsl.w	r2, r0, r2
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	61cb      	str	r3, [r1, #28]
 8001c7e:	e009      	b.n	8001c94 <RCC_voidEnableClock+0x5c>
        case RCC_APB2   :   SET_BIT(RCC->APB2ENR , Copy_u8PerId); break;
 8001c80:	4907      	ldr	r1, [pc, #28]	; (8001ca0 <RCC_voidEnableClock+0x68>)
 8001c82:	4b07      	ldr	r3, [pc, #28]	; (8001ca0 <RCC_voidEnableClock+0x68>)
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	79ba      	ldrb	r2, [r7, #6]
 8001c88:	2001      	movs	r0, #1
 8001c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	618b      	str	r3, [r1, #24]
 8001c92:	bf00      	nop
    }
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	40021000 	.word	0x40021000

08001ca4 <MSPI2_voidInit>:
	
	/* Set Salve Select Pin */
	MGPIO_voidSetPinValue(MSPI1_SLAVE_PIN,HIGH);
}
void MSPI2_voidInit(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
	/* CPOL = 1/ CPHA = 1 / Prescaller = CLK/ 2 /SPI Enable /MSB First */
	MSPI2->CR1 = 0x0347;
 8001ca8:	4b03      	ldr	r3, [pc, #12]	; (8001cb8 <MSPI2_voidInit+0x14>)
 8001caa:	f240 3247 	movw	r2, #839	; 0x347
 8001cae:	601a      	str	r2, [r3, #0]
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr
 8001cb8:	40003800 	.word	0x40003800

08001cbc <MSPI2_voidSendReceiveSynch>:

void MSPI2_voidSendReceiveSynch(u8 Copy_u8DataToTransmit, u8 *Copy_DataToReceive)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	6039      	str	r1, [r7, #0]
 8001cc6:	71fb      	strb	r3, [r7, #7]
	/* Clear For Slave Select Pin */
	MGPIO_voidSetPinValue(MSPI2_SLAVE_PIN,LOW);
 8001cc8:	2200      	movs	r2, #0
 8001cca:	210c      	movs	r1, #12
 8001ccc:	2003      	movs	r0, #3
 8001cce:	f7ff fe63 	bl	8001998 <MGPIO_voidSetPinValue>

	/* Send Data */
	MSPI2 -> DR = Copy_u8DataToTransmit;
 8001cd2:	4a0c      	ldr	r2, [pc, #48]	; (8001d04 <MSPI2_voidSendReceiveSynch+0x48>)
 8001cd4:	79fb      	ldrb	r3, [r7, #7]
 8001cd6:	60d3      	str	r3, [r2, #12]

	/* Wait Busy Flag to finish */
	while (GET_BIT(MSPI2 -> SR, 7) == 1);
 8001cd8:	bf00      	nop
 8001cda:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <MSPI2_voidSendReceiveSynch+0x48>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	09db      	lsrs	r3, r3, #7
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d0f8      	beq.n	8001cda <MSPI2_voidSendReceiveSynch+0x1e>

 	/* Return to the received data */
	*Copy_DataToReceive = MSPI2 -> DR;
 8001ce8:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <MSPI2_voidSendReceiveSynch+0x48>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	701a      	strb	r2, [r3, #0]

	/* Set Salve Select Pin */
	MGPIO_voidSetPinValue(MSPI2_SLAVE_PIN,HIGH);
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	210c      	movs	r1, #12
 8001cf6:	2003      	movs	r0, #3
 8001cf8:	f7ff fe4e 	bl	8001998 <MGPIO_voidSetPinValue>
}
 8001cfc:	bf00      	nop
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40003800 	.word	0x40003800

08001d08 <MSTK_voidInit>:

/* Define Variable for interval mode */
static u8 MSTK_u8ModeOfInterval;

void MSTK_voidInit(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
#if MSTK_CLK_SRC == MSTK_SRC_AHB
    /* Disable STK - Disable STK Interrupt - Set clock source AHB */
	MSTK -> CTRL = 0x00000004;
#else
    /* Disable STK - Disable STK Interrupt - Set clock source AHB/8 */
	MSTK -> CTRL = 0;
 8001d0c:	4b03      	ldr	r3, [pc, #12]	; (8001d1c <MSTK_voidInit+0x14>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
	
#endif
}
 8001d12:	bf00      	nop
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	e000e010 	.word	0xe000e010

08001d20 <MSTK_voidSetBusyWait>:

void MSTK_voidSetBusyWait( u32 Copy_u32Ticks )
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
	/* Load ticks to load register */
	MSTK -> LOAD = Copy_u32Ticks*6;
 8001d28:	4912      	ldr	r1, [pc, #72]	; (8001d74 <MSTK_voidSetBusyWait+0x54>)
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	4413      	add	r3, r2
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	604b      	str	r3, [r1, #4]
	
	/* Start Timer */
	SET_BIT(MSTK->CTRL, 0);
 8001d36:	4a0f      	ldr	r2, [pc, #60]	; (8001d74 <MSTK_voidSetBusyWait+0x54>)
 8001d38:	4b0e      	ldr	r3, [pc, #56]	; (8001d74 <MSTK_voidSetBusyWait+0x54>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	6013      	str	r3, [r2, #0]
	
	/* Wait till flag is raised */
	while( (GET_BIT(MSTK->CTRL,16)) == 0);
 8001d42:	bf00      	nop
 8001d44:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <MSTK_voidSetBusyWait+0x54>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	0c1b      	lsrs	r3, r3, #16
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0f8      	beq.n	8001d44 <MSTK_voidSetBusyWait+0x24>
	
	/* Stop Timer */
	SET_BIT(MSTK->CTRL, 0);
 8001d52:	4a08      	ldr	r2, [pc, #32]	; (8001d74 <MSTK_voidSetBusyWait+0x54>)
 8001d54:	4b07      	ldr	r3, [pc, #28]	; (8001d74 <MSTK_voidSetBusyWait+0x54>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	6013      	str	r3, [r2, #0]
	MSTK -> LOAD = 0;
 8001d5e:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <MSTK_voidSetBusyWait+0x54>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	605a      	str	r2, [r3, #4]
	MSTK -> VAL  = 0;
 8001d64:	4b03      	ldr	r3, [pc, #12]	; (8001d74 <MSTK_voidSetBusyWait+0x54>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	609a      	str	r2, [r3, #8]
	
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr
 8001d74:	e000e010 	.word	0xe000e010

08001d78 <SysTick_Handler>:
	
	return Local_u32RemainTime;
}

void SysTick_Handler(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
	u8 Local_u8Temporary;
	
	if (MSTK_u8ModeOfInterval == MSTK_SINGLE_INTERVAL)
 8001d7e:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <SysTick_Handler+0x50>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d111      	bne.n	8001daa <SysTick_Handler+0x32>
	{
		/* Disable STK Interrupt */
		CLR_BIT(MSTK->CTRL, 1);
 8001d86:	4a11      	ldr	r2, [pc, #68]	; (8001dcc <SysTick_Handler+0x54>)
 8001d88:	4b10      	ldr	r3, [pc, #64]	; (8001dcc <SysTick_Handler+0x54>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f023 0302 	bic.w	r3, r3, #2
 8001d90:	6013      	str	r3, [r2, #0]
	
		/* Stop Timer */
		SET_BIT(MSTK->CTRL, 0);
 8001d92:	4a0e      	ldr	r2, [pc, #56]	; (8001dcc <SysTick_Handler+0x54>)
 8001d94:	4b0d      	ldr	r3, [pc, #52]	; (8001dcc <SysTick_Handler+0x54>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	6013      	str	r3, [r2, #0]
		MSTK -> LOAD = 0;
 8001d9e:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <SysTick_Handler+0x54>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	605a      	str	r2, [r3, #4]
		MSTK -> VAL  = 0;
 8001da4:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <SysTick_Handler+0x54>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	609a      	str	r2, [r3, #8]
	}
	
	/* Callback notification */
	MSTK_CallBack();
 8001daa:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <SysTick_Handler+0x58>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4798      	blx	r3
	
	/* Clear interrupt flag */
	Local_u8Temporary = GET_BIT(MSTK->CTRL,16);
 8001db0:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <SysTick_Handler+0x54>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	0c1b      	lsrs	r3, r3, #16
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	71fb      	strb	r3, [r7, #7]
}
 8001dbe:	bf00      	nop
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	200000d4 	.word	0x200000d4
 8001dcc:	e000e010 	.word	0xe000e010
 8001dd0:	200000d0 	.word	0x200000d0

08001dd4 <voidWriteCommand>:
#include "TFT_private.h"
#include "TFT_config.h"
#include "Font.h"

static void voidWriteCommand(u8 Copy_u8Command)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	71fb      	strb	r3, [r7, #7]
	u8 Local_u8Temp;
	/* Set A0 Pin to low */
	MGPIO_voidSetPinValue(TFT_A0_PIN,LOW);
 8001dde:	2200      	movs	r2, #0
 8001de0:	2106      	movs	r1, #6
 8001de2:	2003      	movs	r0, #3
 8001de4:	f7ff fdd8 	bl	8001998 <MGPIO_voidSetPinValue>

	/* Send Command over SPI*/
	MSPI2_voidSendReceiveSynch(Copy_u8Command, &Local_u8Temp);
 8001de8:	f107 020f 	add.w	r2, r7, #15
 8001dec:	79fb      	ldrb	r3, [r7, #7]
 8001dee:	4611      	mov	r1, r2
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff ff63 	bl	8001cbc <MSPI2_voidSendReceiveSynch>

}
 8001df6:	bf00      	nop
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <voidWriteData>:
static void voidWriteData(u8 Copy_u8Data)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b084      	sub	sp, #16
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	4603      	mov	r3, r0
 8001e06:	71fb      	strb	r3, [r7, #7]
	u8 Local_u8Temp;
	/* Set A0 Pin to High */
	MGPIO_voidSetPinValue(TFT_A0_PIN,HIGH);
 8001e08:	2201      	movs	r2, #1
 8001e0a:	2106      	movs	r1, #6
 8001e0c:	2003      	movs	r0, #3
 8001e0e:	f7ff fdc3 	bl	8001998 <MGPIO_voidSetPinValue>
	/* Send Data over SPI*/
	MSPI2_voidSendReceiveSynch(Copy_u8Data, &Local_u8Temp);
 8001e12:	f107 020f 	add.w	r2, r7, #15
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	4611      	mov	r1, r2
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff ff4e 	bl	8001cbc <MSPI2_voidSendReceiveSynch>
}
 8001e20:	bf00      	nop
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <HTFT_voidInit>:
void HTFT_voidInit(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
	/*Reset Pulse*/
	MGPIO_voidSetPinValue(TFT_RST_PIN,HIGH);
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	2107      	movs	r1, #7
 8001e30:	2003      	movs	r0, #3
 8001e32:	f7ff fdb1 	bl	8001998 <MGPIO_voidSetPinValue>
	MSTK_voidSetBusyWait(100);
 8001e36:	2064      	movs	r0, #100	; 0x64
 8001e38:	f7ff ff72 	bl	8001d20 <MSTK_voidSetBusyWait>
	MGPIO_voidSetPinValue(TFT_RST_PIN,LOW);
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	2107      	movs	r1, #7
 8001e40:	2003      	movs	r0, #3
 8001e42:	f7ff fda9 	bl	8001998 <MGPIO_voidSetPinValue>
	MSTK_voidSetBusyWait(1);
 8001e46:	2001      	movs	r0, #1
 8001e48:	f7ff ff6a 	bl	8001d20 <MSTK_voidSetBusyWait>
	MGPIO_voidSetPinValue(TFT_RST_PIN,HIGH);
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	2107      	movs	r1, #7
 8001e50:	2003      	movs	r0, #3
 8001e52:	f7ff fda1 	bl	8001998 <MGPIO_voidSetPinValue>
	MSTK_voidSetBusyWait(100);
 8001e56:	2064      	movs	r0, #100	; 0x64
 8001e58:	f7ff ff62 	bl	8001d20 <MSTK_voidSetBusyWait>
	MGPIO_voidSetPinValue(TFT_RST_PIN,LOW);
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	2107      	movs	r1, #7
 8001e60:	2003      	movs	r0, #3
 8001e62:	f7ff fd99 	bl	8001998 <MGPIO_voidSetPinValue>
	MSTK_voidSetBusyWait(100);
 8001e66:	2064      	movs	r0, #100	; 0x64
 8001e68:	f7ff ff5a 	bl	8001d20 <MSTK_voidSetBusyWait>
	MGPIO_voidSetPinValue(TFT_RST_PIN,HIGH);
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	2107      	movs	r1, #7
 8001e70:	2003      	movs	r0, #3
 8001e72:	f7ff fd91 	bl	8001998 <MGPIO_voidSetPinValue>
	MSTK_voidSetBusyWait(120000);
 8001e76:	480a      	ldr	r0, [pc, #40]	; (8001ea0 <HTFT_voidInit+0x78>)
 8001e78:	f7ff ff52 	bl	8001d20 <MSTK_voidSetBusyWait>

	/*Sleep Out Command*/
	voidWriteCommand(SLEEP_OUT);
 8001e7c:	2011      	movs	r0, #17
 8001e7e:	f7ff ffa9 	bl	8001dd4 <voidWriteCommand>
	
	/*Wait 150 ms*/
	MSTK_voidSetBusyWait(150000);
 8001e82:	4808      	ldr	r0, [pc, #32]	; (8001ea4 <HTFT_voidInit+0x7c>)
 8001e84:	f7ff ff4c 	bl	8001d20 <MSTK_voidSetBusyWait>
	
	/*Color Mode Command*/
	voidWriteCommand(PIXEL_FORMAT);
 8001e88:	203a      	movs	r0, #58	; 0x3a
 8001e8a:	f7ff ffa3 	bl	8001dd4 <voidWriteCommand>
	voidWriteData(0x05);
 8001e8e:	2005      	movs	r0, #5
 8001e90:	f7ff ffb5 	bl	8001dfe <voidWriteData>
	
	/*Display ON Command*/
	voidWriteCommand(DISPLAY_ON);
 8001e94:	2029      	movs	r0, #41	; 0x29
 8001e96:	f7ff ff9d 	bl	8001dd4 <voidWriteCommand>
	
	
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	0001d4c0 	.word	0x0001d4c0
 8001ea4:	000249f0 	.word	0x000249f0

08001ea8 <HTFT_voidFill>:
	}
	
	
}
void HTFT_voidFill( u8 Copy_u8X1,u8 Copy_u8Y1,u8 Copy_u8X2,u16 Copy_u8Y2, u16 Copy_u16Color)
{
 8001ea8:	b590      	push	{r4, r7, lr}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4604      	mov	r4, r0
 8001eb0:	4608      	mov	r0, r1
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4623      	mov	r3, r4
 8001eb8:	71fb      	strb	r3, [r7, #7]
 8001eba:	4603      	mov	r3, r0
 8001ebc:	71bb      	strb	r3, [r7, #6]
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	717b      	strb	r3, [r7, #5]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	807b      	strh	r3, [r7, #2]
	u16 Local_u8Counter;
	u16 size = (Copy_u8X2-Copy_u8X1 + 1) * (Copy_u8Y2-Copy_u8Y1 + 1);
 8001ec6:	797a      	ldrb	r2, [r7, #5]
 8001ec8:	79fb      	ldrb	r3, [r7, #7]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	3301      	adds	r3, #1
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	8879      	ldrh	r1, [r7, #2]
 8001ed2:	79ba      	ldrb	r2, [r7, #6]
 8001ed4:	1a8a      	subs	r2, r1, r2
 8001ed6:	3201      	adds	r2, #1
 8001ed8:	b292      	uxth	r2, r2
 8001eda:	fb02 f303 	mul.w	r3, r2, r3
 8001ede:	81bb      	strh	r3, [r7, #12]
	SetCursorPosition(Copy_u8X1,Copy_u8Y1,Copy_u8X2,Copy_u8Y2);
 8001ee0:	887b      	ldrh	r3, [r7, #2]
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	797a      	ldrb	r2, [r7, #5]
 8001ee6:	79b9      	ldrb	r1, [r7, #6]
 8001ee8:	79f8      	ldrb	r0, [r7, #7]
 8001eea:	f000 f85f 	bl	8001fac <SetCursorPosition>
	voidWriteCommand(WRITE_COMMAND);
 8001eee:	202c      	movs	r0, #44	; 0x2c
 8001ef0:	f7ff ff70 	bl	8001dd4 <voidWriteCommand>
	for(Local_u8Counter = 0; Local_u8Counter < size;Local_u8Counter++)
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	81fb      	strh	r3, [r7, #14]
 8001ef8:	e00e      	b.n	8001f18 <HTFT_voidFill+0x70>
	{
		/* Write the high byte */
		voidWriteData(Copy_u16Color >> 8);
 8001efa:	8c3b      	ldrh	r3, [r7, #32]
 8001efc:	0a1b      	lsrs	r3, r3, #8
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff ff7b 	bl	8001dfe <voidWriteData>

		/* Write the low byte */
		voidWriteData(Copy_u16Color & 0x00ff);
 8001f08:	8c3b      	ldrh	r3, [r7, #32]
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff ff76 	bl	8001dfe <voidWriteData>
	for(Local_u8Counter = 0; Local_u8Counter < size;Local_u8Counter++)
 8001f12:	89fb      	ldrh	r3, [r7, #14]
 8001f14:	3301      	adds	r3, #1
 8001f16:	81fb      	strh	r3, [r7, #14]
 8001f18:	89fa      	ldrh	r2, [r7, #14]
 8001f1a:	89bb      	ldrh	r3, [r7, #12]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d3ec      	bcc.n	8001efa <HTFT_voidFill+0x52>
	}
}
 8001f20:	bf00      	nop
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd90      	pop	{r4, r7, pc}

08001f28 <HTFT_voidFillScreen>:

void HTFT_voidFillScreen( u16 Copy_u8Color)
{	
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	80fb      	strh	r3, [r7, #6]
	u16 Local_u8Counter;
	u8 Data;
	
	/*Set X address*/
	voidWriteCommand(X_ADDRESS);
 8001f32:	202a      	movs	r0, #42	; 0x2a
 8001f34:	f7ff ff4e 	bl	8001dd4 <voidWriteCommand>
	//MSB First
	//Start X
	voidWriteData(0);
 8001f38:	2000      	movs	r0, #0
 8001f3a:	f7ff ff60 	bl	8001dfe <voidWriteData>
	voidWriteData(0);
 8001f3e:	2000      	movs	r0, #0
 8001f40:	f7ff ff5d 	bl	8001dfe <voidWriteData>
	//End X
	voidWriteData(0);
 8001f44:	2000      	movs	r0, #0
 8001f46:	f7ff ff5a 	bl	8001dfe <voidWriteData>
	voidWriteData(127);
 8001f4a:	207f      	movs	r0, #127	; 0x7f
 8001f4c:	f7ff ff57 	bl	8001dfe <voidWriteData>
	
	/*Set Y address*/
	voidWriteCommand(Y_ADDRESS);
 8001f50:	202b      	movs	r0, #43	; 0x2b
 8001f52:	f7ff ff3f 	bl	8001dd4 <voidWriteCommand>
	//MSB First
	//Start Y
	voidWriteData(0);
 8001f56:	2000      	movs	r0, #0
 8001f58:	f7ff ff51 	bl	8001dfe <voidWriteData>
	voidWriteData(0);
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	f7ff ff4e 	bl	8001dfe <voidWriteData>
	//End Y
	voidWriteData(0);
 8001f62:	2000      	movs	r0, #0
 8001f64:	f7ff ff4b 	bl	8001dfe <voidWriteData>
	voidWriteData(159);
 8001f68:	209f      	movs	r0, #159	; 0x9f
 8001f6a:	f7ff ff48 	bl	8001dfe <voidWriteData>
	
	/*RAM write*/
	voidWriteCommand(WRITE_COMMAND);
 8001f6e:	202c      	movs	r0, #44	; 0x2c
 8001f70:	f7ff ff30 	bl	8001dd4 <voidWriteCommand>
	
	for(Local_u8Counter = 0; Local_u8Counter < 20480;Local_u8Counter++)
 8001f74:	2300      	movs	r3, #0
 8001f76:	81fb      	strh	r3, [r7, #14]
 8001f78:	e010      	b.n	8001f9c <HTFT_voidFillScreen+0x74>
	{	
		/* Write the high byte */
		Data = Copy_u8Color>> 8;
 8001f7a:	88fb      	ldrh	r3, [r7, #6]
 8001f7c:	0a1b      	lsrs	r3, r3, #8
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	737b      	strb	r3, [r7, #13]
		voidWriteData(Data);
 8001f82:	7b7b      	ldrb	r3, [r7, #13]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff ff3a 	bl	8001dfe <voidWriteData>
		
		/* Write the low byte */
		Data = Copy_u8Color & 0x00ff;
 8001f8a:	88fb      	ldrh	r3, [r7, #6]
 8001f8c:	737b      	strb	r3, [r7, #13]
		voidWriteData(Data);
 8001f8e:	7b7b      	ldrb	r3, [r7, #13]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff ff34 	bl	8001dfe <voidWriteData>
	for(Local_u8Counter = 0; Local_u8Counter < 20480;Local_u8Counter++)
 8001f96:	89fb      	ldrh	r3, [r7, #14]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	81fb      	strh	r3, [r7, #14]
 8001f9c:	89fb      	ldrh	r3, [r7, #14]
 8001f9e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8001fa2:	d3ea      	bcc.n	8001f7a <HTFT_voidFillScreen+0x52>
		
		
	}
	
	
}
 8001fa4:	bf00      	nop
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <SetCursorPosition>:
static void SetCursorPosition(u8 Copy_u8X1, u8 Copy_u8Y1, u8 Copy_u8X2, u8 Copy_u8Y2)
{
 8001fac:	b590      	push	{r4, r7, lr}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4604      	mov	r4, r0
 8001fb4:	4608      	mov	r0, r1
 8001fb6:	4611      	mov	r1, r2
 8001fb8:	461a      	mov	r2, r3
 8001fba:	4623      	mov	r3, r4
 8001fbc:	71fb      	strb	r3, [r7, #7]
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	71bb      	strb	r3, [r7, #6]
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	717b      	strb	r3, [r7, #5]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	713b      	strb	r3, [r7, #4]
	
	voidWriteCommand(X_ADDRESS);
 8001fca:	202a      	movs	r0, #42	; 0x2a
 8001fcc:	f7ff ff02 	bl	8001dd4 <voidWriteCommand>
	voidWriteData(0);
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	f7ff ff14 	bl	8001dfe <voidWriteData>
	voidWriteData(Copy_u8X1);
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff ff10 	bl	8001dfe <voidWriteData>
	voidWriteData(0);
 8001fde:	2000      	movs	r0, #0
 8001fe0:	f7ff ff0d 	bl	8001dfe <voidWriteData>
	voidWriteData(Copy_u8X2);
 8001fe4:	797b      	ldrb	r3, [r7, #5]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff ff09 	bl	8001dfe <voidWriteData>
	
	voidWriteCommand(Y_ADDRESS);
 8001fec:	202b      	movs	r0, #43	; 0x2b
 8001fee:	f7ff fef1 	bl	8001dd4 <voidWriteCommand>
	voidWriteData(0);
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	f7ff ff03 	bl	8001dfe <voidWriteData>
	voidWriteData(Copy_u8Y1);
 8001ff8:	79bb      	ldrb	r3, [r7, #6]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff feff 	bl	8001dfe <voidWriteData>
	voidWriteData(0);
 8002000:	2000      	movs	r0, #0
 8002002:	f7ff fefc 	bl	8001dfe <voidWriteData>
	voidWriteData(Copy_u8Y2);
 8002006:	793b      	ldrb	r3, [r7, #4]
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff fef8 	bl	8001dfe <voidWriteData>
	
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	bd90      	pop	{r4, r7, pc}

08002016 <HTFT_DrawPixel>:
void HTFT_DrawPixel(u8 Copy_u8X, u8 Copy_u8Y, u16 Copy_u16Color)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	4603      	mov	r3, r0
 800201e:	71fb      	strb	r3, [r7, #7]
 8002020:	460b      	mov	r3, r1
 8002022:	71bb      	strb	r3, [r7, #6]
 8002024:	4613      	mov	r3, r2
 8002026:	80bb      	strh	r3, [r7, #4]
	SetCursorPosition(Copy_u8X,Copy_u8Y,Copy_u8X,Copy_u8Y);
 8002028:	79bb      	ldrb	r3, [r7, #6]
 800202a:	79fa      	ldrb	r2, [r7, #7]
 800202c:	79b9      	ldrb	r1, [r7, #6]
 800202e:	79f8      	ldrb	r0, [r7, #7]
 8002030:	f7ff ffbc 	bl	8001fac <SetCursorPosition>
	voidWriteCommand(WRITE_COMMAND);
 8002034:	202c      	movs	r0, #44	; 0x2c
 8002036:	f7ff fecd 	bl	8001dd4 <voidWriteCommand>
	voidWriteData(Copy_u16Color >> 8);
 800203a:	88bb      	ldrh	r3, [r7, #4]
 800203c:	0a1b      	lsrs	r3, r3, #8
 800203e:	b29b      	uxth	r3, r3
 8002040:	b2db      	uxtb	r3, r3
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff fedb 	bl	8001dfe <voidWriteData>
	voidWriteData(Copy_u16Color & 0x00ff);
 8002048:	88bb      	ldrh	r3, [r7, #4]
 800204a:	b2db      	uxtb	r3, r3
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff fed6 	bl	8001dfe <voidWriteData>
}
 8002052:	bf00      	nop
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HTFT_DrawLine>:
void HTFT_DrawLine(u8 Copy_u8X1, u8 Copy_u8Y1,u8 Copy_u8X2,  u8 Copy_u8Y2,u16 Copy_u16Color)
{
 800205a:	b590      	push	{r4, r7, lr}
 800205c:	b085      	sub	sp, #20
 800205e:	af02      	add	r7, sp, #8
 8002060:	4604      	mov	r4, r0
 8002062:	4608      	mov	r0, r1
 8002064:	4611      	mov	r1, r2
 8002066:	461a      	mov	r2, r3
 8002068:	4623      	mov	r3, r4
 800206a:	71fb      	strb	r3, [r7, #7]
 800206c:	4603      	mov	r3, r0
 800206e:	71bb      	strb	r3, [r7, #6]
 8002070:	460b      	mov	r3, r1
 8002072:	717b      	strb	r3, [r7, #5]
 8002074:	4613      	mov	r3, r2
 8002076:	713b      	strb	r3, [r7, #4]
	/* Vertical or horizontal line */
	HTFT_voidFill(Copy_u8X1, Copy_u8Y1, Copy_u8X2, Copy_u8Y2,Copy_u16Color);
 8002078:	793b      	ldrb	r3, [r7, #4]
 800207a:	b29c      	uxth	r4, r3
 800207c:	797a      	ldrb	r2, [r7, #5]
 800207e:	79b9      	ldrb	r1, [r7, #6]
 8002080:	79f8      	ldrb	r0, [r7, #7]
 8002082:	8b3b      	ldrh	r3, [r7, #24]
 8002084:	9300      	str	r3, [sp, #0]
 8002086:	4623      	mov	r3, r4
 8002088:	f7ff ff0e 	bl	8001ea8 <HTFT_voidFill>
	
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	bd90      	pop	{r4, r7, pc}

08002094 <HTFT_DrawRectangle>:
void HTFT_DrawRectangle(u8 Copy_u8X1, u8 Copy_u8Y1, u8 Copy_u8X2, u8 Copy_u8Y2, u16  Copy_u16Color)
{
 8002094:	b590      	push	{r4, r7, lr}
 8002096:	b085      	sub	sp, #20
 8002098:	af02      	add	r7, sp, #8
 800209a:	4604      	mov	r4, r0
 800209c:	4608      	mov	r0, r1
 800209e:	4611      	mov	r1, r2
 80020a0:	461a      	mov	r2, r3
 80020a2:	4623      	mov	r3, r4
 80020a4:	71fb      	strb	r3, [r7, #7]
 80020a6:	4603      	mov	r3, r0
 80020a8:	71bb      	strb	r3, [r7, #6]
 80020aa:	460b      	mov	r3, r1
 80020ac:	717b      	strb	r3, [r7, #5]
 80020ae:	4613      	mov	r3, r2
 80020b0:	713b      	strb	r3, [r7, #4]
	HTFT_DrawLine(Copy_u8X1, Copy_u8Y2, Copy_u8X2, Copy_u8Y2, Copy_u16Color); //Top
 80020b2:	793c      	ldrb	r4, [r7, #4]
 80020b4:	797a      	ldrb	r2, [r7, #5]
 80020b6:	7939      	ldrb	r1, [r7, #4]
 80020b8:	79f8      	ldrb	r0, [r7, #7]
 80020ba:	8b3b      	ldrh	r3, [r7, #24]
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	4623      	mov	r3, r4
 80020c0:	f7ff ffcb 	bl	800205a <HTFT_DrawLine>
	HTFT_DrawLine(Copy_u8X2, Copy_u8Y1, Copy_u8X2, Copy_u8Y2, Copy_u16Color);//Left
 80020c4:	793c      	ldrb	r4, [r7, #4]
 80020c6:	797a      	ldrb	r2, [r7, #5]
 80020c8:	79b9      	ldrb	r1, [r7, #6]
 80020ca:	7978      	ldrb	r0, [r7, #5]
 80020cc:	8b3b      	ldrh	r3, [r7, #24]
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	4623      	mov	r3, r4
 80020d2:	f7ff ffc2 	bl	800205a <HTFT_DrawLine>
	HTFT_DrawLine(Copy_u8X1, Copy_u8Y1, Copy_u8X1, Copy_u8Y2, Copy_u16Color);//Right
 80020d6:	793c      	ldrb	r4, [r7, #4]
 80020d8:	79fa      	ldrb	r2, [r7, #7]
 80020da:	79b9      	ldrb	r1, [r7, #6]
 80020dc:	79f8      	ldrb	r0, [r7, #7]
 80020de:	8b3b      	ldrh	r3, [r7, #24]
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	4623      	mov	r3, r4
 80020e4:	f7ff ffb9 	bl	800205a <HTFT_DrawLine>
	HTFT_DrawLine(Copy_u8X1, Copy_u8Y1, Copy_u8X2, Copy_u8Y1, Copy_u16Color);//Bottom
 80020e8:	79bc      	ldrb	r4, [r7, #6]
 80020ea:	797a      	ldrb	r2, [r7, #5]
 80020ec:	79b9      	ldrb	r1, [r7, #6]
 80020ee:	79f8      	ldrb	r0, [r7, #7]
 80020f0:	8b3b      	ldrh	r3, [r7, #24]
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	4623      	mov	r3, r4
 80020f6:	f7ff ffb0 	bl	800205a <HTFT_DrawLine>
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd90      	pop	{r4, r7, pc}
	...

08002104 <HTFT_DrawChar>:
void HTFT_DrawChar(char Character, u8 Copy_u8X, u8 Copy_u8Y, u16 Copy_u16Color)
{
 8002104:	b590      	push	{r4, r7, lr}
 8002106:	b087      	sub	sp, #28
 8002108:	af00      	add	r7, sp, #0
 800210a:	4604      	mov	r4, r0
 800210c:	4608      	mov	r0, r1
 800210e:	4611      	mov	r1, r2
 8002110:	461a      	mov	r2, r3
 8002112:	4623      	mov	r3, r4
 8002114:	71fb      	strb	r3, [r7, #7]
 8002116:	4603      	mov	r3, r0
 8002118:	71bb      	strb	r3, [r7, #6]
 800211a:	460b      	mov	r3, r1
 800211c:	717b      	strb	r3, [r7, #5]
 800211e:	4613      	mov	r3, r2
 8002120:	807b      	strh	r3, [r7, #2]
	u8 	Local_u8Char;
    u8 	i,j;

    Local_u8Char = Character;
 8002122:	79fb      	ldrb	r3, [r7, #7]
 8002124:	75fb      	strb	r3, [r7, #23]

    if (Local_u8Char < ' ')
 8002126:	7dfb      	ldrb	r3, [r7, #23]
 8002128:	2b1f      	cmp	r3, #31
 800212a:	d802      	bhi.n	8002132 <HTFT_DrawChar+0x2e>
    {
        Character = 0;
 800212c:	2300      	movs	r3, #0
 800212e:	71fb      	strb	r3, [r7, #7]
 8002130:	e002      	b.n	8002138 <HTFT_DrawChar+0x34>
    }
    else
    {
    	Local_u8Char -= 32;
 8002132:	7dfb      	ldrb	r3, [r7, #23]
 8002134:	3b20      	subs	r3, #32
 8002136:	75fb      	strb	r3, [r7, #23]
	}

	char temp[CHAR_WIDTH];
	for(u8 k = 0; k<CHAR_WIDTH; k++)
 8002138:	2300      	movs	r3, #0
 800213a:	753b      	strb	r3, [r7, #20]
 800213c:	e012      	b.n	8002164 <HTFT_DrawChar+0x60>
	{
		temp[k] = font[Local_u8Char][k];
 800213e:	7d39      	ldrb	r1, [r7, #20]
 8002140:	7dfa      	ldrb	r2, [r7, #23]
 8002142:	7d38      	ldrb	r0, [r7, #20]
 8002144:	4c21      	ldr	r4, [pc, #132]	; (80021cc <HTFT_DrawChar+0xc8>)
 8002146:	4613      	mov	r3, r2
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	4413      	add	r3, r2
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	4423      	add	r3, r4
 8002150:	4403      	add	r3, r0
 8002152:	781a      	ldrb	r2, [r3, #0]
 8002154:	f107 0318 	add.w	r3, r7, #24
 8002158:	440b      	add	r3, r1
 800215a:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(u8 k = 0; k<CHAR_WIDTH; k++)
 800215e:	7d3b      	ldrb	r3, [r7, #20]
 8002160:	3301      	adds	r3, #1
 8002162:	753b      	strb	r3, [r7, #20]
 8002164:	7d3b      	ldrb	r3, [r7, #20]
 8002166:	2b05      	cmp	r3, #5
 8002168:	d9e9      	bls.n	800213e <HTFT_DrawChar+0x3a>
	}

    for (j=0; j<CHAR_WIDTH; j++)
 800216a:	2300      	movs	r3, #0
 800216c:	757b      	strb	r3, [r7, #21]
 800216e:	e025      	b.n	80021bc <HTFT_DrawChar+0xb8>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 8002170:	2300      	movs	r3, #0
 8002172:	75bb      	strb	r3, [r7, #22]
 8002174:	e01c      	b.n	80021b0 <HTFT_DrawChar+0xac>
        {
            if (temp[j] & (1<<i))
 8002176:	7d7b      	ldrb	r3, [r7, #21]
 8002178:	f107 0218 	add.w	r2, r7, #24
 800217c:	4413      	add	r3, r2
 800217e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002182:	461a      	mov	r2, r3
 8002184:	7dbb      	ldrb	r3, [r7, #22]
 8002186:	fa42 f303 	asr.w	r3, r2, r3
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00b      	beq.n	80021aa <HTFT_DrawChar+0xa6>
            {
            	HTFT_DrawPixel(Copy_u8X+j, Copy_u8Y+i, Copy_u16Color);
 8002192:	79ba      	ldrb	r2, [r7, #6]
 8002194:	7d7b      	ldrb	r3, [r7, #21]
 8002196:	4413      	add	r3, r2
 8002198:	b2d8      	uxtb	r0, r3
 800219a:	797a      	ldrb	r2, [r7, #5]
 800219c:	7dbb      	ldrb	r3, [r7, #22]
 800219e:	4413      	add	r3, r2
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	887a      	ldrh	r2, [r7, #2]
 80021a4:	4619      	mov	r1, r3
 80021a6:	f7ff ff36 	bl	8002016 <HTFT_DrawPixel>
        for (i=0; i<CHAR_HEIGHT; i++)
 80021aa:	7dbb      	ldrb	r3, [r7, #22]
 80021ac:	3301      	adds	r3, #1
 80021ae:	75bb      	strb	r3, [r7, #22]
 80021b0:	7dbb      	ldrb	r3, [r7, #22]
 80021b2:	2b07      	cmp	r3, #7
 80021b4:	d9df      	bls.n	8002176 <HTFT_DrawChar+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 80021b6:	7d7b      	ldrb	r3, [r7, #21]
 80021b8:	3301      	adds	r3, #1
 80021ba:	757b      	strb	r3, [r7, #21]
 80021bc:	7d7b      	ldrb	r3, [r7, #21]
 80021be:	2b05      	cmp	r3, #5
 80021c0:	d9d6      	bls.n	8002170 <HTFT_DrawChar+0x6c>
            }
        }
    }
}
 80021c2:	bf00      	nop
 80021c4:	371c      	adds	r7, #28
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd90      	pop	{r4, r7, pc}
 80021ca:	bf00      	nop
 80021cc:	08004424 	.word	0x08004424

080021d0 <HTFT_DrawText>:
void HTFT_DrawText(const char* Text, u8 Copy_u8X, u8 Copy_u8Y, u16 Copy_u16Color)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	4608      	mov	r0, r1
 80021da:	4611      	mov	r1, r2
 80021dc:	461a      	mov	r2, r3
 80021de:	4603      	mov	r3, r0
 80021e0:	70fb      	strb	r3, [r7, #3]
 80021e2:	460b      	mov	r3, r1
 80021e4:	70bb      	strb	r3, [r7, #2]
 80021e6:	4613      	mov	r3, r2
 80021e8:	803b      	strh	r3, [r7, #0]
    while (*Text)
 80021ea:	e00b      	b.n	8002204 <HTFT_DrawText+0x34>
    {
    	HTFT_DrawChar(*Text++, Copy_u8X, Copy_u8Y,Copy_u16Color);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	1c5a      	adds	r2, r3, #1
 80021f0:	607a      	str	r2, [r7, #4]
 80021f2:	7818      	ldrb	r0, [r3, #0]
 80021f4:	883b      	ldrh	r3, [r7, #0]
 80021f6:	78ba      	ldrb	r2, [r7, #2]
 80021f8:	78f9      	ldrb	r1, [r7, #3]
 80021fa:	f7ff ff83 	bl	8002104 <HTFT_DrawChar>
        Copy_u8X += CHAR_WIDTH;
 80021fe:	78fb      	ldrb	r3, [r7, #3]
 8002200:	3306      	adds	r3, #6
 8002202:	70fb      	strb	r3, [r7, #3]
    while (*Text)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1ef      	bne.n	80021ec <HTFT_DrawText+0x1c>
    }
}
 800220c:	bf00      	nop
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <HTFT_SetRotation>:
        }
    }
}

void HTFT_SetRotation(u8 Copy_u8Rotation )
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	71fb      	strb	r3, [r7, #7]
	u8 data;
	switch (Copy_u8Rotation)
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d002      	beq.n	800222a <HTFT_SetRotation+0x16>
 8002224:	2b01      	cmp	r3, #1
 8002226:	d003      	beq.n	8002230 <HTFT_SetRotation+0x1c>
 8002228:	e005      	b.n	8002236 <HTFT_SetRotation+0x22>
	{
	case vertical:
		data = MADCTL_MX | MADCTL_MY;
 800222a:	23c0      	movs	r3, #192	; 0xc0
 800222c:	73fb      	strb	r3, [r7, #15]
		break;
 800222e:	e002      	b.n	8002236 <HTFT_SetRotation+0x22>
	case Horizontal:
		data = MADCTL_MY | MADCTL_MV;
 8002230:	23a0      	movs	r3, #160	; 0xa0
 8002232:	73fb      	strb	r3, [r7, #15]
		break;
 8002234:	bf00      	nop
	}

	voidWriteCommand(MADCTL);
 8002236:	2036      	movs	r0, #54	; 0x36
 8002238:	f7ff fdcc 	bl	8001dd4 <voidWriteCommand>
	voidWriteData(data);
 800223c:	7bfb      	ldrb	r3, [r7, #15]
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff fddd 	bl	8001dfe <voidWriteData>

}
 8002244:	bf00      	nop
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <MTIMER2_voidInit>:
{
	HHH=func;
}

void MTIMER2_voidInit()
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
		TIMER2->PSC = 23999;
		TIMER2->ARR = 1000;
		TIMER2->CR1 = 1;
		*/

	TIMER2->CCMR2 = (1<<8);
 8002250:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002254:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002258:	61da      	str	r2, [r3, #28]
	

	TIMER2->CCER = 1<<12;
 800225a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800225e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002262:	621a      	str	r2, [r3, #32]
	

	TIMER2->PSC = 0;
 8002264:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002268:	2200      	movs	r2, #0
 800226a:	629a      	str	r2, [r3, #40]	; 0x28

	TIMER2->CR1 = 1;
 800226c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002270:	2201      	movs	r2, #1
 8002272:	601a      	str	r2, [r3, #0]

}
 8002274:	bf00      	nop
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr

0800227c <MTIMER2_voidClearFlags>:

void MTIMER2_voidClearFlags(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
	TIMER2->SR = 0;
 8002280:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002284:	2200      	movs	r2, #0
 8002286:	611a      	str	r2, [r3, #16]
}
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr

08002290 <MTIMER2_u16ReadCapture>:

u16 MTIMER2_u16ReadCapture(u8 Copy_u8Channel)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	71fb      	strb	r3, [r7, #7]
	if (Copy_u8Channel == 1)
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d104      	bne.n	80022aa <MTIMER2_u16ReadCapture+0x1a>
		return TIMER2->CCR1;
 80022a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	e018      	b.n	80022dc <MTIMER2_u16ReadCapture+0x4c>
	else if (Copy_u8Channel == 2)
 80022aa:	79fb      	ldrb	r3, [r7, #7]
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d104      	bne.n	80022ba <MTIMER2_u16ReadCapture+0x2a>
		return TIMER2->CCR2;
 80022b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	e010      	b.n	80022dc <MTIMER2_u16ReadCapture+0x4c>
	else if (Copy_u8Channel == 3)
 80022ba:	79fb      	ldrb	r3, [r7, #7]
 80022bc:	2b03      	cmp	r3, #3
 80022be:	d104      	bne.n	80022ca <MTIMER2_u16ReadCapture+0x3a>
		return TIMER2->CCR3;
 80022c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	e008      	b.n	80022dc <MTIMER2_u16ReadCapture+0x4c>
	else if (Copy_u8Channel == 4)
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	2b04      	cmp	r3, #4
 80022ce:	d104      	bne.n	80022da <MTIMER2_u16ReadCapture+0x4a>
		return TIMER2->CCR4;
 80022d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	e000      	b.n	80022dc <MTIMER2_u16ReadCapture+0x4c>
	else 
		return 0;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bc80      	pop	{r7}
 80022e4:	4770      	bx	lr
	...

080022e8 <MTIMER2_voidSetCallBack>:

void MTIMER2_voidSetCallBack(u8 Copy_u8Interrupt, void (*Copy_ptrCall)(void))
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	6039      	str	r1, [r7, #0]
 80022f2:	71fb      	strb	r3, [r7, #7]
	if (Copy_u8Interrupt == TIMER2_UPDATE_INTERRUPT)
 80022f4:	79fb      	ldrb	r3, [r7, #7]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d103      	bne.n	8002302 <MTIMER2_voidSetCallBack+0x1a>
		UpdateCall = Copy_ptrCall;
 80022fa:	4a14      	ldr	r2, [pc, #80]	; (800234c <MTIMER2_voidSetCallBack+0x64>)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	6013      	str	r3, [r2, #0]
		CaptureCompareCall[Copy_u8Interrupt-1] = Copy_ptrCall;
	else if (Copy_u8Interrupt == TIMER2_TRIGGER_INTERRUPT)
		TriggerCall = Copy_ptrCall;
	else if (Copy_u8Interrupt>=TIMER2_CH1_OVCAPT && Copy_u8Interrupt<=TIMER2_CH4_OVCAPT)
		OverCaptureCompareCall[Copy_u8Interrupt-9]=Copy_ptrCall;
}
 8002300:	e01f      	b.n	8002342 <MTIMER2_voidSetCallBack+0x5a>
	else if (Copy_u8Interrupt>=TIMER2_CH1_CAPT && Copy_u8Interrupt<=TIMER2_CH4_CAPT)
 8002302:	79fb      	ldrb	r3, [r7, #7]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d009      	beq.n	800231c <MTIMER2_voidSetCallBack+0x34>
 8002308:	79fb      	ldrb	r3, [r7, #7]
 800230a:	2b04      	cmp	r3, #4
 800230c:	d806      	bhi.n	800231c <MTIMER2_voidSetCallBack+0x34>
		CaptureCompareCall[Copy_u8Interrupt-1] = Copy_ptrCall;
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	3b01      	subs	r3, #1
 8002312:	490f      	ldr	r1, [pc, #60]	; (8002350 <MTIMER2_voidSetCallBack+0x68>)
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800231a:	e012      	b.n	8002342 <MTIMER2_voidSetCallBack+0x5a>
	else if (Copy_u8Interrupt == TIMER2_TRIGGER_INTERRUPT)
 800231c:	79fb      	ldrb	r3, [r7, #7]
 800231e:	2b06      	cmp	r3, #6
 8002320:	d103      	bne.n	800232a <MTIMER2_voidSetCallBack+0x42>
		TriggerCall = Copy_ptrCall;
 8002322:	4a0c      	ldr	r2, [pc, #48]	; (8002354 <MTIMER2_voidSetCallBack+0x6c>)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	6013      	str	r3, [r2, #0]
}
 8002328:	e00b      	b.n	8002342 <MTIMER2_voidSetCallBack+0x5a>
	else if (Copy_u8Interrupt>=TIMER2_CH1_OVCAPT && Copy_u8Interrupt<=TIMER2_CH4_OVCAPT)
 800232a:	79fb      	ldrb	r3, [r7, #7]
 800232c:	2b08      	cmp	r3, #8
 800232e:	d908      	bls.n	8002342 <MTIMER2_voidSetCallBack+0x5a>
 8002330:	79fb      	ldrb	r3, [r7, #7]
 8002332:	2b0c      	cmp	r3, #12
 8002334:	d805      	bhi.n	8002342 <MTIMER2_voidSetCallBack+0x5a>
		OverCaptureCompareCall[Copy_u8Interrupt-9]=Copy_ptrCall;
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	3b09      	subs	r3, #9
 800233a:	4907      	ldr	r1, [pc, #28]	; (8002358 <MTIMER2_voidSetCallBack+0x70>)
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr
 800234c:	200000f8 	.word	0x200000f8
 8002350:	200000d8 	.word	0x200000d8
 8002354:	200000fc 	.word	0x200000fc
 8002358:	200000e8 	.word	0x200000e8

0800235c <MTIMER2_voidEnableInterrupt>:

void MTIMER2_voidEnableInterrupt(u8 Copy_u8Interrupt)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	71fb      	strb	r3, [r7, #7]
	TIMER2->DIER |= 1<<Copy_u8Interrupt;
 8002366:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800236a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	79fa      	ldrb	r2, [r7, #7]
 8002372:	2001      	movs	r0, #1
 8002374:	fa00 f202 	lsl.w	r2, r0, r2
 8002378:	4313      	orrs	r3, r2
 800237a:	60cb      	str	r3, [r1, #12]
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	bc80      	pop	{r7}
 8002384:	4770      	bx	lr

08002386 <MTIMER2_voidDisableInterrupt>:

void MTIMER2_voidDisableInterrupt(u8 Copy_u8Interrupt)
{
 8002386:	b480      	push	{r7}
 8002388:	b083      	sub	sp, #12
 800238a:	af00      	add	r7, sp, #0
 800238c:	4603      	mov	r3, r0
 800238e:	71fb      	strb	r3, [r7, #7]
	TIMER2->DIER &= ~(1<<Copy_u8Interrupt);
 8002390:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002394:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	79fa      	ldrb	r2, [r7, #7]
 800239c:	2001      	movs	r0, #1
 800239e:	fa00 f202 	lsl.w	r2, r0, r2
 80023a2:	43d2      	mvns	r2, r2
 80023a4:	4013      	ands	r3, r2
 80023a6:	60cb      	str	r3, [r1, #12]
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bc80      	pop	{r7}
 80023b0:	4770      	bx	lr

080023b2 <MTIMER2_voidClearCounter>:
void MTIMER2_voidClearCounter(void)
{
 80023b2:	b480      	push	{r7}
 80023b4:	af00      	add	r7, sp, #0
	TIMER2->CNT =0;
 80023b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023ba:	2200      	movs	r2, #0
 80023bc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80023be:	bf00      	nop
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bc80      	pop	{r7}
 80023c4:	4770      	bx	lr
	...

080023c8 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
	if (GET_BIT(TIMER2->SR,0))
 80023cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00f      	beq.n	80023fa <TIM2_IRQHandler+0x32>
	{
		if(UpdateCall !=0)
 80023da:	4b74      	ldr	r3, [pc, #464]	; (80025ac <TIM2_IRQHandler+0x1e4>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d002      	beq.n	80023e8 <TIM2_IRQHandler+0x20>
			UpdateCall();
 80023e2:	4b72      	ldr	r3, [pc, #456]	; (80025ac <TIM2_IRQHandler+0x1e4>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4798      	blx	r3
		CLR_BIT(TIMER2->SR,0);
 80023e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	f023 0301 	bic.w	r3, r3, #1
 80023f6:	6113      	str	r3, [r2, #16]
		{
			if(OverCaptureCompareCall[3] !=0)
				OverCaptureCompareCall[3]();
			CLR_BIT(TIMER2->SR,12);
		}
}
 80023f8:	e0d6      	b.n	80025a8 <TIM2_IRQHandler+0x1e0>
	else if(GET_BIT(TIMER2->SR,1))
 80023fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	085b      	lsrs	r3, r3, #1
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00f      	beq.n	800242a <TIM2_IRQHandler+0x62>
		if(CaptureCompareCall[0] !=0)
 800240a:	4b69      	ldr	r3, [pc, #420]	; (80025b0 <TIM2_IRQHandler+0x1e8>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d002      	beq.n	8002418 <TIM2_IRQHandler+0x50>
			CaptureCompareCall[0]();
 8002412:	4b67      	ldr	r3, [pc, #412]	; (80025b0 <TIM2_IRQHandler+0x1e8>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4798      	blx	r3
		CLR_BIT(TIMER2->SR,1);
 8002418:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800241c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	f023 0302 	bic.w	r3, r3, #2
 8002426:	6113      	str	r3, [r2, #16]
}
 8002428:	e0be      	b.n	80025a8 <TIM2_IRQHandler+0x1e0>
	else if(GET_BIT(TIMER2->SR,2))
 800242a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	089b      	lsrs	r3, r3, #2
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00f      	beq.n	800245a <TIM2_IRQHandler+0x92>
			if(CaptureCompareCall[1] !=0)
 800243a:	4b5d      	ldr	r3, [pc, #372]	; (80025b0 <TIM2_IRQHandler+0x1e8>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d002      	beq.n	8002448 <TIM2_IRQHandler+0x80>
				CaptureCompareCall[1]();
 8002442:	4b5b      	ldr	r3, [pc, #364]	; (80025b0 <TIM2_IRQHandler+0x1e8>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	4798      	blx	r3
			CLR_BIT(TIMER2->SR,2);
 8002448:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800244c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	f023 0304 	bic.w	r3, r3, #4
 8002456:	6113      	str	r3, [r2, #16]
}
 8002458:	e0a6      	b.n	80025a8 <TIM2_IRQHandler+0x1e0>
	else if(GET_BIT(TIMER2->SR,3))
 800245a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	08db      	lsrs	r3, r3, #3
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00f      	beq.n	800248a <TIM2_IRQHandler+0xc2>
			if(CaptureCompareCall[2] !=0)
 800246a:	4b51      	ldr	r3, [pc, #324]	; (80025b0 <TIM2_IRQHandler+0x1e8>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d002      	beq.n	8002478 <TIM2_IRQHandler+0xb0>
				CaptureCompareCall[2]();
 8002472:	4b4f      	ldr	r3, [pc, #316]	; (80025b0 <TIM2_IRQHandler+0x1e8>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	4798      	blx	r3
			CLR_BIT(TIMER2->SR,3);
 8002478:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800247c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	f023 0308 	bic.w	r3, r3, #8
 8002486:	6113      	str	r3, [r2, #16]
}
 8002488:	e08e      	b.n	80025a8 <TIM2_IRQHandler+0x1e0>
	else if (GET_BIT(TIMER2->SR,4))
 800248a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	091b      	lsrs	r3, r3, #4
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00f      	beq.n	80024ba <TIM2_IRQHandler+0xf2>
		if (CaptureCompareCall[3] !=0)
 800249a:	4b45      	ldr	r3, [pc, #276]	; (80025b0 <TIM2_IRQHandler+0x1e8>)
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d002      	beq.n	80024a8 <TIM2_IRQHandler+0xe0>
				CaptureCompareCall[3]();
 80024a2:	4b43      	ldr	r3, [pc, #268]	; (80025b0 <TIM2_IRQHandler+0x1e8>)
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	4798      	blx	r3
		CLR_BIT(TIMER2->SR,4);
 80024a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	f023 0310 	bic.w	r3, r3, #16
 80024b6:	6113      	str	r3, [r2, #16]
}
 80024b8:	e076      	b.n	80025a8 <TIM2_IRQHandler+0x1e0>
	else if(GET_BIT(TIMER2->SR,6))
 80024ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	099b      	lsrs	r3, r3, #6
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00f      	beq.n	80024ea <TIM2_IRQHandler+0x122>
			if(TriggerCall !=0)
 80024ca:	4b3a      	ldr	r3, [pc, #232]	; (80025b4 <TIM2_IRQHandler+0x1ec>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d002      	beq.n	80024d8 <TIM2_IRQHandler+0x110>
				TriggerCall();
 80024d2:	4b38      	ldr	r3, [pc, #224]	; (80025b4 <TIM2_IRQHandler+0x1ec>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4798      	blx	r3
			CLR_BIT(TIMER2->SR,6);
 80024d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024e6:	6113      	str	r3, [r2, #16]
}
 80024e8:	e05e      	b.n	80025a8 <TIM2_IRQHandler+0x1e0>
	else if(GET_BIT(TIMER2->SR,9))
 80024ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	0a5b      	lsrs	r3, r3, #9
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00f      	beq.n	800251a <TIM2_IRQHandler+0x152>
			if(OverCaptureCompareCall[0] !=0)
 80024fa:	4b2f      	ldr	r3, [pc, #188]	; (80025b8 <TIM2_IRQHandler+0x1f0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d002      	beq.n	8002508 <TIM2_IRQHandler+0x140>
				OverCaptureCompareCall[0]();
 8002502:	4b2d      	ldr	r3, [pc, #180]	; (80025b8 <TIM2_IRQHandler+0x1f0>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4798      	blx	r3
			CLR_BIT(TIMER2->SR,9);
 8002508:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800250c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002516:	6113      	str	r3, [r2, #16]
}
 8002518:	e046      	b.n	80025a8 <TIM2_IRQHandler+0x1e0>
	else if(GET_BIT(TIMER2->SR,10))
 800251a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	0a9b      	lsrs	r3, r3, #10
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00f      	beq.n	800254a <TIM2_IRQHandler+0x182>
			if(OverCaptureCompareCall[1] !=0)
 800252a:	4b23      	ldr	r3, [pc, #140]	; (80025b8 <TIM2_IRQHandler+0x1f0>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d002      	beq.n	8002538 <TIM2_IRQHandler+0x170>
				OverCaptureCompareCall[1]();
 8002532:	4b21      	ldr	r3, [pc, #132]	; (80025b8 <TIM2_IRQHandler+0x1f0>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	4798      	blx	r3
			CLR_BIT(TIMER2->SR,10);
 8002538:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800253c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002546:	6113      	str	r3, [r2, #16]
}
 8002548:	e02e      	b.n	80025a8 <TIM2_IRQHandler+0x1e0>
	else if(GET_BIT(TIMER2->SR,11))
 800254a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	0adb      	lsrs	r3, r3, #11
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00f      	beq.n	800257a <TIM2_IRQHandler+0x1b2>
			if(OverCaptureCompareCall[2] !=0)
 800255a:	4b17      	ldr	r3, [pc, #92]	; (80025b8 <TIM2_IRQHandler+0x1f0>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d002      	beq.n	8002568 <TIM2_IRQHandler+0x1a0>
				OverCaptureCompareCall[2]();
 8002562:	4b15      	ldr	r3, [pc, #84]	; (80025b8 <TIM2_IRQHandler+0x1f0>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	4798      	blx	r3
			CLR_BIT(TIMER2->SR,11);
 8002568:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800256c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002576:	6113      	str	r3, [r2, #16]
}
 8002578:	e016      	b.n	80025a8 <TIM2_IRQHandler+0x1e0>
	else if(GET_BIT(TIMER2->SR,12))
 800257a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	0b1b      	lsrs	r3, r3, #12
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00e      	beq.n	80025a8 <TIM2_IRQHandler+0x1e0>
			if(OverCaptureCompareCall[3] !=0)
 800258a:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <TIM2_IRQHandler+0x1f0>)
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d002      	beq.n	8002598 <TIM2_IRQHandler+0x1d0>
				OverCaptureCompareCall[3]();
 8002592:	4b09      	ldr	r3, [pc, #36]	; (80025b8 <TIM2_IRQHandler+0x1f0>)
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	4798      	blx	r3
			CLR_BIT(TIMER2->SR,12);
 8002598:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800259c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025a6:	6113      	str	r3, [r2, #16]
}
 80025a8:	bf00      	nop
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	200000f8 	.word	0x200000f8
 80025b0:	200000d8 	.word	0x200000d8
 80025b4:	200000fc 	.word	0x200000fc
 80025b8:	200000e8 	.word	0x200000e8

080025bc <main>:
void Map (s16 *ValueArr,u8 n, s16 a1, s16 a2, s16 b1, s16 b2);
u16 average(volatile u16 *L,u8 N_Elements);


int main(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b0d6      	sub	sp, #344	; 0x158
 80025c0:	af00      	add	r7, sp, #0
	/*Enable Peripherals from RCC*/
	Peripheral_Enable();
 80025c2:	f000 fa53 	bl	8002a6c <Peripheral_Enable>

	/*PIN INIT*/
	Pin_init();
 80025c6:	f000 fa6f 	bl	8002aa8 <Pin_init>

	/*STK INIT*/
	MSTK_voidInit();
 80025ca:	f7ff fb9d 	bl	8001d08 <MSTK_voidInit>

	/*SPI INIT*/
	MSPI2_voidInit();
 80025ce:	f7ff fb69 	bl	8001ca4 <MSPI2_voidInit>

	/*TFT INIT*/
	HTFT_voidInit();
 80025d2:	f7ff fc29 	bl	8001e28 <HTFT_voidInit>

	/*Start Oscilloscope Screen*/
	Start_Oscilloscope();
 80025d6:	f000 fb43 	bl	8002c60 <Start_Oscilloscope>

	/*ACD INIT*/
	MADC_voidInit();
 80025da:	f7fe fdb3 	bl	8001144 <MADC_voidInit>

	/*Configure The External Interrupts*/
	ExternalInterruptConfig();
 80025de:	f000 faa3 	bl	8002b28 <ExternalInterruptConfig>

	/*Timer2 INIT*/
	MTIMER2_voidInit();
 80025e2:	f7ff fe33 	bl	800224c <MTIMER2_voidInit>

	/*Set Ch4 Capture Interrupt CallBack*/
	MTIMER2_voidSetCallBack(TIMER2_CH4_CAPT,MeasureFrequency);
 80025e6:	4910      	ldr	r1, [pc, #64]	; (8002628 <main+0x6c>)
 80025e8:	2004      	movs	r0, #4
 80025ea:	f7ff fe7d 	bl	80022e8 <MTIMER2_voidSetCallBack>

	/*Full Re-map for Timer2 Pins*/
	MAFIO_voidRemap(AFIO_TIM2,AFIO_MODE3);
 80025ee:	2103      	movs	r1, #3
 80025f0:	2008      	movs	r0, #8
 80025f2:	f7fe fe5f 	bl	80012b4 <MAFIO_voidRemap>

	/*NVIC INIT*/
	MNVIC_voidInit();
 80025f6:	f7ff fa7d 	bl	8001af4 <MNVIC_voidInit>

	/*Enable All Interrupts*/
	EnableInterrupts();
 80025fa:	f000 fad1 	bl	8002ba0 <EnableInterrupts>


	while (1)
	{
		//Read Record
		Read_Record(Record);
 80025fe:	f107 0318 	add.w	r3, r7, #24
 8002602:	4618      	mov	r0, r3
 8002604:	f000 f8bc 	bl	8002780 <Read_Record>

		//Process Record
		Process_Record(Record, Stats);
 8002608:	1d3a      	adds	r2, r7, #4
 800260a:	f107 0318 	add.w	r3, r7, #24
 800260e:	4611      	mov	r1, r2
 8002610:	4618      	mov	r0, r3
 8002612:	f000 f80b 	bl	800262c <Process_Record>

		//Display record
		Display_Record(Record, Stats);
 8002616:	1d3a      	adds	r2, r7, #4
 8002618:	f107 0318 	add.w	r3, r7, #24
 800261c:	4611      	mov	r1, r2
 800261e:	4618      	mov	r0, r3
 8002620:	f000 f90e 	bl	8002840 <Display_Record>
		Read_Record(Record);
 8002624:	e7eb      	b.n	80025fe <main+0x42>
 8002626:	bf00      	nop
 8002628:	08002c0d 	.word	0x08002c0d

0800262c <Process_Record>:
	}
}

void Process_Record(s16 *Record, f32 *Stats)
{
 800262c:	b590      	push	{r4, r7, lr}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
	Stats[0] = Stats[1] = Record[0];
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	1d1c      	adds	r4, r3, #4
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002640:	4618      	mov	r0, r3
 8002642:	f7fe fb1f 	bl	8000c84 <__aeabi_i2f>
 8002646:	4603      	mov	r3, r0
 8002648:	6023      	str	r3, [r4, #0]
 800264a:	6822      	ldr	r2, [r4, #0]
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	601a      	str	r2, [r3, #0]
	for (u8 i= 0; i<158; i++)
 8002650:	2300      	movs	r3, #0
 8002652:	73fb      	strb	r3, [r7, #15]
 8002654:	e05d      	b.n	8002712 <Process_Record+0xe6>
	{
		if (Stats[0] < Record[i])
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681c      	ldr	r4, [r3, #0]
 800265a:	7bfb      	ldrb	r3, [r7, #15]
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	4413      	add	r3, r2
 8002662:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002666:	4618      	mov	r0, r3
 8002668:	f7fe fb0c 	bl	8000c84 <__aeabi_i2f>
 800266c:	4603      	mov	r3, r0
 800266e:	4619      	mov	r1, r3
 8002670:	4620      	mov	r0, r4
 8002672:	f7fe fcf9 	bl	8001068 <__aeabi_fcmplt>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00b      	beq.n	8002694 <Process_Record+0x68>
			Stats[0] = Record[i];
 800267c:	7bfb      	ldrb	r3, [r7, #15]
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	4413      	add	r3, r2
 8002684:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002688:	4618      	mov	r0, r3
 800268a:	f7fe fafb 	bl	8000c84 <__aeabi_i2f>
 800268e:	4602      	mov	r2, r0
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	601a      	str	r2, [r3, #0]
		if (Stats[1] > Record[i])
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	3304      	adds	r3, #4
 8002698:	681c      	ldr	r4, [r3, #0]
 800269a:	7bfb      	ldrb	r3, [r7, #15]
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	4413      	add	r3, r2
 80026a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7fe faec 	bl	8000c84 <__aeabi_i2f>
 80026ac:	4603      	mov	r3, r0
 80026ae:	4619      	mov	r1, r3
 80026b0:	4620      	mov	r0, r4
 80026b2:	f7fe fcf7 	bl	80010a4 <__aeabi_fcmpgt>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00c      	beq.n	80026d6 <Process_Record+0xaa>
			Stats[1] = Record[i];
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	1d1c      	adds	r4, r3, #4
 80026c0:	7bfb      	ldrb	r3, [r7, #15]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	4413      	add	r3, r2
 80026c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7fe fad9 	bl	8000c84 <__aeabi_i2f>
 80026d2:	4603      	mov	r3, r0
 80026d4:	6023      	str	r3, [r4, #0]
		Record[i] *= VOLTAGE_DIVISION;
 80026d6:	7bfb      	ldrb	r3, [r7, #15]
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	18d4      	adds	r4, r2, r3
 80026de:	7bfb      	ldrb	r3, [r7, #15]
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	4413      	add	r3, r2
 80026e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7fe faca 	bl	8000c84 <__aeabi_i2f>
 80026f0:	4602      	mov	r2, r0
 80026f2:	4b20      	ldr	r3, [pc, #128]	; (8002774 <Process_Record+0x148>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4619      	mov	r1, r3
 80026f8:	4610      	mov	r0, r2
 80026fa:	f7fe fb17 	bl	8000d2c <__aeabi_fmul>
 80026fe:	4603      	mov	r3, r0
 8002700:	4618      	mov	r0, r3
 8002702:	f7fe fcd9 	bl	80010b8 <__aeabi_f2iz>
 8002706:	4603      	mov	r3, r0
 8002708:	b21b      	sxth	r3, r3
 800270a:	8023      	strh	r3, [r4, #0]
	for (u8 i= 0; i<158; i++)
 800270c:	7bfb      	ldrb	r3, [r7, #15]
 800270e:	3301      	adds	r3, #1
 8002710:	73fb      	strb	r3, [r7, #15]
 8002712:	7bfb      	ldrb	r3, [r7, #15]
 8002714:	2b9d      	cmp	r3, #157	; 0x9d
 8002716:	d99e      	bls.n	8002656 <Process_Record+0x2a>
	}

	u16 i = 0xFFFF;
 8002718:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800271c:	81bb      	strh	r3, [r7, #12]
	MTIMER2_voidClearFlags();
 800271e:	f7ff fdad 	bl	800227c <MTIMER2_voidClearFlags>
	MTIMER2_voidEnableInterrupt(TIMER2_CH4_CAPT);
 8002722:	2004      	movs	r0, #4
 8002724:	f7ff fe1a 	bl	800235c <MTIMER2_voidEnableInterrupt>
	while(!FrequencyMeasured && --i);
 8002728:	bf00      	nop
 800272a:	4b13      	ldr	r3, [pc, #76]	; (8002778 <Process_Record+0x14c>)
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d105      	bne.n	800273e <Process_Record+0x112>
 8002732:	89bb      	ldrh	r3, [r7, #12]
 8002734:	3b01      	subs	r3, #1
 8002736:	81bb      	strh	r3, [r7, #12]
 8002738:	89bb      	ldrh	r3, [r7, #12]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1f5      	bne.n	800272a <Process_Record+0xfe>
	FrequencyMeasured = 0;
 800273e:	4b0e      	ldr	r3, [pc, #56]	; (8002778 <Process_Record+0x14c>)
 8002740:	2200      	movs	r2, #0
 8002742:	701a      	strb	r2, [r3, #0]
	MTIMER2_voidDisableInterrupt(TIMER2_CH4_CAPT);
 8002744:	2004      	movs	r0, #4
 8002746:	f7ff fe1e 	bl	8002386 <MTIMER2_voidDisableInterrupt>
	if (i == 0)
 800274a:	89bb      	ldrh	r3, [r7, #12]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d102      	bne.n	8002756 <Process_Record+0x12a>
		SignalFrequency = 0;
 8002750:	4b0a      	ldr	r3, [pc, #40]	; (800277c <Process_Record+0x150>)
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]
	Stats[2] = SignalFrequency;
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	f103 0408 	add.w	r4, r3, #8
 800275c:	4b07      	ldr	r3, [pc, #28]	; (800277c <Process_Record+0x150>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f7fe fa8b 	bl	8000c7c <__aeabi_ui2f>
 8002766:	4603      	mov	r3, r0
 8002768:	6023      	str	r3, [r4, #0]

}
 800276a:	bf00      	nop
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	bd90      	pop	{r4, r7, pc}
 8002772:	bf00      	nop
 8002774:	20000004 	.word	0x20000004
 8002778:	20000100 	.word	0x20000100
 800277c:	20000104 	.word	0x20000104

08002780 <Read_Record>:

void Read_Record(s16 * Record)
{
 8002780:	b590      	push	{r4, r7, lr}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
	if (TIME_DIVISION <= 0 )
 8002788:	4b2c      	ldr	r3, [pc, #176]	; (800283c <Read_Record+0xbc>)
 800278a:	881b      	ldrh	r3, [r3, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d102      	bne.n	8002796 <Read_Record+0x16>
		TIME_DIVISION = 1;
 8002790:	4b2a      	ldr	r3, [pc, #168]	; (800283c <Read_Record+0xbc>)
 8002792:	2201      	movs	r2, #1
 8002794:	801a      	strh	r2, [r3, #0]
	if (TIME_DIVISION >10)
 8002796:	4b29      	ldr	r3, [pc, #164]	; (800283c <Read_Record+0xbc>)
 8002798:	881b      	ldrh	r3, [r3, #0]
 800279a:	2b0a      	cmp	r3, #10
 800279c:	d902      	bls.n	80027a4 <Read_Record+0x24>
		TIME_DIVISION = 10;
 800279e:	4b27      	ldr	r3, [pc, #156]	; (800283c <Read_Record+0xbc>)
 80027a0:	220a      	movs	r2, #10
 80027a2:	801a      	strh	r2, [r3, #0]
	if (TIME_DIVISION == 1)
 80027a4:	4b25      	ldr	r3, [pc, #148]	; (800283c <Read_Record+0xbc>)
 80027a6:	881b      	ldrh	r3, [r3, #0]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d113      	bne.n	80027d4 <Read_Record+0x54>
	{
		for (u8 i = 0; i < 158;i++)
 80027ac:	2300      	movs	r3, #0
 80027ae:	73fb      	strb	r3, [r7, #15]
 80027b0:	e00c      	b.n	80027cc <Read_Record+0x4c>
		{
			Record[i] = MADC_u16GetData(0);
 80027b2:	7bfb      	ldrb	r3, [r7, #15]
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	18d4      	adds	r4, r2, r3
 80027ba:	2000      	movs	r0, #0
 80027bc:	f7fe fcf4 	bl	80011a8 <MADC_u16GetData>
 80027c0:	4603      	mov	r3, r0
 80027c2:	b21b      	sxth	r3, r3
 80027c4:	8023      	strh	r3, [r4, #0]
		for (u8 i = 0; i < 158;i++)
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
 80027c8:	3301      	adds	r3, #1
 80027ca:	73fb      	strb	r3, [r7, #15]
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
 80027ce:	2b9d      	cmp	r3, #157	; 0x9d
 80027d0:	d9ef      	bls.n	80027b2 <Read_Record+0x32>
				Temp+= MADC_u16GetData(0);
			}
			Record[i] = Temp/TIME_DIVISION;
		}
	}
}
 80027d2:	e02e      	b.n	8002832 <Read_Record+0xb2>
	else if (TIME_DIVISION > 1)
 80027d4:	4b19      	ldr	r3, [pc, #100]	; (800283c <Read_Record+0xbc>)
 80027d6:	881b      	ldrh	r3, [r3, #0]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d92a      	bls.n	8002832 <Read_Record+0xb2>
		for(u8 i = 0; i < 158 ; i++)
 80027dc:	2300      	movs	r3, #0
 80027de:	73bb      	strb	r3, [r7, #14]
 80027e0:	e024      	b.n	800282c <Read_Record+0xac>
			u16 Temp=0;
 80027e2:	2300      	movs	r3, #0
 80027e4:	81bb      	strh	r3, [r7, #12]
			for (u8 j = 0; j<TIME_DIVISION;j++)
 80027e6:	2300      	movs	r3, #0
 80027e8:	72fb      	strb	r3, [r7, #11]
 80027ea:	e00a      	b.n	8002802 <Read_Record+0x82>
				Temp+= MADC_u16GetData(0);
 80027ec:	2000      	movs	r0, #0
 80027ee:	f7fe fcdb 	bl	80011a8 <MADC_u16GetData>
 80027f2:	4603      	mov	r3, r0
 80027f4:	461a      	mov	r2, r3
 80027f6:	89bb      	ldrh	r3, [r7, #12]
 80027f8:	4413      	add	r3, r2
 80027fa:	81bb      	strh	r3, [r7, #12]
			for (u8 j = 0; j<TIME_DIVISION;j++)
 80027fc:	7afb      	ldrb	r3, [r7, #11]
 80027fe:	3301      	adds	r3, #1
 8002800:	72fb      	strb	r3, [r7, #11]
 8002802:	7afb      	ldrb	r3, [r7, #11]
 8002804:	b29a      	uxth	r2, r3
 8002806:	4b0d      	ldr	r3, [pc, #52]	; (800283c <Read_Record+0xbc>)
 8002808:	881b      	ldrh	r3, [r3, #0]
 800280a:	429a      	cmp	r2, r3
 800280c:	d3ee      	bcc.n	80027ec <Read_Record+0x6c>
			Record[i] = Temp/TIME_DIVISION;
 800280e:	7bbb      	ldrb	r3, [r7, #14]
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	4413      	add	r3, r2
 8002816:	4a09      	ldr	r2, [pc, #36]	; (800283c <Read_Record+0xbc>)
 8002818:	8812      	ldrh	r2, [r2, #0]
 800281a:	89b9      	ldrh	r1, [r7, #12]
 800281c:	fbb1 f2f2 	udiv	r2, r1, r2
 8002820:	b292      	uxth	r2, r2
 8002822:	b212      	sxth	r2, r2
 8002824:	801a      	strh	r2, [r3, #0]
		for(u8 i = 0; i < 158 ; i++)
 8002826:	7bbb      	ldrb	r3, [r7, #14]
 8002828:	3301      	adds	r3, #1
 800282a:	73bb      	strb	r3, [r7, #14]
 800282c:	7bbb      	ldrb	r3, [r7, #14]
 800282e:	2b9d      	cmp	r3, #157	; 0x9d
 8002830:	d9d7      	bls.n	80027e2 <Read_Record+0x62>
}
 8002832:	bf00      	nop
 8002834:	3714      	adds	r7, #20
 8002836:	46bd      	mov	sp, r7
 8002838:	bd90      	pop	{r4, r7, pc}
 800283a:	bf00      	nop
 800283c:	20000000 	.word	0x20000000

08002840 <Display_Record>:

void Display_Record(s16 *Record, f32 *Stats)
{
 8002840:	b590      	push	{r4, r7, lr}
 8002842:	b08d      	sub	sp, #52	; 0x34
 8002844:	af02      	add	r7, sp, #8
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
	/*LocalPixels to store the last record*/
	static s16 LocalPixels[159];

	for (u8 i = 1; i<159; i++)
 800284a:	2301      	movs	r3, #1
 800284c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002850:	e05c      	b.n	800290c <Display_Record+0xcc>
	{
		/*Map the Readings to pixel positions on the screen*/
		Record[i] *= 120.0/4096;
 8002852:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	18d4      	adds	r4, r2, r3
 800285c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	4413      	add	r3, r2
 8002866:	f9b3 3000 	ldrsh.w	r3, [r3]
 800286a:	4618      	mov	r0, r3
 800286c:	f7fd fdc2 	bl	80003f4 <__aeabi_i2d>
 8002870:	f04f 0200 	mov.w	r2, #0
 8002874:	4b76      	ldr	r3, [pc, #472]	; (8002a50 <Display_Record+0x210>)
 8002876:	f7fd fe23 	bl	80004c0 <__aeabi_dmul>
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	4610      	mov	r0, r2
 8002880:	4619      	mov	r1, r3
 8002882:	f7fe f8cd 	bl	8000a20 <__aeabi_d2iz>
 8002886:	4603      	mov	r3, r0
 8002888:	b21b      	sxth	r3, r3
 800288a:	8023      	strh	r3, [r4, #0]
		/*Redraw the Oscilloscope screen where the last record was drawn*/
		HTFT_DrawPixel(i,60-LocalPixels[i], ScopeScreen[i-1][LocalPixels[i]-1]);
 800288c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002890:	4a70      	ldr	r2, [pc, #448]	; (8002a54 <Display_Record+0x214>)
 8002892:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002896:	b2db      	uxtb	r3, r3
 8002898:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 800289c:	b2d8      	uxtb	r0, r3
 800289e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028a2:	1e5a      	subs	r2, r3, #1
 80028a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028a8:	496a      	ldr	r1, [pc, #424]	; (8002a54 <Display_Record+0x214>)
 80028aa:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80028ae:	3b01      	subs	r3, #1
 80028b0:	4969      	ldr	r1, [pc, #420]	; (8002a58 <Display_Record+0x218>)
 80028b2:	01d2      	lsls	r2, r2, #7
 80028b4:	4413      	add	r3, r2
 80028b6:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80028ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028be:	4601      	mov	r1, r0
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff fba8 	bl	8002016 <HTFT_DrawPixel>
		/*Draw the new record*/
		HTFT_DrawPixel(i,60-Record[i],RED);
 80028c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	4413      	add	r3, r2
 80028d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 80028da:	b2d9      	uxtb	r1, r3
 80028dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028e0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff fb96 	bl	8002016 <HTFT_DrawPixel>
		/*Store the current record in the old record array*/
		LocalPixels[i] = Record[i];
 80028ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028ee:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80028f2:	0052      	lsls	r2, r2, #1
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	440a      	add	r2, r1
 80028f8:	f9b2 1000 	ldrsh.w	r1, [r2]
 80028fc:	4a55      	ldr	r2, [pc, #340]	; (8002a54 <Display_Record+0x214>)
 80028fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (u8 i = 1; i<159; i++)
 8002902:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002906:	3301      	adds	r3, #1
 8002908:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800290c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002910:	2b9e      	cmp	r3, #158	; 0x9e
 8002912:	d99e      	bls.n	8002852 <Display_Record+0x12>
	}

	/*Convert Stats valuse to Chars to display on the screen*/
	/*The frequency first*/
	char F[5];
	sprintf(F,"%u",(u16)(Stats[2]));
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	3308      	adds	r3, #8
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f7fe fbf2 	bl	8001104 <__aeabi_f2uiz>
 8002920:	4603      	mov	r3, r0
 8002922:	b29b      	uxth	r3, r3
 8002924:	461a      	mov	r2, r3
 8002926:	f107 0314 	add.w	r3, r7, #20
 800292a:	494c      	ldr	r1, [pc, #304]	; (8002a5c <Display_Record+0x21c>)
 800292c:	4618      	mov	r0, r3
 800292e:	f000 fcf4 	bl	800331a <siprintf>

	HTFT_voidFill(102,121,145,126,BLACK);
 8002932:	2300      	movs	r3, #0
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	237e      	movs	r3, #126	; 0x7e
 8002938:	2291      	movs	r2, #145	; 0x91
 800293a:	2179      	movs	r1, #121	; 0x79
 800293c:	2066      	movs	r0, #102	; 0x66
 800293e:	f7ff fab3 	bl	8001ea8 <HTFT_voidFill>
	HTFT_DrawText(F,108,120,YELLOW);
 8002942:	f107 0014 	add.w	r0, r7, #20
 8002946:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800294a:	2278      	movs	r2, #120	; 0x78
 800294c:	216c      	movs	r1, #108	; 0x6c
 800294e:	f7ff fc3f 	bl	80021d0 <HTFT_DrawText>

	HTFT_DrawText("HZ",140,120,WHITE);
 8002952:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002956:	2278      	movs	r2, #120	; 0x78
 8002958:	218c      	movs	r1, #140	; 0x8c
 800295a:	4841      	ldr	r0, [pc, #260]	; (8002a60 <Display_Record+0x220>)
 800295c:	f7ff fc38 	bl	80021d0 <HTFT_DrawText>

	/*Then the P-P voltage*/
	f32 Local_f32MaxSample =(Stats[0])*3.3/4096.0;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4618      	mov	r0, r3
 8002966:	f7fd fd57 	bl	8000418 <__aeabi_f2d>
 800296a:	a337      	add	r3, pc, #220	; (adr r3, 8002a48 <Display_Record+0x208>)
 800296c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002970:	f7fd fda6 	bl	80004c0 <__aeabi_dmul>
 8002974:	4603      	mov	r3, r0
 8002976:	460c      	mov	r4, r1
 8002978:	4618      	mov	r0, r3
 800297a:	4621      	mov	r1, r4
 800297c:	f04f 0200 	mov.w	r2, #0
 8002980:	4b38      	ldr	r3, [pc, #224]	; (8002a64 <Display_Record+0x224>)
 8002982:	f7fd fec7 	bl	8000714 <__aeabi_ddiv>
 8002986:	4603      	mov	r3, r0
 8002988:	460c      	mov	r4, r1
 800298a:	4618      	mov	r0, r3
 800298c:	4621      	mov	r1, r4
 800298e:	f7fe f86f 	bl	8000a70 <__aeabi_d2f>
 8002992:	4603      	mov	r3, r0
 8002994:	623b      	str	r3, [r7, #32]
	f32 Local_f32MinSample =(Stats[1])*3.3/4096.0;
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	3304      	adds	r3, #4
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f7fd fd3b 	bl	8000418 <__aeabi_f2d>
 80029a2:	a329      	add	r3, pc, #164	; (adr r3, 8002a48 <Display_Record+0x208>)
 80029a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a8:	f7fd fd8a 	bl	80004c0 <__aeabi_dmul>
 80029ac:	4603      	mov	r3, r0
 80029ae:	460c      	mov	r4, r1
 80029b0:	4618      	mov	r0, r3
 80029b2:	4621      	mov	r1, r4
 80029b4:	f04f 0200 	mov.w	r2, #0
 80029b8:	4b2a      	ldr	r3, [pc, #168]	; (8002a64 <Display_Record+0x224>)
 80029ba:	f7fd feab 	bl	8000714 <__aeabi_ddiv>
 80029be:	4603      	mov	r3, r0
 80029c0:	460c      	mov	r4, r1
 80029c2:	4618      	mov	r0, r3
 80029c4:	4621      	mov	r1, r4
 80029c6:	f7fe f853 	bl	8000a70 <__aeabi_d2f>
 80029ca:	4603      	mov	r3, r0
 80029cc:	61fb      	str	r3, [r7, #28]
	char VPP[10];
	ftoa(Local_f32MaxSample-Local_f32MinSample,VPP,2);
 80029ce:	69f9      	ldr	r1, [r7, #28]
 80029d0:	6a38      	ldr	r0, [r7, #32]
 80029d2:	f7fe f8a1 	bl	8000b18 <__aeabi_fsub>
 80029d6:	4603      	mov	r3, r0
 80029d8:	4618      	mov	r0, r3
 80029da:	f107 0308 	add.w	r3, r7, #8
 80029de:	2202      	movs	r2, #2
 80029e0:	4619      	mov	r1, r3
 80029e2:	f7fe febf 	bl	8001764 <ftoa>

	/*Put a zero at first if the first element is . */
	if(VPP[0] == '.')
 80029e6:	7a3b      	ldrb	r3, [r7, #8]
 80029e8:	2b2e      	cmp	r3, #46	; 0x2e
 80029ea:	d109      	bne.n	8002a00 <Display_Record+0x1c0>
	{
		VPP[4]=VPP[3];
 80029ec:	7afb      	ldrb	r3, [r7, #11]
 80029ee:	733b      	strb	r3, [r7, #12]
		VPP[3]=VPP[2];
 80029f0:	7abb      	ldrb	r3, [r7, #10]
 80029f2:	72fb      	strb	r3, [r7, #11]
		VPP[2]=VPP[1];
 80029f4:	7a7b      	ldrb	r3, [r7, #9]
 80029f6:	72bb      	strb	r3, [r7, #10]
		VPP[1]=VPP[0];
 80029f8:	7a3b      	ldrb	r3, [r7, #8]
 80029fa:	727b      	strb	r3, [r7, #9]
		VPP[0]='0';
 80029fc:	2330      	movs	r3, #48	; 0x30
 80029fe:	723b      	strb	r3, [r7, #8]
	}

	HTFT_voidFill(37,121,65,126,BLACK);
 8002a00:	2300      	movs	r3, #0
 8002a02:	9300      	str	r3, [sp, #0]
 8002a04:	237e      	movs	r3, #126	; 0x7e
 8002a06:	2241      	movs	r2, #65	; 0x41
 8002a08:	2179      	movs	r1, #121	; 0x79
 8002a0a:	2025      	movs	r0, #37	; 0x25
 8002a0c:	f7ff fa4c 	bl	8001ea8 <HTFT_voidFill>
	HTFT_DrawText(VPP,40,120,YELLOW);
 8002a10:	f107 0008 	add.w	r0, r7, #8
 8002a14:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002a18:	2278      	movs	r2, #120	; 0x78
 8002a1a:	2128      	movs	r1, #40	; 0x28
 8002a1c:	f7ff fbd8 	bl	80021d0 <HTFT_DrawText>
	HTFT_DrawText("V",70,120,WHITE);
 8002a20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a24:	2278      	movs	r2, #120	; 0x78
 8002a26:	2146      	movs	r1, #70	; 0x46
 8002a28:	480f      	ldr	r0, [pc, #60]	; (8002a68 <Display_Record+0x228>)
 8002a2a:	f7ff fbd1 	bl	80021d0 <HTFT_DrawText>
	HTFT_DrawText(VPP,40,120,YELLOW);
 8002a2e:	f107 0008 	add.w	r0, r7, #8
 8002a32:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002a36:	2278      	movs	r2, #120	; 0x78
 8002a38:	2128      	movs	r1, #40	; 0x28
 8002a3a:	f7ff fbc9 	bl	80021d0 <HTFT_DrawText>
}
 8002a3e:	bf00      	nop
 8002a40:	372c      	adds	r7, #44	; 0x2c
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd90      	pop	{r4, r7, pc}
 8002a46:	bf00      	nop
 8002a48:	66666666 	.word	0x66666666
 8002a4c:	400a6666 	.word	0x400a6666
 8002a50:	3f9e0000 	.word	0x3f9e0000
 8002a54:	20000108 	.word	0x20000108
 8002a58:	08004664 	.word	0x08004664
 8002a5c:	080043d8 	.word	0x080043d8
 8002a60:	080043dc 	.word	0x080043dc
 8002a64:	40b00000 	.word	0x40b00000
 8002a68:	080043e0 	.word	0x080043e0

08002a6c <Peripheral_Enable>:

void Peripheral_Enable(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
	/*Clock Initialization*/
	RCC_voidClockInit();
 8002a70:	f7ff f896 	bl	8001ba0 <RCC_voidClockInit>
	/*PORTA, PORTB Enable*/
	RCC_voidEnableClock(RCC_APB2,RCC_PORTB);
 8002a74:	2103      	movs	r1, #3
 8002a76:	2002      	movs	r0, #2
 8002a78:	f7ff f8de 	bl	8001c38 <RCC_voidEnableClock>
	RCC_voidEnableClock(RCC_APB2,RCC_PORTA);
 8002a7c:	2102      	movs	r1, #2
 8002a7e:	2002      	movs	r0, #2
 8002a80:	f7ff f8da 	bl	8001c38 <RCC_voidEnableClock>
	/*SPI2 Enable*/
	RCC_voidEnableClock(RCC_APB1,RCC_SPI2); //SPI ENABLE CLOCK
 8002a84:	210e      	movs	r1, #14
 8002a86:	2001      	movs	r0, #1
 8002a88:	f7ff f8d6 	bl	8001c38 <RCC_voidEnableClock>
	/*Timer2 Enable*/
	RCC_voidEnableClock(RCC_APB1,RCC_TIM2);
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	2001      	movs	r0, #1
 8002a90:	f7ff f8d2 	bl	8001c38 <RCC_voidEnableClock>
	/*Alternative Function Enable*/
	RCC_voidEnableClock(RCC_APB2,RCC_AFIO);
 8002a94:	2100      	movs	r1, #0
 8002a96:	2002      	movs	r0, #2
 8002a98:	f7ff f8ce 	bl	8001c38 <RCC_voidEnableClock>
	/*ADC1 Enable*/
	RCC_voidEnableClock(RCC_APB2,RCC_ADC1);
 8002a9c:	2109      	movs	r1, #9
 8002a9e:	2002      	movs	r0, #2
 8002aa0:	f7ff f8ca 	bl	8001c38 <RCC_voidEnableClock>
}
 8002aa4:	bf00      	nop
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <Pin_init>:

void Pin_init(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
	/*TFT Screen Pins*/
	MGPIO_voidSetPinDirection(GPIOB,PIN6,OUTPUT_SPEED_2MHZ_PP); //A0
 8002aac:	2202      	movs	r2, #2
 8002aae:	2106      	movs	r1, #6
 8002ab0:	2003      	movs	r0, #3
 8002ab2:	f7fe fea9 	bl	8001808 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(GPIOB,PIN7,OUTPUT_SPEED_2MHZ_PP); //RST
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	2107      	movs	r1, #7
 8002aba:	2003      	movs	r0, #3
 8002abc:	f7fe fea4 	bl	8001808 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(GPIOB,PIN13,OUTPUT_SPEED_50MHZ_AFPP); //CLK
 8002ac0:	220b      	movs	r2, #11
 8002ac2:	210d      	movs	r1, #13
 8002ac4:	2003      	movs	r0, #3
 8002ac6:	f7fe fe9f 	bl	8001808 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(GPIOB,PIN15,OUTPUT_SPEED_50MHZ_AFPP);//MOSI
 8002aca:	220b      	movs	r2, #11
 8002acc:	210f      	movs	r1, #15
 8002ace:	2003      	movs	r0, #3
 8002ad0:	f7fe fe9a 	bl	8001808 <MGPIO_voidSetPinDirection>

	/*External Push Buttons Pins*/
	MGPIO_voidSetPinDirection(GPIOB,0,INPUT_PULLUP_PULLDOWN);
 8002ad4:	2208      	movs	r2, #8
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	2003      	movs	r0, #3
 8002ada:	f7fe fe95 	bl	8001808 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(GPIOB,1,INPUT_PULLUP_PULLDOWN);
 8002ade:	2208      	movs	r2, #8
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	2003      	movs	r0, #3
 8002ae4:	f7fe fe90 	bl	8001808 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(GPIOB,3,INPUT_PULLUP_PULLDOWN);
 8002ae8:	2208      	movs	r2, #8
 8002aea:	2103      	movs	r1, #3
 8002aec:	2003      	movs	r0, #3
 8002aee:	f7fe fe8b 	bl	8001808 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(GPIOB,5,INPUT_PULLUP_PULLDOWN);
 8002af2:	2208      	movs	r2, #8
 8002af4:	2105      	movs	r1, #5
 8002af6:	2003      	movs	r0, #3
 8002af8:	f7fe fe86 	bl	8001808 <MGPIO_voidSetPinDirection>

	MGPIO_voidSetPinValue(GPIOB,0,HIGH);
 8002afc:	2201      	movs	r2, #1
 8002afe:	2100      	movs	r1, #0
 8002b00:	2003      	movs	r0, #3
 8002b02:	f7fe ff49 	bl	8001998 <MGPIO_voidSetPinValue>
	MGPIO_voidSetPinValue(GPIOB,1,HIGH);
 8002b06:	2201      	movs	r2, #1
 8002b08:	2101      	movs	r1, #1
 8002b0a:	2003      	movs	r0, #3
 8002b0c:	f7fe ff44 	bl	8001998 <MGPIO_voidSetPinValue>
	MGPIO_voidSetPinValue(GPIOB,4,HIGH);
 8002b10:	2201      	movs	r2, #1
 8002b12:	2104      	movs	r1, #4
 8002b14:	2003      	movs	r0, #3
 8002b16:	f7fe ff3f 	bl	8001998 <MGPIO_voidSetPinValue>
	MGPIO_voidSetPinValue(GPIOB,5,HIGH);
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	2105      	movs	r1, #5
 8002b1e:	2003      	movs	r0, #3
 8002b20:	f7fe ff3a 	bl	8001998 <MGPIO_voidSetPinValue>
}
 8002b24:	bf00      	nop
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <ExternalInterruptConfig>:

void ExternalInterruptConfig(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
	/*Re-map of EXTIs to PORTB pins*/
	MAFIO_voidSetEXTIConfiguration(LINE0,AFIO_PORTB);
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	2000      	movs	r0, #0
 8002b30:	f7fe fb86 	bl	8001240 <MAFIO_voidSetEXTIConfiguration>
	MAFIO_voidSetEXTIConfiguration(LINE1,AFIO_PORTB);
 8002b34:	2101      	movs	r1, #1
 8002b36:	2001      	movs	r0, #1
 8002b38:	f7fe fb82 	bl	8001240 <MAFIO_voidSetEXTIConfiguration>
	MAFIO_voidSetEXTIConfiguration(LINE4,AFIO_PORTB);
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	2004      	movs	r0, #4
 8002b40:	f7fe fb7e 	bl	8001240 <MAFIO_voidSetEXTIConfiguration>
	MAFIO_voidSetEXTIConfiguration(LINE5,AFIO_PORTB);
 8002b44:	2101      	movs	r1, #1
 8002b46:	2005      	movs	r0, #5
 8002b48:	f7fe fb7a 	bl	8001240 <MAFIO_voidSetEXTIConfiguration>


	/*Set CallBacks for every interrupt*/
	MEXTI_voidSetCallBack(LINE0,HorizontalZoomIn);
 8002b4c:	4910      	ldr	r1, [pc, #64]	; (8002b90 <ExternalInterruptConfig+0x68>)
 8002b4e:	2000      	movs	r0, #0
 8002b50:	f7fe fc2c 	bl	80013ac <MEXTI_voidSetCallBack>
	MEXTI_voidSetCallBack(LINE1,HorizontalZoomOut);
 8002b54:	490f      	ldr	r1, [pc, #60]	; (8002b94 <ExternalInterruptConfig+0x6c>)
 8002b56:	2001      	movs	r0, #1
 8002b58:	f7fe fc28 	bl	80013ac <MEXTI_voidSetCallBack>
	MEXTI_voidSetCallBack(LINE4,VerticalZoomIn);
 8002b5c:	490e      	ldr	r1, [pc, #56]	; (8002b98 <ExternalInterruptConfig+0x70>)
 8002b5e:	2004      	movs	r0, #4
 8002b60:	f7fe fc24 	bl	80013ac <MEXTI_voidSetCallBack>
	MEXTI_voidSetCallBack(LINE5,VerticalZoomOut);
 8002b64:	490d      	ldr	r1, [pc, #52]	; (8002b9c <ExternalInterruptConfig+0x74>)
 8002b66:	2005      	movs	r0, #5
 8002b68:	f7fe fc20 	bl	80013ac <MEXTI_voidSetCallBack>

	/*Interrupt on Falling Edge*/
	MEXTI_voidSetSignalLatch(LINE0,FALLING_EDGE);
 8002b6c:	2101      	movs	r1, #1
 8002b6e:	2000      	movs	r0, #0
 8002b70:	f7fe fbd4 	bl	800131c <MEXTI_voidSetSignalLatch>
	MEXTI_voidSetSignalLatch(LINE1,FALLING_EDGE);
 8002b74:	2101      	movs	r1, #1
 8002b76:	2001      	movs	r0, #1
 8002b78:	f7fe fbd0 	bl	800131c <MEXTI_voidSetSignalLatch>
	MEXTI_voidSetSignalLatch(LINE4,FALLING_EDGE);
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	2004      	movs	r0, #4
 8002b80:	f7fe fbcc 	bl	800131c <MEXTI_voidSetSignalLatch>
	MEXTI_voidSetSignalLatch(LINE5,FALLING_EDGE);
 8002b84:	2101      	movs	r1, #1
 8002b86:	2005      	movs	r0, #5
 8002b88:	f7fe fbc8 	bl	800131c <MEXTI_voidSetSignalLatch>
}
 8002b8c:	bf00      	nop
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	08002e3d 	.word	0x08002e3d
 8002b94:	08002e75 	.word	0x08002e75
 8002b98:	08002ead 	.word	0x08002ead
 8002b9c:	08002efd 	.word	0x08002efd

08002ba0 <EnableInterrupts>:

void EnableInterrupts(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
	/*Set the Priority for the External Interrupts*/
	MNVIC_voidSetPriority(NVIC_EXTI0,0,0,0);
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	2100      	movs	r1, #0
 8002baa:	2006      	movs	r0, #6
 8002bac:	f7fe ffd2 	bl	8001b54 <MNVIC_voidSetPriority>
	MNVIC_voidSetPriority(NVIC_EXTI1,0,1,0);
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	2007      	movs	r0, #7
 8002bb8:	f7fe ffcc 	bl	8001b54 <MNVIC_voidSetPriority>
	MNVIC_voidSetPriority(NVIC_EXTI4,0,2,0);
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	200a      	movs	r0, #10
 8002bc4:	f7fe ffc6 	bl	8001b54 <MNVIC_voidSetPriority>
	MNVIC_voidSetPriority(NVIC_EXTI9_5,0,3,0);
 8002bc8:	2300      	movs	r3, #0
 8002bca:	2203      	movs	r2, #3
 8002bcc:	2100      	movs	r1, #0
 8002bce:	2017      	movs	r0, #23
 8002bd0:	f7fe ffc0 	bl	8001b54 <MNVIC_voidSetPriority>

	/*Set Priority for TIMER2 Interrupt*/
	MNVIC_voidSetPriority(NVIC_TIM2,1,0,0);
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	2101      	movs	r1, #1
 8002bda:	201c      	movs	r0, #28
 8002bdc:	f7fe ffba 	bl	8001b54 <MNVIC_voidSetPriority>

	/*Enable All Interrupts*/
	MNVIC_voidEnableInterrupt(NVIC_EXTI0);
 8002be0:	2006      	movs	r0, #6
 8002be2:	f7fe ff95 	bl	8001b10 <MNVIC_voidEnableInterrupt>
	MNVIC_voidEnableInterrupt(NVIC_EXTI1);
 8002be6:	2007      	movs	r0, #7
 8002be8:	f7fe ff92 	bl	8001b10 <MNVIC_voidEnableInterrupt>
	MNVIC_voidEnableInterrupt(NVIC_EXTI4);
 8002bec:	200a      	movs	r0, #10
 8002bee:	f7fe ff8f 	bl	8001b10 <MNVIC_voidEnableInterrupt>
	MNVIC_voidEnableInterrupt(NVIC_EXTI9_5);
 8002bf2:	2017      	movs	r0, #23
 8002bf4:	f7fe ff8c 	bl	8001b10 <MNVIC_voidEnableInterrupt>

	MNVIC_voidEnableInterrupt(NVIC_TIM2);
 8002bf8:	201c      	movs	r0, #28
 8002bfa:	f7fe ff89 	bl	8001b10 <MNVIC_voidEnableInterrupt>

	/*wait*/
	MSTK_voidSetBusyWait(10000);
 8002bfe:	f242 7010 	movw	r0, #10000	; 0x2710
 8002c02:	f7ff f88d 	bl	8001d20 <MSTK_voidSetBusyWait>

}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}
	...

08002c0c <MeasureFrequency>:

void MeasureFrequency(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
	/*Check for first edge*/
	static u8 FirstEdge = 0;
	if (FirstEdge == 0)
 8002c10:	4b0f      	ldr	r3, [pc, #60]	; (8002c50 <MeasureFrequency+0x44>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d105      	bne.n	8002c24 <MeasureFrequency+0x18>
	{
		/*If yes, clear the counter*/
		FirstEdge = 1;
 8002c18:	4b0d      	ldr	r3, [pc, #52]	; (8002c50 <MeasureFrequency+0x44>)
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	701a      	strb	r2, [r3, #0]
		MTIMER2_voidClearCounter();
 8002c1e:	f7ff fbc8 	bl	80023b2 <MTIMER2_voidClearCounter>
		MTIMER2_voidClearCounter();
		FirstEdge = 0;
		FrequencyMeasured = 1;
	}

}
 8002c22:	e012      	b.n	8002c4a <MeasureFrequency+0x3e>
		SignalFrequency = 48000000/MTIMER2_u16ReadCapture(TIMER2_CH4_CAPT);
 8002c24:	2004      	movs	r0, #4
 8002c26:	f7ff fb33 	bl	8002290 <MTIMER2_u16ReadCapture>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	4b09      	ldr	r3, [pc, #36]	; (8002c54 <MeasureFrequency+0x48>)
 8002c30:	fb93 f3f2 	sdiv	r3, r3, r2
 8002c34:	461a      	mov	r2, r3
 8002c36:	4b08      	ldr	r3, [pc, #32]	; (8002c58 <MeasureFrequency+0x4c>)
 8002c38:	601a      	str	r2, [r3, #0]
		MTIMER2_voidClearCounter();
 8002c3a:	f7ff fbba 	bl	80023b2 <MTIMER2_voidClearCounter>
		FirstEdge = 0;
 8002c3e:	4b04      	ldr	r3, [pc, #16]	; (8002c50 <MeasureFrequency+0x44>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	701a      	strb	r2, [r3, #0]
		FrequencyMeasured = 1;
 8002c44:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <MeasureFrequency+0x50>)
 8002c46:	2201      	movs	r2, #1
 8002c48:	701a      	strb	r2, [r3, #0]
}
 8002c4a:	bf00      	nop
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	20000246 	.word	0x20000246
 8002c54:	02dc6c00 	.word	0x02dc6c00
 8002c58:	20000104 	.word	0x20000104
 8002c5c:	20000100 	.word	0x20000100

08002c60 <Start_Oscilloscope>:
	HTFT_DrawText("Z",115,55,WHITE);
	HTFT_DrawText("Z",122,50,WHITE);
}

void Start_Oscilloscope(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af02      	add	r7, sp, #8


	/*Fill Screen with white color*/
	HTFT_voidFillScreen(BLACK);
 8002c66:	2000      	movs	r0, #0
 8002c68:	f7ff f95e 	bl	8001f28 <HTFT_voidFillScreen>

	HTFT_SetRotation(Horizontal);
 8002c6c:	2001      	movs	r0, #1
 8002c6e:	f7ff fad1 	bl	8002214 <HTFT_SetRotation>

	/*Blue Border*/
	HTFT_DrawRectangle(0,0,159,127,BLUE);
 8002c72:	231f      	movs	r3, #31
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	237f      	movs	r3, #127	; 0x7f
 8002c78:	229f      	movs	r2, #159	; 0x9f
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	2000      	movs	r0, #0
 8002c7e:	f7ff fa09 	bl	8002094 <HTFT_DrawRectangle>

	/*   Horizontal lines  */
	HTFT_DrawLine(0,12,159,12,LIGHTGREY );
 8002c82:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	230c      	movs	r3, #12
 8002c8a:	229f      	movs	r2, #159	; 0x9f
 8002c8c:	210c      	movs	r1, #12
 8002c8e:	2000      	movs	r0, #0
 8002c90:	f7ff f9e3 	bl	800205a <HTFT_DrawLine>
	HTFT_DrawLine(0,24,159,24,LIGHTGREY );
 8002c94:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002c98:	9300      	str	r3, [sp, #0]
 8002c9a:	2318      	movs	r3, #24
 8002c9c:	229f      	movs	r2, #159	; 0x9f
 8002c9e:	2118      	movs	r1, #24
 8002ca0:	2000      	movs	r0, #0
 8002ca2:	f7ff f9da 	bl	800205a <HTFT_DrawLine>
	HTFT_DrawLine(0,36,159,36,LIGHTGREY );
 8002ca6:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002caa:	9300      	str	r3, [sp, #0]
 8002cac:	2324      	movs	r3, #36	; 0x24
 8002cae:	229f      	movs	r2, #159	; 0x9f
 8002cb0:	2124      	movs	r1, #36	; 0x24
 8002cb2:	2000      	movs	r0, #0
 8002cb4:	f7ff f9d1 	bl	800205a <HTFT_DrawLine>
	HTFT_DrawLine(0,48,159,48,LIGHTGREY );
 8002cb8:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	2330      	movs	r3, #48	; 0x30
 8002cc0:	229f      	movs	r2, #159	; 0x9f
 8002cc2:	2130      	movs	r1, #48	; 0x30
 8002cc4:	2000      	movs	r0, #0
 8002cc6:	f7ff f9c8 	bl	800205a <HTFT_DrawLine>

	HTFT_DrawLine(0,60,159,60,BLUE);
 8002cca:	231f      	movs	r3, #31
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	233c      	movs	r3, #60	; 0x3c
 8002cd0:	229f      	movs	r2, #159	; 0x9f
 8002cd2:	213c      	movs	r1, #60	; 0x3c
 8002cd4:	2000      	movs	r0, #0
 8002cd6:	f7ff f9c0 	bl	800205a <HTFT_DrawLine>

	HTFT_DrawLine(0,72,159,72,LIGHTGREY);
 8002cda:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	2348      	movs	r3, #72	; 0x48
 8002ce2:	229f      	movs	r2, #159	; 0x9f
 8002ce4:	2148      	movs	r1, #72	; 0x48
 8002ce6:	2000      	movs	r0, #0
 8002ce8:	f7ff f9b7 	bl	800205a <HTFT_DrawLine>
	HTFT_DrawLine(0,84,159,84,LIGHTGREY);
 8002cec:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	2354      	movs	r3, #84	; 0x54
 8002cf4:	229f      	movs	r2, #159	; 0x9f
 8002cf6:	2154      	movs	r1, #84	; 0x54
 8002cf8:	2000      	movs	r0, #0
 8002cfa:	f7ff f9ae 	bl	800205a <HTFT_DrawLine>
	HTFT_DrawLine(0,96,159,96,LIGHTGREY);
 8002cfe:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	2360      	movs	r3, #96	; 0x60
 8002d06:	229f      	movs	r2, #159	; 0x9f
 8002d08:	2160      	movs	r1, #96	; 0x60
 8002d0a:	2000      	movs	r0, #0
 8002d0c:	f7ff f9a5 	bl	800205a <HTFT_DrawLine>
	HTFT_DrawLine(0,108,159,108,LIGHTGREY);
 8002d10:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	236c      	movs	r3, #108	; 0x6c
 8002d18:	229f      	movs	r2, #159	; 0x9f
 8002d1a:	216c      	movs	r1, #108	; 0x6c
 8002d1c:	2000      	movs	r0, #0
 8002d1e:	f7ff f99c 	bl	800205a <HTFT_DrawLine>

	HTFT_voidFill(0,120,159,128,BLUE);
 8002d22:	231f      	movs	r3, #31
 8002d24:	9300      	str	r3, [sp, #0]
 8002d26:	2380      	movs	r3, #128	; 0x80
 8002d28:	229f      	movs	r2, #159	; 0x9f
 8002d2a:	2178      	movs	r1, #120	; 0x78
 8002d2c:	2000      	movs	r0, #0
 8002d2e:	f7ff f8bb 	bl	8001ea8 <HTFT_voidFill>
	/*   VPP   */
	HTFT_DrawText("Vpp",15,120,WHITE);
 8002d32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d36:	2278      	movs	r2, #120	; 0x78
 8002d38:	210f      	movs	r1, #15
 8002d3a:	483b      	ldr	r0, [pc, #236]	; (8002e28 <Start_Oscilloscope+0x1c8>)
 8002d3c:	f7ff fa48 	bl	80021d0 <HTFT_DrawText>

	HTFT_voidFill(37,121,65,126,BLACK);
 8002d40:	2300      	movs	r3, #0
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	237e      	movs	r3, #126	; 0x7e
 8002d46:	2241      	movs	r2, #65	; 0x41
 8002d48:	2179      	movs	r1, #121	; 0x79
 8002d4a:	2025      	movs	r0, #37	; 0x25
 8002d4c:	f7ff f8ac 	bl	8001ea8 <HTFT_voidFill>
	HTFT_DrawText("0.00",40,120,YELLOW);
 8002d50:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002d54:	2278      	movs	r2, #120	; 0x78
 8002d56:	2128      	movs	r1, #40	; 0x28
 8002d58:	4834      	ldr	r0, [pc, #208]	; (8002e2c <Start_Oscilloscope+0x1cc>)
 8002d5a:	f7ff fa39 	bl	80021d0 <HTFT_DrawText>

	HTFT_DrawText("V",70,120,WHITE);
 8002d5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d62:	2278      	movs	r2, #120	; 0x78
 8002d64:	2146      	movs	r1, #70	; 0x46
 8002d66:	4832      	ldr	r0, [pc, #200]	; (8002e30 <Start_Oscilloscope+0x1d0>)
 8002d68:	f7ff fa32 	bl	80021d0 <HTFT_DrawText>
	/*  Frequency  */
	HTFT_DrawText("F",90,120,WHITE);
 8002d6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d70:	2278      	movs	r2, #120	; 0x78
 8002d72:	215a      	movs	r1, #90	; 0x5a
 8002d74:	482f      	ldr	r0, [pc, #188]	; (8002e34 <Start_Oscilloscope+0x1d4>)
 8002d76:	f7ff fa2b 	bl	80021d0 <HTFT_DrawText>

	HTFT_voidFill(102,121,135,126,BLACK);
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	9300      	str	r3, [sp, #0]
 8002d7e:	237e      	movs	r3, #126	; 0x7e
 8002d80:	2287      	movs	r2, #135	; 0x87
 8002d82:	2179      	movs	r1, #121	; 0x79
 8002d84:	2066      	movs	r0, #102	; 0x66
 8002d86:	f7ff f88f 	bl	8001ea8 <HTFT_voidFill>
	HTFT_DrawText("0.00",108,120,YELLOW);
 8002d8a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002d8e:	2278      	movs	r2, #120	; 0x78
 8002d90:	216c      	movs	r1, #108	; 0x6c
 8002d92:	4826      	ldr	r0, [pc, #152]	; (8002e2c <Start_Oscilloscope+0x1cc>)
 8002d94:	f7ff fa1c 	bl	80021d0 <HTFT_DrawText>

	HTFT_DrawText("HZ",140,120,WHITE);
 8002d98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d9c:	2278      	movs	r2, #120	; 0x78
 8002d9e:	218c      	movs	r1, #140	; 0x8c
 8002da0:	4825      	ldr	r0, [pc, #148]	; (8002e38 <Start_Oscilloscope+0x1d8>)
 8002da2:	f7ff fa15 	bl	80021d0 <HTFT_DrawText>

	/*   Vertical lines  */
	HTFT_DrawLine(20,0,20,120,LIGHTGREY);
 8002da6:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002daa:	9300      	str	r3, [sp, #0]
 8002dac:	2378      	movs	r3, #120	; 0x78
 8002dae:	2214      	movs	r2, #20
 8002db0:	2100      	movs	r1, #0
 8002db2:	2014      	movs	r0, #20
 8002db4:	f7ff f951 	bl	800205a <HTFT_DrawLine>
	HTFT_DrawLine(40,0,40,120,LIGHTGREY);
 8002db8:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	2378      	movs	r3, #120	; 0x78
 8002dc0:	2228      	movs	r2, #40	; 0x28
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	2028      	movs	r0, #40	; 0x28
 8002dc6:	f7ff f948 	bl	800205a <HTFT_DrawLine>
	HTFT_DrawLine(60,0,60,120,LIGHTGREY);
 8002dca:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	2378      	movs	r3, #120	; 0x78
 8002dd2:	223c      	movs	r2, #60	; 0x3c
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	203c      	movs	r0, #60	; 0x3c
 8002dd8:	f7ff f93f 	bl	800205a <HTFT_DrawLine>

	HTFT_DrawLine(80,0,80,120,BLUE);
 8002ddc:	231f      	movs	r3, #31
 8002dde:	9300      	str	r3, [sp, #0]
 8002de0:	2378      	movs	r3, #120	; 0x78
 8002de2:	2250      	movs	r2, #80	; 0x50
 8002de4:	2100      	movs	r1, #0
 8002de6:	2050      	movs	r0, #80	; 0x50
 8002de8:	f7ff f937 	bl	800205a <HTFT_DrawLine>

	HTFT_DrawLine(100,0,100,120,LIGHTGREY);
 8002dec:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002df0:	9300      	str	r3, [sp, #0]
 8002df2:	2378      	movs	r3, #120	; 0x78
 8002df4:	2264      	movs	r2, #100	; 0x64
 8002df6:	2100      	movs	r1, #0
 8002df8:	2064      	movs	r0, #100	; 0x64
 8002dfa:	f7ff f92e 	bl	800205a <HTFT_DrawLine>
	HTFT_DrawLine(120,0,120,120,LIGHTGREY);
 8002dfe:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002e02:	9300      	str	r3, [sp, #0]
 8002e04:	2378      	movs	r3, #120	; 0x78
 8002e06:	2278      	movs	r2, #120	; 0x78
 8002e08:	2100      	movs	r1, #0
 8002e0a:	2078      	movs	r0, #120	; 0x78
 8002e0c:	f7ff f925 	bl	800205a <HTFT_DrawLine>
	HTFT_DrawLine(140,0,140,120,LIGHTGREY);
 8002e10:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	2378      	movs	r3, #120	; 0x78
 8002e18:	228c      	movs	r2, #140	; 0x8c
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	208c      	movs	r0, #140	; 0x8c
 8002e1e:	f7ff f91c 	bl	800205a <HTFT_DrawLine>
}
 8002e22:	bf00      	nop
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	08004414 	.word	0x08004414
 8002e2c:	08004418 	.word	0x08004418
 8002e30:	080043e0 	.word	0x080043e0
 8002e34:	08004420 	.word	0x08004420
 8002e38:	080043dc 	.word	0x080043dc

08002e3c <HorizontalZoomIn>:

void HorizontalZoomIn(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
	/*Decrease the Time division*/
	while(!MGPIO_u8GetPinValue(GPIOB,0));
 8002e40:	bf00      	nop
 8002e42:	2100      	movs	r1, #0
 8002e44:	2003      	movs	r0, #3
 8002e46:	f7fe fe19 	bl	8001a7c <MGPIO_u8GetPinValue>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d0f8      	beq.n	8002e42 <HorizontalZoomIn+0x6>
	TIME_DIVISION -=1;
 8002e50:	4b07      	ldr	r3, [pc, #28]	; (8002e70 <HorizontalZoomIn+0x34>)
 8002e52:	881b      	ldrh	r3, [r3, #0]
 8002e54:	3b01      	subs	r3, #1
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	4b05      	ldr	r3, [pc, #20]	; (8002e70 <HorizontalZoomIn+0x34>)
 8002e5a:	801a      	strh	r2, [r3, #0]
	if (!TIME_DIVISION)
 8002e5c:	4b04      	ldr	r3, [pc, #16]	; (8002e70 <HorizontalZoomIn+0x34>)
 8002e5e:	881b      	ldrh	r3, [r3, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d102      	bne.n	8002e6a <HorizontalZoomIn+0x2e>
		TIME_DIVISION =1;
 8002e64:	4b02      	ldr	r3, [pc, #8]	; (8002e70 <HorizontalZoomIn+0x34>)
 8002e66:	2201      	movs	r2, #1
 8002e68:	801a      	strh	r2, [r3, #0]
}
 8002e6a:	bf00      	nop
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	20000000 	.word	0x20000000

08002e74 <HorizontalZoomOut>:

void HorizontalZoomOut(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
	/*Increase the Time Division*/
	while(!MGPIO_u8GetPinValue(GPIOB,1));
 8002e78:	bf00      	nop
 8002e7a:	2101      	movs	r1, #1
 8002e7c:	2003      	movs	r0, #3
 8002e7e:	f7fe fdfd 	bl	8001a7c <MGPIO_u8GetPinValue>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d0f8      	beq.n	8002e7a <HorizontalZoomOut+0x6>
	TIME_DIVISION +=1;
 8002e88:	4b07      	ldr	r3, [pc, #28]	; (8002ea8 <HorizontalZoomOut+0x34>)
 8002e8a:	881b      	ldrh	r3, [r3, #0]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	4b05      	ldr	r3, [pc, #20]	; (8002ea8 <HorizontalZoomOut+0x34>)
 8002e92:	801a      	strh	r2, [r3, #0]
	if (TIME_DIVISION > 10)
 8002e94:	4b04      	ldr	r3, [pc, #16]	; (8002ea8 <HorizontalZoomOut+0x34>)
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	2b0a      	cmp	r3, #10
 8002e9a:	d902      	bls.n	8002ea2 <HorizontalZoomOut+0x2e>
		TIME_DIVISION =10;
 8002e9c:	4b02      	ldr	r3, [pc, #8]	; (8002ea8 <HorizontalZoomOut+0x34>)
 8002e9e:	220a      	movs	r2, #10
 8002ea0:	801a      	strh	r2, [r3, #0]

}
 8002ea2:	bf00      	nop
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20000000 	.word	0x20000000

08002eac <VerticalZoomIn>:

void VerticalZoomIn(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
	/*Decrease The Voltage division*/
	while(!MGPIO_u8GetPinValue(GPIOB,5));
 8002eb0:	bf00      	nop
 8002eb2:	2105      	movs	r1, #5
 8002eb4:	2003      	movs	r0, #3
 8002eb6:	f7fe fde1 	bl	8001a7c <MGPIO_u8GetPinValue>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d0f8      	beq.n	8002eb2 <VerticalZoomIn+0x6>
	VOLTAGE_DIVISION /=2;
 8002ec0:	4b0d      	ldr	r3, [pc, #52]	; (8002ef8 <VerticalZoomIn+0x4c>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7fd ffe3 	bl	8000e94 <__aeabi_fdiv>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	4b09      	ldr	r3, [pc, #36]	; (8002ef8 <VerticalZoomIn+0x4c>)
 8002ed4:	601a      	str	r2, [r3, #0]
	if(!VOLTAGE_DIVISION)
 8002ed6:	4b08      	ldr	r3, [pc, #32]	; (8002ef8 <VerticalZoomIn+0x4c>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f04f 0100 	mov.w	r1, #0
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7fe f8b8 	bl	8001054 <__aeabi_fcmpeq>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d100      	bne.n	8002eec <VerticalZoomIn+0x40>
		VOLTAGE_DIVISION = 1;
}
 8002eea:	e003      	b.n	8002ef4 <VerticalZoomIn+0x48>
		VOLTAGE_DIVISION = 1;
 8002eec:	4b02      	ldr	r3, [pc, #8]	; (8002ef8 <VerticalZoomIn+0x4c>)
 8002eee:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002ef2:	601a      	str	r2, [r3, #0]
}
 8002ef4:	bf00      	nop
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	20000004 	.word	0x20000004

08002efc <VerticalZoomOut>:

void VerticalZoomOut(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
	/*Increase the voltage division*/
	while(!MGPIO_u8GetPinValue(GPIOB,4));
 8002f00:	bf00      	nop
 8002f02:	2104      	movs	r1, #4
 8002f04:	2003      	movs	r0, #3
 8002f06:	f7fe fdb9 	bl	8001a7c <MGPIO_u8GetPinValue>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0f8      	beq.n	8002f02 <VerticalZoomOut+0x6>
	VOLTAGE_DIVISION *=2;
 8002f10:	4b0d      	ldr	r3, [pc, #52]	; (8002f48 <VerticalZoomOut+0x4c>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4619      	mov	r1, r3
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7fd fe00 	bl	8000b1c <__addsf3>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	461a      	mov	r2, r3
 8002f20:	4b09      	ldr	r3, [pc, #36]	; (8002f48 <VerticalZoomOut+0x4c>)
 8002f22:	601a      	str	r2, [r3, #0]
	if(VOLTAGE_DIVISION >16)
 8002f24:	4b08      	ldr	r3, [pc, #32]	; (8002f48 <VerticalZoomOut+0x4c>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7fe f8b9 	bl	80010a4 <__aeabi_fcmpgt>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d100      	bne.n	8002f3a <VerticalZoomOut+0x3e>
		VOLTAGE_DIVISION = 16;
}
 8002f38:	e003      	b.n	8002f42 <VerticalZoomOut+0x46>
		VOLTAGE_DIVISION = 16;
 8002f3a:	4b03      	ldr	r3, [pc, #12]	; (8002f48 <VerticalZoomOut+0x4c>)
 8002f3c:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8002f40:	601a      	str	r2, [r3, #0]
}
 8002f42:	bf00      	nop
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	20000004 	.word	0x20000004

08002f4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002f4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f84 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002f50:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002f52:	e003      	b.n	8002f5c <LoopCopyDataInit>

08002f54 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002f54:	4b0c      	ldr	r3, [pc, #48]	; (8002f88 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8002f56:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002f58:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002f5a:	3104      	adds	r1, #4

08002f5c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002f5c:	480b      	ldr	r0, [pc, #44]	; (8002f8c <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8002f5e:	4b0c      	ldr	r3, [pc, #48]	; (8002f90 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8002f60:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002f62:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002f64:	d3f6      	bcc.n	8002f54 <CopyDataInit>
	ldr	r2, =_sbss
 8002f66:	4a0b      	ldr	r2, [pc, #44]	; (8002f94 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8002f68:	e002      	b.n	8002f70 <LoopFillZerobss>

08002f6a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002f6a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002f6c:	f842 3b04 	str.w	r3, [r2], #4

08002f70 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002f70:	4b09      	ldr	r3, [pc, #36]	; (8002f98 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8002f72:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002f74:	d3f9      	bcc.n	8002f6a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002f76:	f000 f837 	bl	8002fe8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f7a:	f000 f9e5 	bl	8003348 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f7e:	f7ff fb1d 	bl	80025bc <main>
	bx	lr
 8002f82:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002f84:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8002f88:	0800e6b0 	.word	0x0800e6b0
	ldr	r0, =_sdata
 8002f8c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002f90:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8002f94:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8002f98:	20000248 	.word	0x20000248

08002f9c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f9c:	e7fe      	b.n	8002f9c <CAN1_RX1_IRQHandler>

08002f9e <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	af00      	add	r7, sp, #0
}
 8002fa2:	bf00      	nop
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bc80      	pop	{r7}
 8002fa8:	4770      	bx	lr

08002faa <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002faa:	b480      	push	{r7}
 8002fac:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002fae:	e7fe      	b.n	8002fae <HardFault_Handler+0x4>

08002fb0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8002fb4:	e7fe      	b.n	8002fb4 <MemManage_Handler+0x4>

08002fb6 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8002fba:	e7fe      	b.n	8002fba <BusFault_Handler+0x4>

08002fbc <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8002fc0:	e7fe      	b.n	8002fc0 <UsageFault_Handler+0x4>

08002fc2 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	af00      	add	r7, sp, #0
}
 8002fc6:	bf00      	nop
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bc80      	pop	{r7}
 8002fcc:	4770      	bx	lr

08002fce <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	af00      	add	r7, sp, #0
}
 8002fd2:	bf00      	nop
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bc80      	pop	{r7}
 8002fd8:	4770      	bx	lr

08002fda <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	af00      	add	r7, sp, #0
}
 8002fde:	bf00      	nop
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bc80      	pop	{r7}
 8002fe4:	4770      	bx	lr
	...

08002fe8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002fec:	4a15      	ldr	r2, [pc, #84]	; (8003044 <SystemInit+0x5c>)
 8002fee:	4b15      	ldr	r3, [pc, #84]	; (8003044 <SystemInit+0x5c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f043 0301 	orr.w	r3, r3, #1
 8002ff6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8002ff8:	4912      	ldr	r1, [pc, #72]	; (8003044 <SystemInit+0x5c>)
 8002ffa:	4b12      	ldr	r3, [pc, #72]	; (8003044 <SystemInit+0x5c>)
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	4b12      	ldr	r3, [pc, #72]	; (8003048 <SystemInit+0x60>)
 8003000:	4013      	ands	r3, r2
 8003002:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003004:	4a0f      	ldr	r2, [pc, #60]	; (8003044 <SystemInit+0x5c>)
 8003006:	4b0f      	ldr	r3, [pc, #60]	; (8003044 <SystemInit+0x5c>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800300e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003012:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003014:	4a0b      	ldr	r2, [pc, #44]	; (8003044 <SystemInit+0x5c>)
 8003016:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <SystemInit+0x5c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800301e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8003020:	4a08      	ldr	r2, [pc, #32]	; (8003044 <SystemInit+0x5c>)
 8003022:	4b08      	ldr	r3, [pc, #32]	; (8003044 <SystemInit+0x5c>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800302a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 800302c:	4b05      	ldr	r3, [pc, #20]	; (8003044 <SystemInit+0x5c>)
 800302e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003032:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8003034:	f000 f80c 	bl	8003050 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003038:	4b04      	ldr	r3, [pc, #16]	; (800304c <SystemInit+0x64>)
 800303a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800303e:	609a      	str	r2, [r3, #8]
#endif 
}
 8003040:	bf00      	nop
 8003042:	bd80      	pop	{r7, pc}
 8003044:	40021000 	.word	0x40021000
 8003048:	f8ff0000 	.word	0xf8ff0000
 800304c:	e000ed00 	.word	0xe000ed00

08003050 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8003054:	f000 f802 	bl	800305c <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8003058:	bf00      	nop
 800305a:	bd80      	pop	{r7, pc}

0800305c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8003062:	2300      	movs	r3, #0
 8003064:	607b      	str	r3, [r7, #4]
 8003066:	2300      	movs	r3, #0
 8003068:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800306a:	4a3a      	ldr	r2, [pc, #232]	; (8003154 <SetSysClockTo72+0xf8>)
 800306c:	4b39      	ldr	r3, [pc, #228]	; (8003154 <SetSysClockTo72+0xf8>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003074:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003076:	4b37      	ldr	r3, [pc, #220]	; (8003154 <SetSysClockTo72+0xf8>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	3301      	adds	r3, #1
 8003084:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d103      	bne.n	8003094 <SetSysClockTo72+0x38>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003092:	d1f0      	bne.n	8003076 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003094:	4b2f      	ldr	r3, [pc, #188]	; (8003154 <SetSysClockTo72+0xf8>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d002      	beq.n	80030a6 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80030a0:	2301      	movs	r3, #1
 80030a2:	603b      	str	r3, [r7, #0]
 80030a4:	e001      	b.n	80030aa <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80030a6:	2300      	movs	r3, #0
 80030a8:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d14b      	bne.n	8003148 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80030b0:	4a29      	ldr	r2, [pc, #164]	; (8003158 <SetSysClockTo72+0xfc>)
 80030b2:	4b29      	ldr	r3, [pc, #164]	; (8003158 <SetSysClockTo72+0xfc>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f043 0310 	orr.w	r3, r3, #16
 80030ba:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80030bc:	4a26      	ldr	r2, [pc, #152]	; (8003158 <SetSysClockTo72+0xfc>)
 80030be:	4b26      	ldr	r3, [pc, #152]	; (8003158 <SetSysClockTo72+0xfc>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f023 0303 	bic.w	r3, r3, #3
 80030c6:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80030c8:	4a23      	ldr	r2, [pc, #140]	; (8003158 <SetSysClockTo72+0xfc>)
 80030ca:	4b23      	ldr	r3, [pc, #140]	; (8003158 <SetSysClockTo72+0xfc>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f043 0302 	orr.w	r3, r3, #2
 80030d2:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80030d4:	4a1f      	ldr	r2, [pc, #124]	; (8003154 <SetSysClockTo72+0xf8>)
 80030d6:	4b1f      	ldr	r3, [pc, #124]	; (8003154 <SetSysClockTo72+0xf8>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80030dc:	4a1d      	ldr	r2, [pc, #116]	; (8003154 <SetSysClockTo72+0xf8>)
 80030de:	4b1d      	ldr	r3, [pc, #116]	; (8003154 <SetSysClockTo72+0xf8>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80030e4:	4a1b      	ldr	r2, [pc, #108]	; (8003154 <SetSysClockTo72+0xf8>)
 80030e6:	4b1b      	ldr	r3, [pc, #108]	; (8003154 <SetSysClockTo72+0xf8>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030ee:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80030f0:	4a18      	ldr	r2, [pc, #96]	; (8003154 <SetSysClockTo72+0xf8>)
 80030f2:	4b18      	ldr	r3, [pc, #96]	; (8003154 <SetSysClockTo72+0xf8>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80030fa:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80030fc:	4a15      	ldr	r2, [pc, #84]	; (8003154 <SetSysClockTo72+0xf8>)
 80030fe:	4b15      	ldr	r3, [pc, #84]	; (8003154 <SetSysClockTo72+0xf8>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8003106:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003108:	4a12      	ldr	r2, [pc, #72]	; (8003154 <SetSysClockTo72+0xf8>)
 800310a:	4b12      	ldr	r3, [pc, #72]	; (8003154 <SetSysClockTo72+0xf8>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003112:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003114:	bf00      	nop
 8003116:	4b0f      	ldr	r3, [pc, #60]	; (8003154 <SetSysClockTo72+0xf8>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d0f9      	beq.n	8003116 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003122:	4a0c      	ldr	r2, [pc, #48]	; (8003154 <SetSysClockTo72+0xf8>)
 8003124:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <SetSysClockTo72+0xf8>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f023 0303 	bic.w	r3, r3, #3
 800312c:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800312e:	4a09      	ldr	r2, [pc, #36]	; (8003154 <SetSysClockTo72+0xf8>)
 8003130:	4b08      	ldr	r3, [pc, #32]	; (8003154 <SetSysClockTo72+0xf8>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f043 0302 	orr.w	r3, r3, #2
 8003138:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800313a:	bf00      	nop
 800313c:	4b05      	ldr	r3, [pc, #20]	; (8003154 <SetSysClockTo72+0xf8>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f003 030c 	and.w	r3, r3, #12
 8003144:	2b08      	cmp	r3, #8
 8003146:	d1f9      	bne.n	800313c <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	bc80      	pop	{r7}
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	40021000 	.word	0x40021000
 8003158:	40022000 	.word	0x40022000

0800315c <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 800315c:	b480      	push	{r7}
 800315e:	b087      	sub	sp, #28
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
	int div = 1;
 8003168:	2301      	movs	r3, #1
 800316a:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 800316c:	e004      	b.n	8003178 <ts_itoa+0x1c>
		div *= base;
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	fb02 f303 	mul.w	r3, r2, r3
 8003176:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	429a      	cmp	r2, r3
 8003184:	d2f3      	bcs.n	800316e <ts_itoa+0x12>

	while (div != 0)
 8003186:	e029      	b.n	80031dc <ts_itoa+0x80>
	{
		int num = d/div;
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003190:	613b      	str	r3, [r7, #16]
		d = d%div;
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	fbb3 f1f2 	udiv	r1, r3, r2
 800319a:	fb02 f201 	mul.w	r2, r2, r1
 800319e:	1a9b      	subs	r3, r3, r2
 80031a0:	60bb      	str	r3, [r7, #8]
		div /= base;
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80031aa:	617b      	str	r3, [r7, #20]
		if (num > 9)
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	2b09      	cmp	r3, #9
 80031b0:	dd0a      	ble.n	80031c8 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	1c59      	adds	r1, r3, #1
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	6011      	str	r1, [r2, #0]
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	b2d2      	uxtb	r2, r2
 80031c0:	3237      	adds	r2, #55	; 0x37
 80031c2:	b2d2      	uxtb	r2, r2
 80031c4:	701a      	strb	r2, [r3, #0]
 80031c6:	e009      	b.n	80031dc <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	1c59      	adds	r1, r3, #1
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	6011      	str	r1, [r2, #0]
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	b2d2      	uxtb	r2, r2
 80031d6:	3230      	adds	r2, #48	; 0x30
 80031d8:	b2d2      	uxtb	r2, r2
 80031da:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1d2      	bne.n	8003188 <ts_itoa+0x2c>
	}
}
 80031e2:	bf00      	nop
 80031e4:	371c      	adds	r7, #28
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bc80      	pop	{r7}
 80031ea:	4770      	bx	lr

080031ec <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b088      	sub	sp, #32
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	617b      	str	r3, [r7, #20]
	while(*fmt)
 80031fc:	e07d      	b.n	80032fa <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	2b25      	cmp	r3, #37	; 0x25
 8003204:	d171      	bne.n	80032ea <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	3301      	adds	r3, #1
 800320a:	60bb      	str	r3, [r7, #8]
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	2b64      	cmp	r3, #100	; 0x64
 8003212:	d01e      	beq.n	8003252 <ts_formatstring+0x66>
 8003214:	2b64      	cmp	r3, #100	; 0x64
 8003216:	dc06      	bgt.n	8003226 <ts_formatstring+0x3a>
 8003218:	2b58      	cmp	r3, #88	; 0x58
 800321a:	d050      	beq.n	80032be <ts_formatstring+0xd2>
 800321c:	2b63      	cmp	r3, #99	; 0x63
 800321e:	d00e      	beq.n	800323e <ts_formatstring+0x52>
 8003220:	2b25      	cmp	r3, #37	; 0x25
 8003222:	d058      	beq.n	80032d6 <ts_formatstring+0xea>
 8003224:	e05d      	b.n	80032e2 <ts_formatstring+0xf6>
 8003226:	2b73      	cmp	r3, #115	; 0x73
 8003228:	d02b      	beq.n	8003282 <ts_formatstring+0x96>
 800322a:	2b73      	cmp	r3, #115	; 0x73
 800322c:	dc02      	bgt.n	8003234 <ts_formatstring+0x48>
 800322e:	2b69      	cmp	r3, #105	; 0x69
 8003230:	d00f      	beq.n	8003252 <ts_formatstring+0x66>
 8003232:	e056      	b.n	80032e2 <ts_formatstring+0xf6>
 8003234:	2b75      	cmp	r3, #117	; 0x75
 8003236:	d037      	beq.n	80032a8 <ts_formatstring+0xbc>
 8003238:	2b78      	cmp	r3, #120	; 0x78
 800323a:	d040      	beq.n	80032be <ts_formatstring+0xd2>
 800323c:	e051      	b.n	80032e2 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	1c5a      	adds	r2, r3, #1
 8003242:	60fa      	str	r2, [r7, #12]
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	1d11      	adds	r1, r2, #4
 8003248:	6079      	str	r1, [r7, #4]
 800324a:	6812      	ldr	r2, [r2, #0]
 800324c:	b2d2      	uxtb	r2, r2
 800324e:	701a      	strb	r2, [r3, #0]
				break;
 8003250:	e047      	b.n	80032e2 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	1d1a      	adds	r2, r3, #4
 8003256:	607a      	str	r2, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	2b00      	cmp	r3, #0
 8003260:	da07      	bge.n	8003272 <ts_formatstring+0x86>
					{
						val *= -1;
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	425b      	negs	r3, r3
 8003266:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	1c5a      	adds	r2, r3, #1
 800326c:	60fa      	str	r2, [r7, #12]
 800326e:	222d      	movs	r2, #45	; 0x2d
 8003270:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8003272:	69f9      	ldr	r1, [r7, #28]
 8003274:	f107 030c 	add.w	r3, r7, #12
 8003278:	220a      	movs	r2, #10
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff ff6e 	bl	800315c <ts_itoa>
				}
				break;
 8003280:	e02f      	b.n	80032e2 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	1d1a      	adds	r2, r3, #4
 8003286:	607a      	str	r2, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	61bb      	str	r3, [r7, #24]
					while (*arg)
 800328c:	e007      	b.n	800329e <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	1c5a      	adds	r2, r3, #1
 8003292:	60fa      	str	r2, [r7, #12]
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	1c51      	adds	r1, r2, #1
 8003298:	61b9      	str	r1, [r7, #24]
 800329a:	7812      	ldrb	r2, [r2, #0]
 800329c:	701a      	strb	r2, [r3, #0]
					while (*arg)
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1f3      	bne.n	800328e <ts_formatstring+0xa2>
					}
				}
				break;
 80032a6:	e01c      	b.n	80032e2 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	1d1a      	adds	r2, r3, #4
 80032ac:	607a      	str	r2, [r7, #4]
 80032ae:	6819      	ldr	r1, [r3, #0]
 80032b0:	f107 030c 	add.w	r3, r7, #12
 80032b4:	220a      	movs	r2, #10
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff ff50 	bl	800315c <ts_itoa>
				break;
 80032bc:	e011      	b.n	80032e2 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	1d1a      	adds	r2, r3, #4
 80032c2:	607a      	str	r2, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4619      	mov	r1, r3
 80032c8:	f107 030c 	add.w	r3, r7, #12
 80032cc:	2210      	movs	r2, #16
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff ff44 	bl	800315c <ts_itoa>
				break;
 80032d4:	e005      	b.n	80032e2 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	1c5a      	adds	r2, r3, #1
 80032da:	60fa      	str	r2, [r7, #12]
 80032dc:	2225      	movs	r2, #37	; 0x25
 80032de:	701a      	strb	r2, [r3, #0]
				  break;
 80032e0:	bf00      	nop
			}
			fmt++;
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	3301      	adds	r3, #1
 80032e6:	60bb      	str	r3, [r7, #8]
 80032e8:	e007      	b.n	80032fa <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	1c5a      	adds	r2, r3, #1
 80032ee:	60fa      	str	r2, [r7, #12]
 80032f0:	68ba      	ldr	r2, [r7, #8]
 80032f2:	1c51      	adds	r1, r2, #1
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	7812      	ldrb	r2, [r2, #0]
 80032f8:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f47f af7d 	bne.w	80031fe <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	461a      	mov	r2, r3
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	1ad3      	subs	r3, r2, r3
}
 8003312:	4618      	mov	r0, r3
 8003314:	3720      	adds	r7, #32
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 800331a:	b40e      	push	{r1, r2, r3}
 800331c:	b580      	push	{r7, lr}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 8003324:	f107 0320 	add.w	r3, r7, #32
 8003328:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 800332a:	68ba      	ldr	r2, [r7, #8]
 800332c:	69f9      	ldr	r1, [r7, #28]
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7ff ff5c 	bl	80031ec <ts_formatstring>
 8003334:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 8003336:	68fb      	ldr	r3, [r7, #12]
}
 8003338:	4618      	mov	r0, r3
 800333a:	3714      	adds	r7, #20
 800333c:	46bd      	mov	sp, r7
 800333e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003342:	b003      	add	sp, #12
 8003344:	4770      	bx	lr
	...

08003348 <__libc_init_array>:
 8003348:	b570      	push	{r4, r5, r6, lr}
 800334a:	2500      	movs	r5, #0
 800334c:	4e0c      	ldr	r6, [pc, #48]	; (8003380 <__libc_init_array+0x38>)
 800334e:	4c0d      	ldr	r4, [pc, #52]	; (8003384 <__libc_init_array+0x3c>)
 8003350:	1ba4      	subs	r4, r4, r6
 8003352:	10a4      	asrs	r4, r4, #2
 8003354:	42a5      	cmp	r5, r4
 8003356:	d109      	bne.n	800336c <__libc_init_array+0x24>
 8003358:	f001 f832 	bl	80043c0 <_init>
 800335c:	2500      	movs	r5, #0
 800335e:	4e0a      	ldr	r6, [pc, #40]	; (8003388 <__libc_init_array+0x40>)
 8003360:	4c0a      	ldr	r4, [pc, #40]	; (800338c <__libc_init_array+0x44>)
 8003362:	1ba4      	subs	r4, r4, r6
 8003364:	10a4      	asrs	r4, r4, #2
 8003366:	42a5      	cmp	r5, r4
 8003368:	d105      	bne.n	8003376 <__libc_init_array+0x2e>
 800336a:	bd70      	pop	{r4, r5, r6, pc}
 800336c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003370:	4798      	blx	r3
 8003372:	3501      	adds	r5, #1
 8003374:	e7ee      	b.n	8003354 <__libc_init_array+0xc>
 8003376:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800337a:	4798      	blx	r3
 800337c:	3501      	adds	r5, #1
 800337e:	e7f2      	b.n	8003366 <__libc_init_array+0x1e>
 8003380:	0800e6a8 	.word	0x0800e6a8
 8003384:	0800e6a8 	.word	0x0800e6a8
 8003388:	0800e6a8 	.word	0x0800e6a8
 800338c:	0800e6ac 	.word	0x0800e6ac

08003390 <pow>:
 8003390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003394:	b08f      	sub	sp, #60	; 0x3c
 8003396:	461d      	mov	r5, r3
 8003398:	4680      	mov	r8, r0
 800339a:	4689      	mov	r9, r1
 800339c:	4614      	mov	r4, r2
 800339e:	f000 f95b 	bl	8003658 <__ieee754_pow>
 80033a2:	4fa5      	ldr	r7, [pc, #660]	; (8003638 <pow+0x2a8>)
 80033a4:	e9cd 0100 	strd	r0, r1, [sp]
 80033a8:	f997 3000 	ldrsb.w	r3, [r7]
 80033ac:	463e      	mov	r6, r7
 80033ae:	9302      	str	r3, [sp, #8]
 80033b0:	3301      	adds	r3, #1
 80033b2:	d05f      	beq.n	8003474 <pow+0xe4>
 80033b4:	4622      	mov	r2, r4
 80033b6:	462b      	mov	r3, r5
 80033b8:	4620      	mov	r0, r4
 80033ba:	4629      	mov	r1, r5
 80033bc:	f7fd fb1a 	bl	80009f4 <__aeabi_dcmpun>
 80033c0:	4682      	mov	sl, r0
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d156      	bne.n	8003474 <pow+0xe4>
 80033c6:	4642      	mov	r2, r8
 80033c8:	464b      	mov	r3, r9
 80033ca:	4640      	mov	r0, r8
 80033cc:	4649      	mov	r1, r9
 80033ce:	f7fd fb11 	bl	80009f4 <__aeabi_dcmpun>
 80033d2:	9003      	str	r0, [sp, #12]
 80033d4:	b1e8      	cbz	r0, 8003412 <pow+0x82>
 80033d6:	2200      	movs	r2, #0
 80033d8:	2300      	movs	r3, #0
 80033da:	4620      	mov	r0, r4
 80033dc:	4629      	mov	r1, r5
 80033de:	f7fd fad7 	bl	8000990 <__aeabi_dcmpeq>
 80033e2:	2800      	cmp	r0, #0
 80033e4:	d046      	beq.n	8003474 <pow+0xe4>
 80033e6:	2301      	movs	r3, #1
 80033e8:	2200      	movs	r2, #0
 80033ea:	9304      	str	r3, [sp, #16]
 80033ec:	4b93      	ldr	r3, [pc, #588]	; (800363c <pow+0x2ac>)
 80033ee:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80033f2:	9305      	str	r3, [sp, #20]
 80033f4:	4b92      	ldr	r3, [pc, #584]	; (8003640 <pow+0x2b0>)
 80033f6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80033fa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80033fe:	9b02      	ldr	r3, [sp, #8]
 8003400:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003404:	2b02      	cmp	r3, #2
 8003406:	d031      	beq.n	800346c <pow+0xdc>
 8003408:	a804      	add	r0, sp, #16
 800340a:	f000 fecc 	bl	80041a6 <matherr>
 800340e:	bb38      	cbnz	r0, 8003460 <pow+0xd0>
 8003410:	e058      	b.n	80034c4 <pow+0x134>
 8003412:	f04f 0a00 	mov.w	sl, #0
 8003416:	f04f 0b00 	mov.w	fp, #0
 800341a:	4652      	mov	r2, sl
 800341c:	465b      	mov	r3, fp
 800341e:	4640      	mov	r0, r8
 8003420:	4649      	mov	r1, r9
 8003422:	f7fd fab5 	bl	8000990 <__aeabi_dcmpeq>
 8003426:	2800      	cmp	r0, #0
 8003428:	d051      	beq.n	80034ce <pow+0x13e>
 800342a:	4652      	mov	r2, sl
 800342c:	465b      	mov	r3, fp
 800342e:	4620      	mov	r0, r4
 8003430:	4629      	mov	r1, r5
 8003432:	f7fd faad 	bl	8000990 <__aeabi_dcmpeq>
 8003436:	4606      	mov	r6, r0
 8003438:	b308      	cbz	r0, 800347e <pow+0xee>
 800343a:	2301      	movs	r3, #1
 800343c:	9304      	str	r3, [sp, #16]
 800343e:	4b7f      	ldr	r3, [pc, #508]	; (800363c <pow+0x2ac>)
 8003440:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8003444:	9305      	str	r3, [sp, #20]
 8003446:	9b03      	ldr	r3, [sp, #12]
 8003448:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800344c:	930c      	str	r3, [sp, #48]	; 0x30
 800344e:	9b02      	ldr	r3, [sp, #8]
 8003450:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8003454:	2b00      	cmp	r3, #0
 8003456:	d0d7      	beq.n	8003408 <pow+0x78>
 8003458:	2200      	movs	r2, #0
 800345a:	4b79      	ldr	r3, [pc, #484]	; (8003640 <pow+0x2b0>)
 800345c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003460:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003462:	b11b      	cbz	r3, 800346c <pow+0xdc>
 8003464:	f000 ffa6 	bl	80043b4 <__errno>
 8003468:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800346a:	6003      	str	r3, [r0, #0]
 800346c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 8003470:	e88d 0018 	stmia.w	sp, {r3, r4}
 8003474:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003478:	b00f      	add	sp, #60	; 0x3c
 800347a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800347e:	4620      	mov	r0, r4
 8003480:	4629      	mov	r1, r5
 8003482:	f000 fe8a 	bl	800419a <finite>
 8003486:	2800      	cmp	r0, #0
 8003488:	d0f4      	beq.n	8003474 <pow+0xe4>
 800348a:	4652      	mov	r2, sl
 800348c:	465b      	mov	r3, fp
 800348e:	4620      	mov	r0, r4
 8003490:	4629      	mov	r1, r5
 8003492:	f7fd fa87 	bl	80009a4 <__aeabi_dcmplt>
 8003496:	2800      	cmp	r0, #0
 8003498:	d0ec      	beq.n	8003474 <pow+0xe4>
 800349a:	2301      	movs	r3, #1
 800349c:	9304      	str	r3, [sp, #16]
 800349e:	4b67      	ldr	r3, [pc, #412]	; (800363c <pow+0x2ac>)
 80034a0:	960c      	str	r6, [sp, #48]	; 0x30
 80034a2:	9305      	str	r3, [sp, #20]
 80034a4:	f997 3000 	ldrsb.w	r3, [r7]
 80034a8:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80034ac:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80034b0:	b913      	cbnz	r3, 80034b8 <pow+0x128>
 80034b2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80034b6:	e7a7      	b.n	8003408 <pow+0x78>
 80034b8:	2000      	movs	r0, #0
 80034ba:	4962      	ldr	r1, [pc, #392]	; (8003644 <pow+0x2b4>)
 80034bc:	2b02      	cmp	r3, #2
 80034be:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80034c2:	d1a1      	bne.n	8003408 <pow+0x78>
 80034c4:	f000 ff76 	bl	80043b4 <__errno>
 80034c8:	2321      	movs	r3, #33	; 0x21
 80034ca:	6003      	str	r3, [r0, #0]
 80034cc:	e7c8      	b.n	8003460 <pow+0xd0>
 80034ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80034d2:	f000 fe62 	bl	800419a <finite>
 80034d6:	9002      	str	r0, [sp, #8]
 80034d8:	2800      	cmp	r0, #0
 80034da:	d17f      	bne.n	80035dc <pow+0x24c>
 80034dc:	4640      	mov	r0, r8
 80034de:	4649      	mov	r1, r9
 80034e0:	f000 fe5b 	bl	800419a <finite>
 80034e4:	2800      	cmp	r0, #0
 80034e6:	d079      	beq.n	80035dc <pow+0x24c>
 80034e8:	4620      	mov	r0, r4
 80034ea:	4629      	mov	r1, r5
 80034ec:	f000 fe55 	bl	800419a <finite>
 80034f0:	2800      	cmp	r0, #0
 80034f2:	d073      	beq.n	80035dc <pow+0x24c>
 80034f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80034f8:	4619      	mov	r1, r3
 80034fa:	4610      	mov	r0, r2
 80034fc:	f7fd fa7a 	bl	80009f4 <__aeabi_dcmpun>
 8003500:	f997 7000 	ldrsb.w	r7, [r7]
 8003504:	4b4d      	ldr	r3, [pc, #308]	; (800363c <pow+0x2ac>)
 8003506:	b1a0      	cbz	r0, 8003532 <pow+0x1a2>
 8003508:	2201      	movs	r2, #1
 800350a:	9305      	str	r3, [sp, #20]
 800350c:	9b02      	ldr	r3, [sp, #8]
 800350e:	9204      	str	r2, [sp, #16]
 8003510:	930c      	str	r3, [sp, #48]	; 0x30
 8003512:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8003516:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800351a:	2f00      	cmp	r7, #0
 800351c:	d0c9      	beq.n	80034b2 <pow+0x122>
 800351e:	4652      	mov	r2, sl
 8003520:	465b      	mov	r3, fp
 8003522:	4650      	mov	r0, sl
 8003524:	4659      	mov	r1, fp
 8003526:	f7fd f8f5 	bl	8000714 <__aeabi_ddiv>
 800352a:	2f02      	cmp	r7, #2
 800352c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003530:	e7c7      	b.n	80034c2 <pow+0x132>
 8003532:	2203      	movs	r2, #3
 8003534:	9305      	str	r3, [sp, #20]
 8003536:	9204      	str	r2, [sp, #16]
 8003538:	900c      	str	r0, [sp, #48]	; 0x30
 800353a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800353e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003542:	bb57      	cbnz	r7, 800359a <pow+0x20a>
 8003544:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003548:	4b3f      	ldr	r3, [pc, #252]	; (8003648 <pow+0x2b8>)
 800354a:	4640      	mov	r0, r8
 800354c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003550:	4649      	mov	r1, r9
 8003552:	4652      	mov	r2, sl
 8003554:	465b      	mov	r3, fp
 8003556:	f7fd fa25 	bl	80009a4 <__aeabi_dcmplt>
 800355a:	2800      	cmp	r0, #0
 800355c:	d064      	beq.n	8003628 <pow+0x298>
 800355e:	2200      	movs	r2, #0
 8003560:	4b3a      	ldr	r3, [pc, #232]	; (800364c <pow+0x2bc>)
 8003562:	4620      	mov	r0, r4
 8003564:	4629      	mov	r1, r5
 8003566:	f7fc ffab 	bl	80004c0 <__aeabi_dmul>
 800356a:	4604      	mov	r4, r0
 800356c:	460d      	mov	r5, r1
 800356e:	f000 fe23 	bl	80041b8 <rint>
 8003572:	4602      	mov	r2, r0
 8003574:	460b      	mov	r3, r1
 8003576:	4620      	mov	r0, r4
 8003578:	4629      	mov	r1, r5
 800357a:	f7fd fa09 	bl	8000990 <__aeabi_dcmpeq>
 800357e:	b920      	cbnz	r0, 800358a <pow+0x1fa>
 8003580:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003584:	4b32      	ldr	r3, [pc, #200]	; (8003650 <pow+0x2c0>)
 8003586:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800358a:	f996 3000 	ldrsb.w	r3, [r6]
 800358e:	2b02      	cmp	r3, #2
 8003590:	d14a      	bne.n	8003628 <pow+0x298>
 8003592:	f000 ff0f 	bl	80043b4 <__errno>
 8003596:	2322      	movs	r3, #34	; 0x22
 8003598:	e797      	b.n	80034ca <pow+0x13a>
 800359a:	2200      	movs	r2, #0
 800359c:	4b2d      	ldr	r3, [pc, #180]	; (8003654 <pow+0x2c4>)
 800359e:	4640      	mov	r0, r8
 80035a0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80035a4:	4649      	mov	r1, r9
 80035a6:	4652      	mov	r2, sl
 80035a8:	465b      	mov	r3, fp
 80035aa:	f7fd f9fb 	bl	80009a4 <__aeabi_dcmplt>
 80035ae:	2800      	cmp	r0, #0
 80035b0:	d0eb      	beq.n	800358a <pow+0x1fa>
 80035b2:	2200      	movs	r2, #0
 80035b4:	4b25      	ldr	r3, [pc, #148]	; (800364c <pow+0x2bc>)
 80035b6:	4620      	mov	r0, r4
 80035b8:	4629      	mov	r1, r5
 80035ba:	f7fc ff81 	bl	80004c0 <__aeabi_dmul>
 80035be:	4604      	mov	r4, r0
 80035c0:	460d      	mov	r5, r1
 80035c2:	f000 fdf9 	bl	80041b8 <rint>
 80035c6:	4602      	mov	r2, r0
 80035c8:	460b      	mov	r3, r1
 80035ca:	4620      	mov	r0, r4
 80035cc:	4629      	mov	r1, r5
 80035ce:	f7fd f9df 	bl	8000990 <__aeabi_dcmpeq>
 80035d2:	2800      	cmp	r0, #0
 80035d4:	d1d9      	bne.n	800358a <pow+0x1fa>
 80035d6:	2200      	movs	r2, #0
 80035d8:	4b1a      	ldr	r3, [pc, #104]	; (8003644 <pow+0x2b4>)
 80035da:	e7d4      	b.n	8003586 <pow+0x1f6>
 80035dc:	2200      	movs	r2, #0
 80035de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80035e2:	2300      	movs	r3, #0
 80035e4:	f7fd f9d4 	bl	8000990 <__aeabi_dcmpeq>
 80035e8:	2800      	cmp	r0, #0
 80035ea:	f43f af43 	beq.w	8003474 <pow+0xe4>
 80035ee:	4640      	mov	r0, r8
 80035f0:	4649      	mov	r1, r9
 80035f2:	f000 fdd2 	bl	800419a <finite>
 80035f6:	2800      	cmp	r0, #0
 80035f8:	f43f af3c 	beq.w	8003474 <pow+0xe4>
 80035fc:	4620      	mov	r0, r4
 80035fe:	4629      	mov	r1, r5
 8003600:	f000 fdcb 	bl	800419a <finite>
 8003604:	2800      	cmp	r0, #0
 8003606:	f43f af35 	beq.w	8003474 <pow+0xe4>
 800360a:	2304      	movs	r3, #4
 800360c:	9304      	str	r3, [sp, #16]
 800360e:	4b0b      	ldr	r3, [pc, #44]	; (800363c <pow+0x2ac>)
 8003610:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003614:	9305      	str	r3, [sp, #20]
 8003616:	2300      	movs	r3, #0
 8003618:	2400      	movs	r4, #0
 800361a:	930c      	str	r3, [sp, #48]	; 0x30
 800361c:	2300      	movs	r3, #0
 800361e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8003622:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8003626:	e7b0      	b.n	800358a <pow+0x1fa>
 8003628:	a804      	add	r0, sp, #16
 800362a:	f000 fdbc 	bl	80041a6 <matherr>
 800362e:	2800      	cmp	r0, #0
 8003630:	f47f af16 	bne.w	8003460 <pow+0xd0>
 8003634:	e7ad      	b.n	8003592 <pow+0x202>
 8003636:	bf00      	nop
 8003638:	20000008 	.word	0x20000008
 800363c:	0800e664 	.word	0x0800e664
 8003640:	3ff00000 	.word	0x3ff00000
 8003644:	fff00000 	.word	0xfff00000
 8003648:	47efffff 	.word	0x47efffff
 800364c:	3fe00000 	.word	0x3fe00000
 8003650:	c7efffff 	.word	0xc7efffff
 8003654:	7ff00000 	.word	0x7ff00000

08003658 <__ieee754_pow>:
 8003658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800365c:	b093      	sub	sp, #76	; 0x4c
 800365e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003662:	9e03      	ldr	r6, [sp, #12]
 8003664:	9a02      	ldr	r2, [sp, #8]
 8003666:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800366a:	ea55 0302 	orrs.w	r3, r5, r2
 800366e:	4607      	mov	r7, r0
 8003670:	4688      	mov	r8, r1
 8003672:	4682      	mov	sl, r0
 8003674:	4689      	mov	r9, r1
 8003676:	f000 849e 	beq.w	8003fb6 <__ieee754_pow+0x95e>
 800367a:	4b77      	ldr	r3, [pc, #476]	; (8003858 <__ieee754_pow+0x200>)
 800367c:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8003680:	429c      	cmp	r4, r3
 8003682:	dc09      	bgt.n	8003698 <__ieee754_pow+0x40>
 8003684:	d103      	bne.n	800368e <__ieee754_pow+0x36>
 8003686:	b938      	cbnz	r0, 8003698 <__ieee754_pow+0x40>
 8003688:	42a5      	cmp	r5, r4
 800368a:	dc0d      	bgt.n	80036a8 <__ieee754_pow+0x50>
 800368c:	e001      	b.n	8003692 <__ieee754_pow+0x3a>
 800368e:	429d      	cmp	r5, r3
 8003690:	dc02      	bgt.n	8003698 <__ieee754_pow+0x40>
 8003692:	429d      	cmp	r5, r3
 8003694:	d10e      	bne.n	80036b4 <__ieee754_pow+0x5c>
 8003696:	b16a      	cbz	r2, 80036b4 <__ieee754_pow+0x5c>
 8003698:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800369c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80036a0:	ea54 030a 	orrs.w	r3, r4, sl
 80036a4:	f000 8487 	beq.w	8003fb6 <__ieee754_pow+0x95e>
 80036a8:	486c      	ldr	r0, [pc, #432]	; (800385c <__ieee754_pow+0x204>)
 80036aa:	b013      	add	sp, #76	; 0x4c
 80036ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036b0:	f000 bd7c 	b.w	80041ac <nan>
 80036b4:	f1b9 0f00 	cmp.w	r9, #0
 80036b8:	da4f      	bge.n	800375a <__ieee754_pow+0x102>
 80036ba:	4b69      	ldr	r3, [pc, #420]	; (8003860 <__ieee754_pow+0x208>)
 80036bc:	429d      	cmp	r5, r3
 80036be:	dc4a      	bgt.n	8003756 <__ieee754_pow+0xfe>
 80036c0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80036c4:	429d      	cmp	r5, r3
 80036c6:	dd48      	ble.n	800375a <__ieee754_pow+0x102>
 80036c8:	152b      	asrs	r3, r5, #20
 80036ca:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80036ce:	2b14      	cmp	r3, #20
 80036d0:	dd24      	ble.n	800371c <__ieee754_pow+0xc4>
 80036d2:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80036d6:	fa22 f103 	lsr.w	r1, r2, r3
 80036da:	fa01 f303 	lsl.w	r3, r1, r3
 80036de:	429a      	cmp	r2, r3
 80036e0:	d13b      	bne.n	800375a <__ieee754_pow+0x102>
 80036e2:	f001 0101 	and.w	r1, r1, #1
 80036e6:	f1c1 0302 	rsb	r3, r1, #2
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	2a00      	cmp	r2, #0
 80036ee:	d156      	bne.n	800379e <__ieee754_pow+0x146>
 80036f0:	4b59      	ldr	r3, [pc, #356]	; (8003858 <__ieee754_pow+0x200>)
 80036f2:	429d      	cmp	r5, r3
 80036f4:	d122      	bne.n	800373c <__ieee754_pow+0xe4>
 80036f6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80036fa:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80036fe:	ea53 030a 	orrs.w	r3, r3, sl
 8003702:	f000 8458 	beq.w	8003fb6 <__ieee754_pow+0x95e>
 8003706:	4b57      	ldr	r3, [pc, #348]	; (8003864 <__ieee754_pow+0x20c>)
 8003708:	429c      	cmp	r4, r3
 800370a:	dd28      	ble.n	800375e <__ieee754_pow+0x106>
 800370c:	2e00      	cmp	r6, #0
 800370e:	f280 8456 	bge.w	8003fbe <__ieee754_pow+0x966>
 8003712:	2000      	movs	r0, #0
 8003714:	2100      	movs	r1, #0
 8003716:	b013      	add	sp, #76	; 0x4c
 8003718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800371c:	2a00      	cmp	r2, #0
 800371e:	d13c      	bne.n	800379a <__ieee754_pow+0x142>
 8003720:	f1c3 0314 	rsb	r3, r3, #20
 8003724:	fa45 f103 	asr.w	r1, r5, r3
 8003728:	fa01 f303 	lsl.w	r3, r1, r3
 800372c:	429d      	cmp	r5, r3
 800372e:	f040 844e 	bne.w	8003fce <__ieee754_pow+0x976>
 8003732:	f001 0101 	and.w	r1, r1, #1
 8003736:	f1c1 0302 	rsb	r3, r1, #2
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	4b4a      	ldr	r3, [pc, #296]	; (8003868 <__ieee754_pow+0x210>)
 800373e:	429d      	cmp	r5, r3
 8003740:	d114      	bne.n	800376c <__ieee754_pow+0x114>
 8003742:	2e00      	cmp	r6, #0
 8003744:	f280 843f 	bge.w	8003fc6 <__ieee754_pow+0x96e>
 8003748:	463a      	mov	r2, r7
 800374a:	4643      	mov	r3, r8
 800374c:	2000      	movs	r0, #0
 800374e:	4946      	ldr	r1, [pc, #280]	; (8003868 <__ieee754_pow+0x210>)
 8003750:	f7fc ffe0 	bl	8000714 <__aeabi_ddiv>
 8003754:	e7df      	b.n	8003716 <__ieee754_pow+0xbe>
 8003756:	2302      	movs	r3, #2
 8003758:	e7c7      	b.n	80036ea <__ieee754_pow+0x92>
 800375a:	2300      	movs	r3, #0
 800375c:	e7c5      	b.n	80036ea <__ieee754_pow+0x92>
 800375e:	2e00      	cmp	r6, #0
 8003760:	dad7      	bge.n	8003712 <__ieee754_pow+0xba>
 8003762:	9b03      	ldr	r3, [sp, #12]
 8003764:	9802      	ldr	r0, [sp, #8]
 8003766:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800376a:	e7d4      	b.n	8003716 <__ieee754_pow+0xbe>
 800376c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8003770:	d106      	bne.n	8003780 <__ieee754_pow+0x128>
 8003772:	463a      	mov	r2, r7
 8003774:	4643      	mov	r3, r8
 8003776:	4638      	mov	r0, r7
 8003778:	4641      	mov	r1, r8
 800377a:	f7fc fea1 	bl	80004c0 <__aeabi_dmul>
 800377e:	e7ca      	b.n	8003716 <__ieee754_pow+0xbe>
 8003780:	4b3a      	ldr	r3, [pc, #232]	; (800386c <__ieee754_pow+0x214>)
 8003782:	429e      	cmp	r6, r3
 8003784:	d10b      	bne.n	800379e <__ieee754_pow+0x146>
 8003786:	f1b9 0f00 	cmp.w	r9, #0
 800378a:	db08      	blt.n	800379e <__ieee754_pow+0x146>
 800378c:	4638      	mov	r0, r7
 800378e:	4641      	mov	r1, r8
 8003790:	b013      	add	sp, #76	; 0x4c
 8003792:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003796:	f000 bc51 	b.w	800403c <__ieee754_sqrt>
 800379a:	2300      	movs	r3, #0
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	4638      	mov	r0, r7
 80037a0:	4641      	mov	r1, r8
 80037a2:	f000 fcf7 	bl	8004194 <fabs>
 80037a6:	f1ba 0f00 	cmp.w	sl, #0
 80037aa:	d125      	bne.n	80037f8 <__ieee754_pow+0x1a0>
 80037ac:	b124      	cbz	r4, 80037b8 <__ieee754_pow+0x160>
 80037ae:	4b2e      	ldr	r3, [pc, #184]	; (8003868 <__ieee754_pow+0x210>)
 80037b0:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d11f      	bne.n	80037f8 <__ieee754_pow+0x1a0>
 80037b8:	2e00      	cmp	r6, #0
 80037ba:	da05      	bge.n	80037c8 <__ieee754_pow+0x170>
 80037bc:	4602      	mov	r2, r0
 80037be:	460b      	mov	r3, r1
 80037c0:	2000      	movs	r0, #0
 80037c2:	4929      	ldr	r1, [pc, #164]	; (8003868 <__ieee754_pow+0x210>)
 80037c4:	f7fc ffa6 	bl	8000714 <__aeabi_ddiv>
 80037c8:	f1b9 0f00 	cmp.w	r9, #0
 80037cc:	daa3      	bge.n	8003716 <__ieee754_pow+0xbe>
 80037ce:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80037d2:	9b00      	ldr	r3, [sp, #0]
 80037d4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80037d8:	4323      	orrs	r3, r4
 80037da:	d106      	bne.n	80037ea <__ieee754_pow+0x192>
 80037dc:	4602      	mov	r2, r0
 80037de:	460b      	mov	r3, r1
 80037e0:	f7fc fcba 	bl	8000158 <__aeabi_dsub>
 80037e4:	4602      	mov	r2, r0
 80037e6:	460b      	mov	r3, r1
 80037e8:	e7b2      	b.n	8003750 <__ieee754_pow+0xf8>
 80037ea:	9b00      	ldr	r3, [sp, #0]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d192      	bne.n	8003716 <__ieee754_pow+0xbe>
 80037f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80037f4:	4619      	mov	r1, r3
 80037f6:	e78e      	b.n	8003716 <__ieee754_pow+0xbe>
 80037f8:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 80037fc:	f109 33ff 	add.w	r3, r9, #4294967295
 8003800:	930c      	str	r3, [sp, #48]	; 0x30
 8003802:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003804:	9b00      	ldr	r3, [sp, #0]
 8003806:	4313      	orrs	r3, r2
 8003808:	d104      	bne.n	8003814 <__ieee754_pow+0x1bc>
 800380a:	463a      	mov	r2, r7
 800380c:	4643      	mov	r3, r8
 800380e:	4638      	mov	r0, r7
 8003810:	4641      	mov	r1, r8
 8003812:	e7e5      	b.n	80037e0 <__ieee754_pow+0x188>
 8003814:	4b16      	ldr	r3, [pc, #88]	; (8003870 <__ieee754_pow+0x218>)
 8003816:	429d      	cmp	r5, r3
 8003818:	f340 80fc 	ble.w	8003a14 <__ieee754_pow+0x3bc>
 800381c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8003820:	429d      	cmp	r5, r3
 8003822:	dd0b      	ble.n	800383c <__ieee754_pow+0x1e4>
 8003824:	4b0f      	ldr	r3, [pc, #60]	; (8003864 <__ieee754_pow+0x20c>)
 8003826:	429c      	cmp	r4, r3
 8003828:	dc0e      	bgt.n	8003848 <__ieee754_pow+0x1f0>
 800382a:	2e00      	cmp	r6, #0
 800382c:	f6bf af71 	bge.w	8003712 <__ieee754_pow+0xba>
 8003830:	a307      	add	r3, pc, #28	; (adr r3, 8003850 <__ieee754_pow+0x1f8>)
 8003832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003836:	4610      	mov	r0, r2
 8003838:	4619      	mov	r1, r3
 800383a:	e79e      	b.n	800377a <__ieee754_pow+0x122>
 800383c:	4b0d      	ldr	r3, [pc, #52]	; (8003874 <__ieee754_pow+0x21c>)
 800383e:	429c      	cmp	r4, r3
 8003840:	ddf3      	ble.n	800382a <__ieee754_pow+0x1d2>
 8003842:	4b09      	ldr	r3, [pc, #36]	; (8003868 <__ieee754_pow+0x210>)
 8003844:	429c      	cmp	r4, r3
 8003846:	dd17      	ble.n	8003878 <__ieee754_pow+0x220>
 8003848:	2e00      	cmp	r6, #0
 800384a:	dcf1      	bgt.n	8003830 <__ieee754_pow+0x1d8>
 800384c:	e761      	b.n	8003712 <__ieee754_pow+0xba>
 800384e:	bf00      	nop
 8003850:	8800759c 	.word	0x8800759c
 8003854:	7e37e43c 	.word	0x7e37e43c
 8003858:	7ff00000 	.word	0x7ff00000
 800385c:	0800e667 	.word	0x0800e667
 8003860:	433fffff 	.word	0x433fffff
 8003864:	3fefffff 	.word	0x3fefffff
 8003868:	3ff00000 	.word	0x3ff00000
 800386c:	3fe00000 	.word	0x3fe00000
 8003870:	41e00000 	.word	0x41e00000
 8003874:	3feffffe 	.word	0x3feffffe
 8003878:	2200      	movs	r2, #0
 800387a:	4b61      	ldr	r3, [pc, #388]	; (8003a00 <__ieee754_pow+0x3a8>)
 800387c:	f7fc fc6c 	bl	8000158 <__aeabi_dsub>
 8003880:	a355      	add	r3, pc, #340	; (adr r3, 80039d8 <__ieee754_pow+0x380>)
 8003882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003886:	4604      	mov	r4, r0
 8003888:	460d      	mov	r5, r1
 800388a:	f7fc fe19 	bl	80004c0 <__aeabi_dmul>
 800388e:	a354      	add	r3, pc, #336	; (adr r3, 80039e0 <__ieee754_pow+0x388>)
 8003890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003894:	4606      	mov	r6, r0
 8003896:	460f      	mov	r7, r1
 8003898:	4620      	mov	r0, r4
 800389a:	4629      	mov	r1, r5
 800389c:	f7fc fe10 	bl	80004c0 <__aeabi_dmul>
 80038a0:	2200      	movs	r2, #0
 80038a2:	4682      	mov	sl, r0
 80038a4:	468b      	mov	fp, r1
 80038a6:	4b57      	ldr	r3, [pc, #348]	; (8003a04 <__ieee754_pow+0x3ac>)
 80038a8:	4620      	mov	r0, r4
 80038aa:	4629      	mov	r1, r5
 80038ac:	f7fc fe08 	bl	80004c0 <__aeabi_dmul>
 80038b0:	4602      	mov	r2, r0
 80038b2:	460b      	mov	r3, r1
 80038b4:	a14c      	add	r1, pc, #304	; (adr r1, 80039e8 <__ieee754_pow+0x390>)
 80038b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80038ba:	f7fc fc4d 	bl	8000158 <__aeabi_dsub>
 80038be:	4622      	mov	r2, r4
 80038c0:	462b      	mov	r3, r5
 80038c2:	f7fc fdfd 	bl	80004c0 <__aeabi_dmul>
 80038c6:	4602      	mov	r2, r0
 80038c8:	460b      	mov	r3, r1
 80038ca:	2000      	movs	r0, #0
 80038cc:	494e      	ldr	r1, [pc, #312]	; (8003a08 <__ieee754_pow+0x3b0>)
 80038ce:	f7fc fc43 	bl	8000158 <__aeabi_dsub>
 80038d2:	4622      	mov	r2, r4
 80038d4:	462b      	mov	r3, r5
 80038d6:	4680      	mov	r8, r0
 80038d8:	4689      	mov	r9, r1
 80038da:	4620      	mov	r0, r4
 80038dc:	4629      	mov	r1, r5
 80038de:	f7fc fdef 	bl	80004c0 <__aeabi_dmul>
 80038e2:	4602      	mov	r2, r0
 80038e4:	460b      	mov	r3, r1
 80038e6:	4640      	mov	r0, r8
 80038e8:	4649      	mov	r1, r9
 80038ea:	f7fc fde9 	bl	80004c0 <__aeabi_dmul>
 80038ee:	a340      	add	r3, pc, #256	; (adr r3, 80039f0 <__ieee754_pow+0x398>)
 80038f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f4:	f7fc fde4 	bl	80004c0 <__aeabi_dmul>
 80038f8:	4602      	mov	r2, r0
 80038fa:	460b      	mov	r3, r1
 80038fc:	4650      	mov	r0, sl
 80038fe:	4659      	mov	r1, fp
 8003900:	f7fc fc2a 	bl	8000158 <__aeabi_dsub>
 8003904:	4602      	mov	r2, r0
 8003906:	460b      	mov	r3, r1
 8003908:	4604      	mov	r4, r0
 800390a:	460d      	mov	r5, r1
 800390c:	4630      	mov	r0, r6
 800390e:	4639      	mov	r1, r7
 8003910:	f7fc fc24 	bl	800015c <__adddf3>
 8003914:	2000      	movs	r0, #0
 8003916:	468b      	mov	fp, r1
 8003918:	4682      	mov	sl, r0
 800391a:	4632      	mov	r2, r6
 800391c:	463b      	mov	r3, r7
 800391e:	f7fc fc1b 	bl	8000158 <__aeabi_dsub>
 8003922:	4602      	mov	r2, r0
 8003924:	460b      	mov	r3, r1
 8003926:	4620      	mov	r0, r4
 8003928:	4629      	mov	r1, r5
 800392a:	f7fc fc15 	bl	8000158 <__aeabi_dsub>
 800392e:	9b00      	ldr	r3, [sp, #0]
 8003930:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003932:	3b01      	subs	r3, #1
 8003934:	4313      	orrs	r3, r2
 8003936:	f04f 0300 	mov.w	r3, #0
 800393a:	bf0c      	ite	eq
 800393c:	4c33      	ldreq	r4, [pc, #204]	; (8003a0c <__ieee754_pow+0x3b4>)
 800393e:	4c30      	ldrne	r4, [pc, #192]	; (8003a00 <__ieee754_pow+0x3a8>)
 8003940:	4606      	mov	r6, r0
 8003942:	e88d 0018 	stmia.w	sp, {r3, r4}
 8003946:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800394a:	2400      	movs	r4, #0
 800394c:	460f      	mov	r7, r1
 800394e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003952:	4622      	mov	r2, r4
 8003954:	462b      	mov	r3, r5
 8003956:	f7fc fbff 	bl	8000158 <__aeabi_dsub>
 800395a:	4652      	mov	r2, sl
 800395c:	465b      	mov	r3, fp
 800395e:	f7fc fdaf 	bl	80004c0 <__aeabi_dmul>
 8003962:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003966:	4680      	mov	r8, r0
 8003968:	4689      	mov	r9, r1
 800396a:	4630      	mov	r0, r6
 800396c:	4639      	mov	r1, r7
 800396e:	f7fc fda7 	bl	80004c0 <__aeabi_dmul>
 8003972:	4602      	mov	r2, r0
 8003974:	460b      	mov	r3, r1
 8003976:	4640      	mov	r0, r8
 8003978:	4649      	mov	r1, r9
 800397a:	f7fc fbef 	bl	800015c <__adddf3>
 800397e:	4622      	mov	r2, r4
 8003980:	462b      	mov	r3, r5
 8003982:	4680      	mov	r8, r0
 8003984:	4689      	mov	r9, r1
 8003986:	4650      	mov	r0, sl
 8003988:	4659      	mov	r1, fp
 800398a:	f7fc fd99 	bl	80004c0 <__aeabi_dmul>
 800398e:	4604      	mov	r4, r0
 8003990:	460d      	mov	r5, r1
 8003992:	460b      	mov	r3, r1
 8003994:	4602      	mov	r2, r0
 8003996:	4649      	mov	r1, r9
 8003998:	4640      	mov	r0, r8
 800399a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800399e:	f7fc fbdd 	bl	800015c <__adddf3>
 80039a2:	4b1b      	ldr	r3, [pc, #108]	; (8003a10 <__ieee754_pow+0x3b8>)
 80039a4:	4682      	mov	sl, r0
 80039a6:	4299      	cmp	r1, r3
 80039a8:	460f      	mov	r7, r1
 80039aa:	460e      	mov	r6, r1
 80039ac:	f340 82da 	ble.w	8003f64 <__ieee754_pow+0x90c>
 80039b0:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80039b4:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80039b8:	4303      	orrs	r3, r0
 80039ba:	f000 81d5 	beq.w	8003d68 <__ieee754_pow+0x710>
 80039be:	a30e      	add	r3, pc, #56	; (adr r3, 80039f8 <__ieee754_pow+0x3a0>)
 80039c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80039c8:	f7fc fd7a 	bl	80004c0 <__aeabi_dmul>
 80039cc:	a30a      	add	r3, pc, #40	; (adr r3, 80039f8 <__ieee754_pow+0x3a0>)
 80039ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d2:	e6d2      	b.n	800377a <__ieee754_pow+0x122>
 80039d4:	f3af 8000 	nop.w
 80039d8:	60000000 	.word	0x60000000
 80039dc:	3ff71547 	.word	0x3ff71547
 80039e0:	f85ddf44 	.word	0xf85ddf44
 80039e4:	3e54ae0b 	.word	0x3e54ae0b
 80039e8:	55555555 	.word	0x55555555
 80039ec:	3fd55555 	.word	0x3fd55555
 80039f0:	652b82fe 	.word	0x652b82fe
 80039f4:	3ff71547 	.word	0x3ff71547
 80039f8:	8800759c 	.word	0x8800759c
 80039fc:	7e37e43c 	.word	0x7e37e43c
 8003a00:	3ff00000 	.word	0x3ff00000
 8003a04:	3fd00000 	.word	0x3fd00000
 8003a08:	3fe00000 	.word	0x3fe00000
 8003a0c:	bff00000 	.word	0xbff00000
 8003a10:	408fffff 	.word	0x408fffff
 8003a14:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8003a18:	f04f 0200 	mov.w	r2, #0
 8003a1c:	da05      	bge.n	8003a2a <__ieee754_pow+0x3d2>
 8003a1e:	4bca      	ldr	r3, [pc, #808]	; (8003d48 <__ieee754_pow+0x6f0>)
 8003a20:	f7fc fd4e 	bl	80004c0 <__aeabi_dmul>
 8003a24:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8003a28:	460c      	mov	r4, r1
 8003a2a:	1523      	asrs	r3, r4, #20
 8003a2c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003a30:	4413      	add	r3, r2
 8003a32:	9307      	str	r3, [sp, #28]
 8003a34:	4bc5      	ldr	r3, [pc, #788]	; (8003d4c <__ieee754_pow+0x6f4>)
 8003a36:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8003a3a:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8003a3e:	429c      	cmp	r4, r3
 8003a40:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8003a44:	dd08      	ble.n	8003a58 <__ieee754_pow+0x400>
 8003a46:	4bc2      	ldr	r3, [pc, #776]	; (8003d50 <__ieee754_pow+0x6f8>)
 8003a48:	429c      	cmp	r4, r3
 8003a4a:	f340 8154 	ble.w	8003cf6 <__ieee754_pow+0x69e>
 8003a4e:	9b07      	ldr	r3, [sp, #28]
 8003a50:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8003a54:	3301      	adds	r3, #1
 8003a56:	9307      	str	r3, [sp, #28]
 8003a58:	2600      	movs	r6, #0
 8003a5a:	4629      	mov	r1, r5
 8003a5c:	00f3      	lsls	r3, r6, #3
 8003a5e:	930d      	str	r3, [sp, #52]	; 0x34
 8003a60:	4bbc      	ldr	r3, [pc, #752]	; (8003d54 <__ieee754_pow+0x6fc>)
 8003a62:	00f2      	lsls	r2, r6, #3
 8003a64:	4413      	add	r3, r2
 8003a66:	cb18      	ldmia	r3, {r3, r4}
 8003a68:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	4623      	mov	r3, r4
 8003a70:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003a74:	f7fc fb70 	bl	8000158 <__aeabi_dsub>
 8003a78:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003a7c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8003a80:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003a84:	f7fc fb6a 	bl	800015c <__adddf3>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	2000      	movs	r0, #0
 8003a8e:	49b2      	ldr	r1, [pc, #712]	; (8003d58 <__ieee754_pow+0x700>)
 8003a90:	f7fc fe40 	bl	8000714 <__aeabi_ddiv>
 8003a94:	4602      	mov	r2, r0
 8003a96:	460b      	mov	r3, r1
 8003a98:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003a9c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003aa0:	f7fc fd0e 	bl	80004c0 <__aeabi_dmul>
 8003aa4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003aa8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8003aac:	f04f 0a00 	mov.w	sl, #0
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	106d      	asrs	r5, r5, #1
 8003ab4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8003ab8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8003abc:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8003ac0:	4659      	mov	r1, fp
 8003ac2:	4650      	mov	r0, sl
 8003ac4:	4614      	mov	r4, r2
 8003ac6:	461d      	mov	r5, r3
 8003ac8:	f7fc fcfa 	bl	80004c0 <__aeabi_dmul>
 8003acc:	4602      	mov	r2, r0
 8003ace:	460b      	mov	r3, r1
 8003ad0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003ad4:	f7fc fb40 	bl	8000158 <__aeabi_dsub>
 8003ad8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003adc:	4606      	mov	r6, r0
 8003ade:	460f      	mov	r7, r1
 8003ae0:	4620      	mov	r0, r4
 8003ae2:	4629      	mov	r1, r5
 8003ae4:	f7fc fb38 	bl	8000158 <__aeabi_dsub>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	460b      	mov	r3, r1
 8003aec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003af0:	f7fc fb32 	bl	8000158 <__aeabi_dsub>
 8003af4:	465b      	mov	r3, fp
 8003af6:	4652      	mov	r2, sl
 8003af8:	f7fc fce2 	bl	80004c0 <__aeabi_dmul>
 8003afc:	4602      	mov	r2, r0
 8003afe:	460b      	mov	r3, r1
 8003b00:	4630      	mov	r0, r6
 8003b02:	4639      	mov	r1, r7
 8003b04:	f7fc fb28 	bl	8000158 <__aeabi_dsub>
 8003b08:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003b0c:	f7fc fcd8 	bl	80004c0 <__aeabi_dmul>
 8003b10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b14:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003b18:	4610      	mov	r0, r2
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	f7fc fcd0 	bl	80004c0 <__aeabi_dmul>
 8003b20:	a377      	add	r3, pc, #476	; (adr r3, 8003d00 <__ieee754_pow+0x6a8>)
 8003b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b26:	4604      	mov	r4, r0
 8003b28:	460d      	mov	r5, r1
 8003b2a:	f7fc fcc9 	bl	80004c0 <__aeabi_dmul>
 8003b2e:	a376      	add	r3, pc, #472	; (adr r3, 8003d08 <__ieee754_pow+0x6b0>)
 8003b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b34:	f7fc fb12 	bl	800015c <__adddf3>
 8003b38:	4622      	mov	r2, r4
 8003b3a:	462b      	mov	r3, r5
 8003b3c:	f7fc fcc0 	bl	80004c0 <__aeabi_dmul>
 8003b40:	a373      	add	r3, pc, #460	; (adr r3, 8003d10 <__ieee754_pow+0x6b8>)
 8003b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b46:	f7fc fb09 	bl	800015c <__adddf3>
 8003b4a:	4622      	mov	r2, r4
 8003b4c:	462b      	mov	r3, r5
 8003b4e:	f7fc fcb7 	bl	80004c0 <__aeabi_dmul>
 8003b52:	a371      	add	r3, pc, #452	; (adr r3, 8003d18 <__ieee754_pow+0x6c0>)
 8003b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b58:	f7fc fb00 	bl	800015c <__adddf3>
 8003b5c:	4622      	mov	r2, r4
 8003b5e:	462b      	mov	r3, r5
 8003b60:	f7fc fcae 	bl	80004c0 <__aeabi_dmul>
 8003b64:	a36e      	add	r3, pc, #440	; (adr r3, 8003d20 <__ieee754_pow+0x6c8>)
 8003b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6a:	f7fc faf7 	bl	800015c <__adddf3>
 8003b6e:	4622      	mov	r2, r4
 8003b70:	462b      	mov	r3, r5
 8003b72:	f7fc fca5 	bl	80004c0 <__aeabi_dmul>
 8003b76:	a36c      	add	r3, pc, #432	; (adr r3, 8003d28 <__ieee754_pow+0x6d0>)
 8003b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b7c:	f7fc faee 	bl	800015c <__adddf3>
 8003b80:	4622      	mov	r2, r4
 8003b82:	4606      	mov	r6, r0
 8003b84:	460f      	mov	r7, r1
 8003b86:	462b      	mov	r3, r5
 8003b88:	4620      	mov	r0, r4
 8003b8a:	4629      	mov	r1, r5
 8003b8c:	f7fc fc98 	bl	80004c0 <__aeabi_dmul>
 8003b90:	4602      	mov	r2, r0
 8003b92:	460b      	mov	r3, r1
 8003b94:	4630      	mov	r0, r6
 8003b96:	4639      	mov	r1, r7
 8003b98:	f7fc fc92 	bl	80004c0 <__aeabi_dmul>
 8003b9c:	4604      	mov	r4, r0
 8003b9e:	460d      	mov	r5, r1
 8003ba0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003ba4:	465b      	mov	r3, fp
 8003ba6:	4652      	mov	r2, sl
 8003ba8:	f7fc fad8 	bl	800015c <__adddf3>
 8003bac:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003bb0:	f7fc fc86 	bl	80004c0 <__aeabi_dmul>
 8003bb4:	4622      	mov	r2, r4
 8003bb6:	462b      	mov	r3, r5
 8003bb8:	f7fc fad0 	bl	800015c <__adddf3>
 8003bbc:	465b      	mov	r3, fp
 8003bbe:	4606      	mov	r6, r0
 8003bc0:	460f      	mov	r7, r1
 8003bc2:	4652      	mov	r2, sl
 8003bc4:	4659      	mov	r1, fp
 8003bc6:	4650      	mov	r0, sl
 8003bc8:	f7fc fc7a 	bl	80004c0 <__aeabi_dmul>
 8003bcc:	2200      	movs	r2, #0
 8003bce:	4b63      	ldr	r3, [pc, #396]	; (8003d5c <__ieee754_pow+0x704>)
 8003bd0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003bd4:	f7fc fac2 	bl	800015c <__adddf3>
 8003bd8:	4632      	mov	r2, r6
 8003bda:	463b      	mov	r3, r7
 8003bdc:	f7fc fabe 	bl	800015c <__adddf3>
 8003be0:	4650      	mov	r0, sl
 8003be2:	460d      	mov	r5, r1
 8003be4:	4602      	mov	r2, r0
 8003be6:	460b      	mov	r3, r1
 8003be8:	4650      	mov	r0, sl
 8003bea:	4659      	mov	r1, fp
 8003bec:	f7fc fc68 	bl	80004c0 <__aeabi_dmul>
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	4680      	mov	r8, r0
 8003bf4:	4689      	mov	r9, r1
 8003bf6:	4b59      	ldr	r3, [pc, #356]	; (8003d5c <__ieee754_pow+0x704>)
 8003bf8:	4629      	mov	r1, r5
 8003bfa:	4650      	mov	r0, sl
 8003bfc:	f7fc faac 	bl	8000158 <__aeabi_dsub>
 8003c00:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003c04:	f7fc faa8 	bl	8000158 <__aeabi_dsub>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	4630      	mov	r0, r6
 8003c0e:	4639      	mov	r1, r7
 8003c10:	f7fc faa2 	bl	8000158 <__aeabi_dsub>
 8003c14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003c18:	f7fc fc52 	bl	80004c0 <__aeabi_dmul>
 8003c1c:	462b      	mov	r3, r5
 8003c1e:	4606      	mov	r6, r0
 8003c20:	460f      	mov	r7, r1
 8003c22:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003c26:	4652      	mov	r2, sl
 8003c28:	f7fc fc4a 	bl	80004c0 <__aeabi_dmul>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	460b      	mov	r3, r1
 8003c30:	4630      	mov	r0, r6
 8003c32:	4639      	mov	r1, r7
 8003c34:	f7fc fa92 	bl	800015c <__adddf3>
 8003c38:	4606      	mov	r6, r0
 8003c3a:	460f      	mov	r7, r1
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4640      	mov	r0, r8
 8003c42:	4649      	mov	r1, r9
 8003c44:	f7fc fa8a 	bl	800015c <__adddf3>
 8003c48:	a339      	add	r3, pc, #228	; (adr r3, 8003d30 <__ieee754_pow+0x6d8>)
 8003c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4e:	4650      	mov	r0, sl
 8003c50:	460d      	mov	r5, r1
 8003c52:	f7fc fc35 	bl	80004c0 <__aeabi_dmul>
 8003c56:	4642      	mov	r2, r8
 8003c58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003c5c:	464b      	mov	r3, r9
 8003c5e:	4629      	mov	r1, r5
 8003c60:	4650      	mov	r0, sl
 8003c62:	f7fc fa79 	bl	8000158 <__aeabi_dsub>
 8003c66:	4602      	mov	r2, r0
 8003c68:	460b      	mov	r3, r1
 8003c6a:	4630      	mov	r0, r6
 8003c6c:	4639      	mov	r1, r7
 8003c6e:	f7fc fa73 	bl	8000158 <__aeabi_dsub>
 8003c72:	a331      	add	r3, pc, #196	; (adr r3, 8003d38 <__ieee754_pow+0x6e0>)
 8003c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c78:	f7fc fc22 	bl	80004c0 <__aeabi_dmul>
 8003c7c:	a330      	add	r3, pc, #192	; (adr r3, 8003d40 <__ieee754_pow+0x6e8>)
 8003c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c82:	4606      	mov	r6, r0
 8003c84:	460f      	mov	r7, r1
 8003c86:	4650      	mov	r0, sl
 8003c88:	4629      	mov	r1, r5
 8003c8a:	f7fc fc19 	bl	80004c0 <__aeabi_dmul>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	460b      	mov	r3, r1
 8003c92:	4630      	mov	r0, r6
 8003c94:	4639      	mov	r1, r7
 8003c96:	f7fc fa61 	bl	800015c <__adddf3>
 8003c9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003c9c:	4b30      	ldr	r3, [pc, #192]	; (8003d60 <__ieee754_pow+0x708>)
 8003c9e:	4413      	add	r3, r2
 8003ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca4:	f7fc fa5a 	bl	800015c <__adddf3>
 8003ca8:	4604      	mov	r4, r0
 8003caa:	9807      	ldr	r0, [sp, #28]
 8003cac:	460d      	mov	r5, r1
 8003cae:	f7fc fba1 	bl	80003f4 <__aeabi_i2d>
 8003cb2:	4606      	mov	r6, r0
 8003cb4:	460f      	mov	r7, r1
 8003cb6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003cb8:	4b2a      	ldr	r3, [pc, #168]	; (8003d64 <__ieee754_pow+0x70c>)
 8003cba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003cc4:	4622      	mov	r2, r4
 8003cc6:	462b      	mov	r3, r5
 8003cc8:	f7fc fa48 	bl	800015c <__adddf3>
 8003ccc:	4642      	mov	r2, r8
 8003cce:	464b      	mov	r3, r9
 8003cd0:	f7fc fa44 	bl	800015c <__adddf3>
 8003cd4:	4632      	mov	r2, r6
 8003cd6:	463b      	mov	r3, r7
 8003cd8:	f7fc fa40 	bl	800015c <__adddf3>
 8003cdc:	4632      	mov	r2, r6
 8003cde:	463b      	mov	r3, r7
 8003ce0:	4650      	mov	r0, sl
 8003ce2:	468b      	mov	fp, r1
 8003ce4:	f7fc fa38 	bl	8000158 <__aeabi_dsub>
 8003ce8:	4642      	mov	r2, r8
 8003cea:	464b      	mov	r3, r9
 8003cec:	f7fc fa34 	bl	8000158 <__aeabi_dsub>
 8003cf0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003cf4:	e613      	b.n	800391e <__ieee754_pow+0x2c6>
 8003cf6:	2601      	movs	r6, #1
 8003cf8:	e6af      	b.n	8003a5a <__ieee754_pow+0x402>
 8003cfa:	bf00      	nop
 8003cfc:	f3af 8000 	nop.w
 8003d00:	4a454eef 	.word	0x4a454eef
 8003d04:	3fca7e28 	.word	0x3fca7e28
 8003d08:	93c9db65 	.word	0x93c9db65
 8003d0c:	3fcd864a 	.word	0x3fcd864a
 8003d10:	a91d4101 	.word	0xa91d4101
 8003d14:	3fd17460 	.word	0x3fd17460
 8003d18:	518f264d 	.word	0x518f264d
 8003d1c:	3fd55555 	.word	0x3fd55555
 8003d20:	db6fabff 	.word	0xdb6fabff
 8003d24:	3fdb6db6 	.word	0x3fdb6db6
 8003d28:	33333303 	.word	0x33333303
 8003d2c:	3fe33333 	.word	0x3fe33333
 8003d30:	e0000000 	.word	0xe0000000
 8003d34:	3feec709 	.word	0x3feec709
 8003d38:	dc3a03fd 	.word	0xdc3a03fd
 8003d3c:	3feec709 	.word	0x3feec709
 8003d40:	145b01f5 	.word	0x145b01f5
 8003d44:	be3e2fe0 	.word	0xbe3e2fe0
 8003d48:	43400000 	.word	0x43400000
 8003d4c:	0003988e 	.word	0x0003988e
 8003d50:	000bb679 	.word	0x000bb679
 8003d54:	0800e668 	.word	0x0800e668
 8003d58:	3ff00000 	.word	0x3ff00000
 8003d5c:	40080000 	.word	0x40080000
 8003d60:	0800e688 	.word	0x0800e688
 8003d64:	0800e678 	.word	0x0800e678
 8003d68:	a39b      	add	r3, pc, #620	; (adr r3, 8003fd8 <__ieee754_pow+0x980>)
 8003d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6e:	4640      	mov	r0, r8
 8003d70:	4649      	mov	r1, r9
 8003d72:	f7fc f9f3 	bl	800015c <__adddf3>
 8003d76:	4622      	mov	r2, r4
 8003d78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003d7c:	462b      	mov	r3, r5
 8003d7e:	4650      	mov	r0, sl
 8003d80:	4639      	mov	r1, r7
 8003d82:	f7fc f9e9 	bl	8000158 <__aeabi_dsub>
 8003d86:	4602      	mov	r2, r0
 8003d88:	460b      	mov	r3, r1
 8003d8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003d8e:	f7fc fe27 	bl	80009e0 <__aeabi_dcmpgt>
 8003d92:	2800      	cmp	r0, #0
 8003d94:	f47f ae13 	bne.w	80039be <__ieee754_pow+0x366>
 8003d98:	4aa3      	ldr	r2, [pc, #652]	; (8004028 <__ieee754_pow+0x9d0>)
 8003d9a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	f340 8104 	ble.w	8003fac <__ieee754_pow+0x954>
 8003da4:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8003da8:	2000      	movs	r0, #0
 8003daa:	151b      	asrs	r3, r3, #20
 8003dac:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8003db0:	fa4a f303 	asr.w	r3, sl, r3
 8003db4:	4433      	add	r3, r6
 8003db6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8003dba:	4f9c      	ldr	r7, [pc, #624]	; (800402c <__ieee754_pow+0x9d4>)
 8003dbc:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8003dc0:	4117      	asrs	r7, r2
 8003dc2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8003dc6:	ea23 0107 	bic.w	r1, r3, r7
 8003dca:	f1c2 0214 	rsb	r2, r2, #20
 8003dce:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8003dd2:	fa4a fa02 	asr.w	sl, sl, r2
 8003dd6:	2e00      	cmp	r6, #0
 8003dd8:	4602      	mov	r2, r0
 8003dda:	460b      	mov	r3, r1
 8003ddc:	4620      	mov	r0, r4
 8003dde:	4629      	mov	r1, r5
 8003de0:	bfb8      	it	lt
 8003de2:	f1ca 0a00 	rsblt	sl, sl, #0
 8003de6:	f7fc f9b7 	bl	8000158 <__aeabi_dsub>
 8003dea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003dee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003df2:	4642      	mov	r2, r8
 8003df4:	464b      	mov	r3, r9
 8003df6:	f7fc f9b1 	bl	800015c <__adddf3>
 8003dfa:	a379      	add	r3, pc, #484	; (adr r3, 8003fe0 <__ieee754_pow+0x988>)
 8003dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e00:	2000      	movs	r0, #0
 8003e02:	460d      	mov	r5, r1
 8003e04:	4604      	mov	r4, r0
 8003e06:	f7fc fb5b 	bl	80004c0 <__aeabi_dmul>
 8003e0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003e0e:	4606      	mov	r6, r0
 8003e10:	460f      	mov	r7, r1
 8003e12:	4620      	mov	r0, r4
 8003e14:	4629      	mov	r1, r5
 8003e16:	f7fc f99f 	bl	8000158 <__aeabi_dsub>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	4640      	mov	r0, r8
 8003e20:	4649      	mov	r1, r9
 8003e22:	f7fc f999 	bl	8000158 <__aeabi_dsub>
 8003e26:	a370      	add	r3, pc, #448	; (adr r3, 8003fe8 <__ieee754_pow+0x990>)
 8003e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e2c:	f7fc fb48 	bl	80004c0 <__aeabi_dmul>
 8003e30:	a36f      	add	r3, pc, #444	; (adr r3, 8003ff0 <__ieee754_pow+0x998>)
 8003e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e36:	4680      	mov	r8, r0
 8003e38:	4689      	mov	r9, r1
 8003e3a:	4620      	mov	r0, r4
 8003e3c:	4629      	mov	r1, r5
 8003e3e:	f7fc fb3f 	bl	80004c0 <__aeabi_dmul>
 8003e42:	4602      	mov	r2, r0
 8003e44:	460b      	mov	r3, r1
 8003e46:	4640      	mov	r0, r8
 8003e48:	4649      	mov	r1, r9
 8003e4a:	f7fc f987 	bl	800015c <__adddf3>
 8003e4e:	4604      	mov	r4, r0
 8003e50:	460d      	mov	r5, r1
 8003e52:	4602      	mov	r2, r0
 8003e54:	460b      	mov	r3, r1
 8003e56:	4630      	mov	r0, r6
 8003e58:	4639      	mov	r1, r7
 8003e5a:	f7fc f97f 	bl	800015c <__adddf3>
 8003e5e:	4632      	mov	r2, r6
 8003e60:	463b      	mov	r3, r7
 8003e62:	4680      	mov	r8, r0
 8003e64:	4689      	mov	r9, r1
 8003e66:	f7fc f977 	bl	8000158 <__aeabi_dsub>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	4620      	mov	r0, r4
 8003e70:	4629      	mov	r1, r5
 8003e72:	f7fc f971 	bl	8000158 <__aeabi_dsub>
 8003e76:	4642      	mov	r2, r8
 8003e78:	4606      	mov	r6, r0
 8003e7a:	460f      	mov	r7, r1
 8003e7c:	464b      	mov	r3, r9
 8003e7e:	4640      	mov	r0, r8
 8003e80:	4649      	mov	r1, r9
 8003e82:	f7fc fb1d 	bl	80004c0 <__aeabi_dmul>
 8003e86:	a35c      	add	r3, pc, #368	; (adr r3, 8003ff8 <__ieee754_pow+0x9a0>)
 8003e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8c:	4604      	mov	r4, r0
 8003e8e:	460d      	mov	r5, r1
 8003e90:	f7fc fb16 	bl	80004c0 <__aeabi_dmul>
 8003e94:	a35a      	add	r3, pc, #360	; (adr r3, 8004000 <__ieee754_pow+0x9a8>)
 8003e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9a:	f7fc f95d 	bl	8000158 <__aeabi_dsub>
 8003e9e:	4622      	mov	r2, r4
 8003ea0:	462b      	mov	r3, r5
 8003ea2:	f7fc fb0d 	bl	80004c0 <__aeabi_dmul>
 8003ea6:	a358      	add	r3, pc, #352	; (adr r3, 8004008 <__ieee754_pow+0x9b0>)
 8003ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eac:	f7fc f956 	bl	800015c <__adddf3>
 8003eb0:	4622      	mov	r2, r4
 8003eb2:	462b      	mov	r3, r5
 8003eb4:	f7fc fb04 	bl	80004c0 <__aeabi_dmul>
 8003eb8:	a355      	add	r3, pc, #340	; (adr r3, 8004010 <__ieee754_pow+0x9b8>)
 8003eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ebe:	f7fc f94b 	bl	8000158 <__aeabi_dsub>
 8003ec2:	4622      	mov	r2, r4
 8003ec4:	462b      	mov	r3, r5
 8003ec6:	f7fc fafb 	bl	80004c0 <__aeabi_dmul>
 8003eca:	a353      	add	r3, pc, #332	; (adr r3, 8004018 <__ieee754_pow+0x9c0>)
 8003ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed0:	f7fc f944 	bl	800015c <__adddf3>
 8003ed4:	4622      	mov	r2, r4
 8003ed6:	462b      	mov	r3, r5
 8003ed8:	f7fc faf2 	bl	80004c0 <__aeabi_dmul>
 8003edc:	4602      	mov	r2, r0
 8003ede:	460b      	mov	r3, r1
 8003ee0:	4640      	mov	r0, r8
 8003ee2:	4649      	mov	r1, r9
 8003ee4:	f7fc f938 	bl	8000158 <__aeabi_dsub>
 8003ee8:	4604      	mov	r4, r0
 8003eea:	460d      	mov	r5, r1
 8003eec:	4602      	mov	r2, r0
 8003eee:	460b      	mov	r3, r1
 8003ef0:	4640      	mov	r0, r8
 8003ef2:	4649      	mov	r1, r9
 8003ef4:	f7fc fae4 	bl	80004c0 <__aeabi_dmul>
 8003ef8:	2200      	movs	r2, #0
 8003efa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003efe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003f02:	4620      	mov	r0, r4
 8003f04:	4629      	mov	r1, r5
 8003f06:	f7fc f927 	bl	8000158 <__aeabi_dsub>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f12:	f7fc fbff 	bl	8000714 <__aeabi_ddiv>
 8003f16:	4632      	mov	r2, r6
 8003f18:	4604      	mov	r4, r0
 8003f1a:	460d      	mov	r5, r1
 8003f1c:	463b      	mov	r3, r7
 8003f1e:	4640      	mov	r0, r8
 8003f20:	4649      	mov	r1, r9
 8003f22:	f7fc facd 	bl	80004c0 <__aeabi_dmul>
 8003f26:	4632      	mov	r2, r6
 8003f28:	463b      	mov	r3, r7
 8003f2a:	f7fc f917 	bl	800015c <__adddf3>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	460b      	mov	r3, r1
 8003f32:	4620      	mov	r0, r4
 8003f34:	4629      	mov	r1, r5
 8003f36:	f7fc f90f 	bl	8000158 <__aeabi_dsub>
 8003f3a:	4642      	mov	r2, r8
 8003f3c:	464b      	mov	r3, r9
 8003f3e:	f7fc f90b 	bl	8000158 <__aeabi_dsub>
 8003f42:	4602      	mov	r2, r0
 8003f44:	460b      	mov	r3, r1
 8003f46:	2000      	movs	r0, #0
 8003f48:	4939      	ldr	r1, [pc, #228]	; (8004030 <__ieee754_pow+0x9d8>)
 8003f4a:	f7fc f905 	bl	8000158 <__aeabi_dsub>
 8003f4e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8003f52:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8003f56:	da2c      	bge.n	8003fb2 <__ieee754_pow+0x95a>
 8003f58:	4652      	mov	r2, sl
 8003f5a:	f000 f9b5 	bl	80042c8 <scalbn>
 8003f5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003f62:	e40a      	b.n	800377a <__ieee754_pow+0x122>
 8003f64:	4b33      	ldr	r3, [pc, #204]	; (8004034 <__ieee754_pow+0x9dc>)
 8003f66:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8003f6a:	429f      	cmp	r7, r3
 8003f6c:	f77f af14 	ble.w	8003d98 <__ieee754_pow+0x740>
 8003f70:	4b31      	ldr	r3, [pc, #196]	; (8004038 <__ieee754_pow+0x9e0>)
 8003f72:	440b      	add	r3, r1
 8003f74:	4303      	orrs	r3, r0
 8003f76:	d00b      	beq.n	8003f90 <__ieee754_pow+0x938>
 8003f78:	a329      	add	r3, pc, #164	; (adr r3, 8004020 <__ieee754_pow+0x9c8>)
 8003f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003f82:	f7fc fa9d 	bl	80004c0 <__aeabi_dmul>
 8003f86:	a326      	add	r3, pc, #152	; (adr r3, 8004020 <__ieee754_pow+0x9c8>)
 8003f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8c:	f7ff bbf5 	b.w	800377a <__ieee754_pow+0x122>
 8003f90:	4622      	mov	r2, r4
 8003f92:	462b      	mov	r3, r5
 8003f94:	f7fc f8e0 	bl	8000158 <__aeabi_dsub>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	4640      	mov	r0, r8
 8003f9e:	4649      	mov	r1, r9
 8003fa0:	f7fc fd0a 	bl	80009b8 <__aeabi_dcmple>
 8003fa4:	2800      	cmp	r0, #0
 8003fa6:	f43f aef7 	beq.w	8003d98 <__ieee754_pow+0x740>
 8003faa:	e7e5      	b.n	8003f78 <__ieee754_pow+0x920>
 8003fac:	f04f 0a00 	mov.w	sl, #0
 8003fb0:	e71d      	b.n	8003dee <__ieee754_pow+0x796>
 8003fb2:	4621      	mov	r1, r4
 8003fb4:	e7d3      	b.n	8003f5e <__ieee754_pow+0x906>
 8003fb6:	2000      	movs	r0, #0
 8003fb8:	491d      	ldr	r1, [pc, #116]	; (8004030 <__ieee754_pow+0x9d8>)
 8003fba:	f7ff bbac 	b.w	8003716 <__ieee754_pow+0xbe>
 8003fbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003fc2:	f7ff bba8 	b.w	8003716 <__ieee754_pow+0xbe>
 8003fc6:	4638      	mov	r0, r7
 8003fc8:	4641      	mov	r1, r8
 8003fca:	f7ff bba4 	b.w	8003716 <__ieee754_pow+0xbe>
 8003fce:	9200      	str	r2, [sp, #0]
 8003fd0:	f7ff bbb4 	b.w	800373c <__ieee754_pow+0xe4>
 8003fd4:	f3af 8000 	nop.w
 8003fd8:	652b82fe 	.word	0x652b82fe
 8003fdc:	3c971547 	.word	0x3c971547
 8003fe0:	00000000 	.word	0x00000000
 8003fe4:	3fe62e43 	.word	0x3fe62e43
 8003fe8:	fefa39ef 	.word	0xfefa39ef
 8003fec:	3fe62e42 	.word	0x3fe62e42
 8003ff0:	0ca86c39 	.word	0x0ca86c39
 8003ff4:	be205c61 	.word	0xbe205c61
 8003ff8:	72bea4d0 	.word	0x72bea4d0
 8003ffc:	3e663769 	.word	0x3e663769
 8004000:	c5d26bf1 	.word	0xc5d26bf1
 8004004:	3ebbbd41 	.word	0x3ebbbd41
 8004008:	af25de2c 	.word	0xaf25de2c
 800400c:	3f11566a 	.word	0x3f11566a
 8004010:	16bebd93 	.word	0x16bebd93
 8004014:	3f66c16c 	.word	0x3f66c16c
 8004018:	5555553e 	.word	0x5555553e
 800401c:	3fc55555 	.word	0x3fc55555
 8004020:	c2f8f359 	.word	0xc2f8f359
 8004024:	01a56e1f 	.word	0x01a56e1f
 8004028:	3fe00000 	.word	0x3fe00000
 800402c:	000fffff 	.word	0x000fffff
 8004030:	3ff00000 	.word	0x3ff00000
 8004034:	4090cbff 	.word	0x4090cbff
 8004038:	3f6f3400 	.word	0x3f6f3400

0800403c <__ieee754_sqrt>:
 800403c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004040:	f8df e14c 	ldr.w	lr, [pc, #332]	; 8004190 <__ieee754_sqrt+0x154>
 8004044:	4606      	mov	r6, r0
 8004046:	ea3e 0e01 	bics.w	lr, lr, r1
 800404a:	460d      	mov	r5, r1
 800404c:	4607      	mov	r7, r0
 800404e:	460a      	mov	r2, r1
 8004050:	460c      	mov	r4, r1
 8004052:	4603      	mov	r3, r0
 8004054:	d10f      	bne.n	8004076 <__ieee754_sqrt+0x3a>
 8004056:	4602      	mov	r2, r0
 8004058:	460b      	mov	r3, r1
 800405a:	f7fc fa31 	bl	80004c0 <__aeabi_dmul>
 800405e:	4602      	mov	r2, r0
 8004060:	460b      	mov	r3, r1
 8004062:	4630      	mov	r0, r6
 8004064:	4629      	mov	r1, r5
 8004066:	f7fc f879 	bl	800015c <__adddf3>
 800406a:	4606      	mov	r6, r0
 800406c:	460d      	mov	r5, r1
 800406e:	4630      	mov	r0, r6
 8004070:	4629      	mov	r1, r5
 8004072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004076:	2900      	cmp	r1, #0
 8004078:	dc0e      	bgt.n	8004098 <__ieee754_sqrt+0x5c>
 800407a:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
 800407e:	ea5e 0707 	orrs.w	r7, lr, r7
 8004082:	d0f4      	beq.n	800406e <__ieee754_sqrt+0x32>
 8004084:	b141      	cbz	r1, 8004098 <__ieee754_sqrt+0x5c>
 8004086:	4602      	mov	r2, r0
 8004088:	460b      	mov	r3, r1
 800408a:	f7fc f865 	bl	8000158 <__aeabi_dsub>
 800408e:	4602      	mov	r2, r0
 8004090:	460b      	mov	r3, r1
 8004092:	f7fc fb3f 	bl	8000714 <__aeabi_ddiv>
 8004096:	e7e8      	b.n	800406a <__ieee754_sqrt+0x2e>
 8004098:	1512      	asrs	r2, r2, #20
 800409a:	d10c      	bne.n	80040b6 <__ieee754_sqrt+0x7a>
 800409c:	2c00      	cmp	r4, #0
 800409e:	d06e      	beq.n	800417e <__ieee754_sqrt+0x142>
 80040a0:	2100      	movs	r1, #0
 80040a2:	02e6      	lsls	r6, r4, #11
 80040a4:	d56f      	bpl.n	8004186 <__ieee754_sqrt+0x14a>
 80040a6:	1e48      	subs	r0, r1, #1
 80040a8:	1a12      	subs	r2, r2, r0
 80040aa:	f1c1 0020 	rsb	r0, r1, #32
 80040ae:	fa23 f000 	lsr.w	r0, r3, r0
 80040b2:	4304      	orrs	r4, r0
 80040b4:	408b      	lsls	r3, r1
 80040b6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80040ba:	07d5      	lsls	r5, r2, #31
 80040bc:	f04f 0500 	mov.w	r5, #0
 80040c0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80040c4:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 80040c8:	bf42      	ittt	mi
 80040ca:	0064      	lslmi	r4, r4, #1
 80040cc:	eb04 74d3 	addmi.w	r4, r4, r3, lsr #31
 80040d0:	005b      	lslmi	r3, r3, #1
 80040d2:	eb04 71d3 	add.w	r1, r4, r3, lsr #31
 80040d6:	1050      	asrs	r0, r2, #1
 80040d8:	4421      	add	r1, r4
 80040da:	2216      	movs	r2, #22
 80040dc:	462c      	mov	r4, r5
 80040de:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	19a7      	adds	r7, r4, r6
 80040e6:	428f      	cmp	r7, r1
 80040e8:	bfde      	ittt	le
 80040ea:	1bc9      	suble	r1, r1, r7
 80040ec:	19bc      	addle	r4, r7, r6
 80040ee:	19ad      	addle	r5, r5, r6
 80040f0:	0049      	lsls	r1, r1, #1
 80040f2:	3a01      	subs	r2, #1
 80040f4:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80040f8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80040fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004100:	d1f0      	bne.n	80040e4 <__ieee754_sqrt+0xa8>
 8004102:	f04f 0e20 	mov.w	lr, #32
 8004106:	4694      	mov	ip, r2
 8004108:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800410c:	42a1      	cmp	r1, r4
 800410e:	eb06 070c 	add.w	r7, r6, ip
 8004112:	dc02      	bgt.n	800411a <__ieee754_sqrt+0xde>
 8004114:	d112      	bne.n	800413c <__ieee754_sqrt+0x100>
 8004116:	429f      	cmp	r7, r3
 8004118:	d810      	bhi.n	800413c <__ieee754_sqrt+0x100>
 800411a:	2f00      	cmp	r7, #0
 800411c:	eb07 0c06 	add.w	ip, r7, r6
 8004120:	da34      	bge.n	800418c <__ieee754_sqrt+0x150>
 8004122:	f1bc 0f00 	cmp.w	ip, #0
 8004126:	db31      	blt.n	800418c <__ieee754_sqrt+0x150>
 8004128:	f104 0801 	add.w	r8, r4, #1
 800412c:	1b09      	subs	r1, r1, r4
 800412e:	4644      	mov	r4, r8
 8004130:	429f      	cmp	r7, r3
 8004132:	bf88      	it	hi
 8004134:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8004138:	1bdb      	subs	r3, r3, r7
 800413a:	4432      	add	r2, r6
 800413c:	eb01 77d3 	add.w	r7, r1, r3, lsr #31
 8004140:	f1be 0e01 	subs.w	lr, lr, #1
 8004144:	4439      	add	r1, r7
 8004146:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800414a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800414e:	d1dd      	bne.n	800410c <__ieee754_sqrt+0xd0>
 8004150:	430b      	orrs	r3, r1
 8004152:	d006      	beq.n	8004162 <__ieee754_sqrt+0x126>
 8004154:	1c54      	adds	r4, r2, #1
 8004156:	bf0b      	itete	eq
 8004158:	4672      	moveq	r2, lr
 800415a:	3201      	addne	r2, #1
 800415c:	3501      	addeq	r5, #1
 800415e:	f022 0201 	bicne.w	r2, r2, #1
 8004162:	106b      	asrs	r3, r5, #1
 8004164:	0852      	lsrs	r2, r2, #1
 8004166:	07e9      	lsls	r1, r5, #31
 8004168:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800416c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8004170:	bf48      	it	mi
 8004172:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8004176:	eb03 5500 	add.w	r5, r3, r0, lsl #20
 800417a:	4616      	mov	r6, r2
 800417c:	e777      	b.n	800406e <__ieee754_sqrt+0x32>
 800417e:	0adc      	lsrs	r4, r3, #11
 8004180:	3a15      	subs	r2, #21
 8004182:	055b      	lsls	r3, r3, #21
 8004184:	e78a      	b.n	800409c <__ieee754_sqrt+0x60>
 8004186:	0064      	lsls	r4, r4, #1
 8004188:	3101      	adds	r1, #1
 800418a:	e78a      	b.n	80040a2 <__ieee754_sqrt+0x66>
 800418c:	46a0      	mov	r8, r4
 800418e:	e7cd      	b.n	800412c <__ieee754_sqrt+0xf0>
 8004190:	7ff00000 	.word	0x7ff00000

08004194 <fabs>:
 8004194:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004198:	4770      	bx	lr

0800419a <finite>:
 800419a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800419e:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 80041a2:	0fc0      	lsrs	r0, r0, #31
 80041a4:	4770      	bx	lr

080041a6 <matherr>:
 80041a6:	2000      	movs	r0, #0
 80041a8:	4770      	bx	lr
	...

080041ac <nan>:
 80041ac:	2000      	movs	r0, #0
 80041ae:	4901      	ldr	r1, [pc, #4]	; (80041b4 <nan+0x8>)
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	7ff80000 	.word	0x7ff80000

080041b8 <rint>:
 80041b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041ba:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
 80041be:	f2ae 37ff 	subw	r7, lr, #1023	; 0x3ff
 80041c2:	2f13      	cmp	r7, #19
 80041c4:	4602      	mov	r2, r0
 80041c6:	460b      	mov	r3, r1
 80041c8:	4684      	mov	ip, r0
 80041ca:	460c      	mov	r4, r1
 80041cc:	4605      	mov	r5, r0
 80041ce:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 80041d2:	dc56      	bgt.n	8004282 <rint+0xca>
 80041d4:	2f00      	cmp	r7, #0
 80041d6:	da29      	bge.n	800422c <rint+0x74>
 80041d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80041dc:	4301      	orrs	r1, r0
 80041de:	d021      	beq.n	8004224 <rint+0x6c>
 80041e0:	f3c3 0513 	ubfx	r5, r3, #0, #20
 80041e4:	4305      	orrs	r5, r0
 80041e6:	426b      	negs	r3, r5
 80041e8:	432b      	orrs	r3, r5
 80041ea:	0b1b      	lsrs	r3, r3, #12
 80041ec:	0c64      	lsrs	r4, r4, #17
 80041ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041f2:	0464      	lsls	r4, r4, #17
 80041f4:	ea43 0104 	orr.w	r1, r3, r4
 80041f8:	4b31      	ldr	r3, [pc, #196]	; (80042c0 <rint+0x108>)
 80041fa:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80041fe:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004202:	4622      	mov	r2, r4
 8004204:	462b      	mov	r3, r5
 8004206:	f7fb ffa9 	bl	800015c <__adddf3>
 800420a:	e9cd 0100 	strd	r0, r1, [sp]
 800420e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004212:	4622      	mov	r2, r4
 8004214:	462b      	mov	r3, r5
 8004216:	f7fb ff9f 	bl	8000158 <__aeabi_dsub>
 800421a:	4602      	mov	r2, r0
 800421c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004220:	ea41 73c6 	orr.w	r3, r1, r6, lsl #31
 8004224:	4610      	mov	r0, r2
 8004226:	4619      	mov	r1, r3
 8004228:	b003      	add	sp, #12
 800422a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800422c:	4925      	ldr	r1, [pc, #148]	; (80042c4 <rint+0x10c>)
 800422e:	4139      	asrs	r1, r7
 8004230:	ea03 0001 	and.w	r0, r3, r1
 8004234:	4310      	orrs	r0, r2
 8004236:	d0f5      	beq.n	8004224 <rint+0x6c>
 8004238:	084b      	lsrs	r3, r1, #1
 800423a:	ea04 0203 	and.w	r2, r4, r3
 800423e:	ea52 050c 	orrs.w	r5, r2, ip
 8004242:	d00a      	beq.n	800425a <rint+0xa2>
 8004244:	ea24 0303 	bic.w	r3, r4, r3
 8004248:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800424c:	2f13      	cmp	r7, #19
 800424e:	bf0c      	ite	eq
 8004250:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 8004254:	2500      	movne	r5, #0
 8004256:	413c      	asrs	r4, r7
 8004258:	431c      	orrs	r4, r3
 800425a:	4b19      	ldr	r3, [pc, #100]	; (80042c0 <rint+0x108>)
 800425c:	4621      	mov	r1, r4
 800425e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8004262:	4628      	mov	r0, r5
 8004264:	e9d6 4500 	ldrd	r4, r5, [r6]
 8004268:	4622      	mov	r2, r4
 800426a:	462b      	mov	r3, r5
 800426c:	f7fb ff76 	bl	800015c <__adddf3>
 8004270:	e9cd 0100 	strd	r0, r1, [sp]
 8004274:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004278:	4622      	mov	r2, r4
 800427a:	462b      	mov	r3, r5
 800427c:	f7fb ff6c 	bl	8000158 <__aeabi_dsub>
 8004280:	e006      	b.n	8004290 <rint+0xd8>
 8004282:	2f33      	cmp	r7, #51	; 0x33
 8004284:	dd07      	ble.n	8004296 <rint+0xde>
 8004286:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800428a:	d1cb      	bne.n	8004224 <rint+0x6c>
 800428c:	f7fb ff66 	bl	800015c <__adddf3>
 8004290:	4602      	mov	r2, r0
 8004292:	460b      	mov	r3, r1
 8004294:	e7c6      	b.n	8004224 <rint+0x6c>
 8004296:	f04f 31ff 	mov.w	r1, #4294967295
 800429a:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
 800429e:	fa21 f10e 	lsr.w	r1, r1, lr
 80042a2:	4208      	tst	r0, r1
 80042a4:	d0be      	beq.n	8004224 <rint+0x6c>
 80042a6:	084b      	lsrs	r3, r1, #1
 80042a8:	4218      	tst	r0, r3
 80042aa:	bf1f      	itttt	ne
 80042ac:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 80042b0:	ea20 0303 	bicne.w	r3, r0, r3
 80042b4:	fa45 fe0e 	asrne.w	lr, r5, lr
 80042b8:	ea4e 0503 	orrne.w	r5, lr, r3
 80042bc:	e7cd      	b.n	800425a <rint+0xa2>
 80042be:	bf00      	nop
 80042c0:	0800e698 	.word	0x0800e698
 80042c4:	000fffff 	.word	0x000fffff

080042c8 <scalbn>:
 80042c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ca:	4616      	mov	r6, r2
 80042cc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80042d0:	4604      	mov	r4, r0
 80042d2:	460d      	mov	r5, r1
 80042d4:	460b      	mov	r3, r1
 80042d6:	b98a      	cbnz	r2, 80042fc <scalbn+0x34>
 80042d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80042dc:	4303      	orrs	r3, r0
 80042de:	d035      	beq.n	800434c <scalbn+0x84>
 80042e0:	2200      	movs	r2, #0
 80042e2:	4b2d      	ldr	r3, [pc, #180]	; (8004398 <scalbn+0xd0>)
 80042e4:	f7fc f8ec 	bl	80004c0 <__aeabi_dmul>
 80042e8:	4a2c      	ldr	r2, [pc, #176]	; (800439c <scalbn+0xd4>)
 80042ea:	4604      	mov	r4, r0
 80042ec:	4296      	cmp	r6, r2
 80042ee:	460d      	mov	r5, r1
 80042f0:	460b      	mov	r3, r1
 80042f2:	da0e      	bge.n	8004312 <scalbn+0x4a>
 80042f4:	a324      	add	r3, pc, #144	; (adr r3, 8004388 <scalbn+0xc0>)
 80042f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042fa:	e01c      	b.n	8004336 <scalbn+0x6e>
 80042fc:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8004300:	42ba      	cmp	r2, r7
 8004302:	d109      	bne.n	8004318 <scalbn+0x50>
 8004304:	4602      	mov	r2, r0
 8004306:	460b      	mov	r3, r1
 8004308:	f7fb ff28 	bl	800015c <__adddf3>
 800430c:	4604      	mov	r4, r0
 800430e:	460d      	mov	r5, r1
 8004310:	e01c      	b.n	800434c <scalbn+0x84>
 8004312:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004316:	3a36      	subs	r2, #54	; 0x36
 8004318:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800431c:	4432      	add	r2, r6
 800431e:	428a      	cmp	r2, r1
 8004320:	dd0c      	ble.n	800433c <scalbn+0x74>
 8004322:	4622      	mov	r2, r4
 8004324:	462b      	mov	r3, r5
 8004326:	a11a      	add	r1, pc, #104	; (adr r1, 8004390 <scalbn+0xc8>)
 8004328:	e9d1 0100 	ldrd	r0, r1, [r1]
 800432c:	f000 f83a 	bl	80043a4 <copysign>
 8004330:	a317      	add	r3, pc, #92	; (adr r3, 8004390 <scalbn+0xc8>)
 8004332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004336:	f7fc f8c3 	bl	80004c0 <__aeabi_dmul>
 800433a:	e7e7      	b.n	800430c <scalbn+0x44>
 800433c:	2a00      	cmp	r2, #0
 800433e:	dd08      	ble.n	8004352 <scalbn+0x8a>
 8004340:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004344:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004348:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800434c:	4620      	mov	r0, r4
 800434e:	4629      	mov	r1, r5
 8004350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004352:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004356:	da0b      	bge.n	8004370 <scalbn+0xa8>
 8004358:	f24c 3350 	movw	r3, #50000	; 0xc350
 800435c:	429e      	cmp	r6, r3
 800435e:	4622      	mov	r2, r4
 8004360:	462b      	mov	r3, r5
 8004362:	dce0      	bgt.n	8004326 <scalbn+0x5e>
 8004364:	a108      	add	r1, pc, #32	; (adr r1, 8004388 <scalbn+0xc0>)
 8004366:	e9d1 0100 	ldrd	r0, r1, [r1]
 800436a:	f000 f81b 	bl	80043a4 <copysign>
 800436e:	e7c1      	b.n	80042f4 <scalbn+0x2c>
 8004370:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004374:	3236      	adds	r2, #54	; 0x36
 8004376:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800437a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800437e:	4620      	mov	r0, r4
 8004380:	4629      	mov	r1, r5
 8004382:	2200      	movs	r2, #0
 8004384:	4b06      	ldr	r3, [pc, #24]	; (80043a0 <scalbn+0xd8>)
 8004386:	e7d6      	b.n	8004336 <scalbn+0x6e>
 8004388:	c2f8f359 	.word	0xc2f8f359
 800438c:	01a56e1f 	.word	0x01a56e1f
 8004390:	8800759c 	.word	0x8800759c
 8004394:	7e37e43c 	.word	0x7e37e43c
 8004398:	43500000 	.word	0x43500000
 800439c:	ffff3cb0 	.word	0xffff3cb0
 80043a0:	3c900000 	.word	0x3c900000

080043a4 <copysign>:
 80043a4:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80043a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043ac:	ea42 0103 	orr.w	r1, r2, r3
 80043b0:	4770      	bx	lr
	...

080043b4 <__errno>:
 80043b4:	4b01      	ldr	r3, [pc, #4]	; (80043bc <__errno+0x8>)
 80043b6:	6818      	ldr	r0, [r3, #0]
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	2000000c 	.word	0x2000000c

080043c0 <_init>:
 80043c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c2:	bf00      	nop
 80043c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043c6:	bc08      	pop	{r3}
 80043c8:	469e      	mov	lr, r3
 80043ca:	4770      	bx	lr

080043cc <_fini>:
 80043cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ce:	bf00      	nop
 80043d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043d2:	bc08      	pop	{r3}
 80043d4:	469e      	mov	lr, r3
 80043d6:	4770      	bx	lr
